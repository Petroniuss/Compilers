
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "startnonassocIFxnonassocELSEnonassocEQLNEQGTGTELTLTEleft+-left/*rightUMINUSleftTRANSPOSEADDASSIGN ASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQL EYE FLOATNUM FOR GT GTE ID IF INTNUM LT LTE MULTASSIGN NEQ ONES PRINT RETURN STR SUBASSIGN TRANSPOSE WHILE ZEROS\n        start : statements\n    \n        statements : statements statement\n    \n        statements : statement\n    \n        statement : assignment ';'\n                  | print ';'\n                  | continue ';'\n                  | break ';'\n                  | return ';'\n                  | if\n                  | for\n                  | while\n                  | nested_statements\n    \n        for : FOR ID ASSIGN expression ':' expression statement\n    \n        while : WHILE condition statement\n    \n        break : BREAK\n    \n        return : RETURN expression\n    \n        continue : CONTINUE\n    \n        print : PRINT expression_list\n    \n        assignment : ID assign_symbol expression\n    \n        assignment : ID slice assign_symbol expression\n    \n        assign_symbol : ASSIGN\n                      | SUBASSIGN\n                      | ADDASSIGN\n                      | DIVASSIGN\n                      | MULTASSIGN\n    \n        expression_list : expression_list ',' expression\n    \n        expression_list : expression\n    \n        expression : term\n    \n        expression : built_in_function '(' expression_list ')'\n    \n        expression : expression '+' term\n                   | expression '-' term\n                   | expression '/' term\n                   | expression '*' term\n    \n        expression : expression EQL term\n                   | expression NEQ term\n                   | expression GT term\n                   | expression GTE term\n                   | expression LT term\n                   | expression LTE term \n    \n        expression : '-' term %prec UMINUS\n    \n        expression : expression TRANSPOSE\n    \n        expression : ID dot_operation term\n    \n        expression : vector dot_operation term\n    \n         dot_operation : DOTADD\n                       | DOTSUB\n                       | DOTMUL\n                       | DOTDIV\n    \n        vector : '[' vector_contents ']'\n    \n        vector : '[' ']'\n    \n        vector_contents : vector_contents ',' vector_element\n    \n        vector_contents : vector_element\n    \n        vector_element : term\n    \n        slice : '[' slice_contents ']'\n    \n        slice_contents : slice_contents ',' range\n    \n        slice_contents : range\n    \n        range : expression ':' expression\n    \n        range : expression ':'\n    \n        range : ':' expression\n    \n        range : expression\n    \n        if : IF condition statement %prec IFx\n    \n        if : IF condition statement ELSE statement\n    \n        condition : '(' expression ')'\n    \n        nested_statements : nested_empty\n                          | nested_statements_list\n    \n        nested_statements_list : '{' statements '}'\n    \n        nested_empty : '{' '}'\n    \n        term : '(' expression ')'\n    \n        term : vector\n    \n        term : INTNUM\n    \n        term : FLOATNUM\n    \n        term : STR\n    \n        term : ID\n    \n        built_in_function : EYE\n                          | ONES\n                          | ZEROS\n    "
    
_lr_action_items = {'ID':([0,2,3,9,10,11,12,14,17,19,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37,40,42,43,44,45,46,47,48,52,54,55,57,58,59,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,82,83,84,85,86,87,88,90,93,95,96,97,100,101,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,120,121,125,127,128,129,130,],[13,13,-3,-9,-10,-11,-12,44,44,56,-63,-64,13,-2,-4,-5,-6,-7,-8,44,-21,-22,-23,-24,-25,44,-28,44,82,-72,-68,-69,-70,-71,82,13,44,13,-66,13,44,44,44,82,82,82,82,82,82,82,82,82,82,-41,44,-40,-68,-72,82,-44,-45,-46,-47,82,-49,-60,44,-14,-65,44,44,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-42,-43,-48,82,13,-62,-29,-61,44,13,-13,]),'PRINT':([0,2,3,9,10,11,12,21,22,23,24,25,26,27,28,29,40,44,45,46,47,48,54,57,58,59,77,80,81,82,90,93,96,97,104,105,106,107,108,109,110,111,112,113,115,116,117,118,120,121,125,127,129,130,],[14,14,-3,-9,-10,-11,-12,-63,-64,14,-2,-4,-5,-6,-7,-8,-28,-72,-68,-69,-70,-71,14,14,-66,14,-41,-40,-68,-72,-49,-60,-14,-65,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-42,-43,-48,14,-62,-29,-61,14,-13,]),'CONTINUE':([0,2,3,9,10,11,12,21,22,23,24,25,26,27,28,29,40,44,45,46,47,48,54,57,58,59,77,80,81,82,90,93,96,97,104,105,106,107,108,109,110,111,112,113,115,116,117,118,120,121,125,127,129,130,],[15,15,-3,-9,-10,-11,-12,-63,-64,15,-2,-4,-5,-6,-7,-8,-28,-72,-68,-69,-70,-71,15,15,-66,15,-41,-40,-68,-72,-49,-60,-14,-65,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-42,-43,-48,15,-62,-29,-61,15,-13,]),'BREAK':([0,2,3,9,10,11,12,21,22,23,24,25,26,27,28,29,40,44,45,46,47,48,54,57,58,59,77,80,81,82,90,93,96,97,104,105,106,107,108,109,110,111,112,113,115,116,117,118,120,121,125,127,129,130,],[16,16,-3,-9,-10,-11,-12,-63,-64,16,-2,-4,-5,-6,-7,-8,-28,-72,-68,-69,-70,-71,16,16,-66,16,-41,-40,-68,-72,-49,-60,-14,-65,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-42,-43,-48,16,-62,-29,-61,16,-13,]),'RETURN':([0,2,3,9,10,11,12,21,22,23,24,25,26,27,28,29,40,44,45,46,47,48,54,57,58,59,77,80,81,82,90,93,96,97,104,105,106,107,108,109,110,111,112,113,115,116,117,118,120,121,125,127,129,130,],[17,17,-3,-9,-10,-11,-12,-63,-64,17,-2,-4,-5,-6,-7,-8,-28,-72,-68,-69,-70,-71,17,17,-66,17,-41,-40,-68,-72,-49,-60,-14,-65,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-42,-43,-48,17,-62,-29,-61,17,-13,]),'IF':([0,2,3,9,10,11,12,21,22,23,24,25,26,27,28,29,40,44,45,46,47,48,54,57,58,59,77,80,81,82,90,93,96,97,104,105,106,107,108,109,110,111,112,113,115,116,117,118,120,121,125,127,129,130,],[18,18,-3,-9,-10,-11,-12,-63,-64,18,-2,-4,-5,-6,-7,-8,-28,-72,-68,-69,-70,-71,18,18,-66,18,-41,-40,-68,-72,-49,-60,-14,-65,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-42,-43,-48,18,-62,-29,-61,18,-13,]),'FOR':([0,2,3,9,10,11,12,21,22,23,24,25,26,27,28,29,40,44,45,46,47,48,54,57,58,59,77,80,81,82,90,93,96,97,104,105,106,107,108,109,110,111,112,113,115,116,117,118,120,121,125,127,129,130,],[19,19,-3,-9,-10,-11,-12,-63,-64,19,-2,-4,-5,-6,-7,-8,-28,-72,-68,-69,-70,-71,19,19,-66,19,-41,-40,-68,-72,-49,-60,-14,-65,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-42,-43,-48,19,-62,-29,-61,19,-13,]),'WHILE':([0,2,3,9,10,11,12,21,22,23,24,25,26,27,28,29,40,44,45,46,47,48,54,57,58,59,77,80,81,82,90,93,96,97,104,105,106,107,108,109,110,111,112,113,115,116,117,118,120,121,125,127,129,130,],[20,20,-3,-9,-10,-11,-12,-63,-64,20,-2,-4,-5,-6,-7,-8,-28,-72,-68,-69,-70,-71,20,20,-66,20,-41,-40,-68,-72,-49,-60,-14,-65,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-42,-43,-48,20,-62,-29,-61,20,-13,]),'{':([0,2,3,9,10,11,12,21,22,23,24,25,26,27,28,29,40,44,45,46,47,48,54,57,58,59,77,80,81,82,90,93,96,97,104,105,106,107,108,109,110,111,112,113,115,116,117,118,120,121,125,127,129,130,],[23,23,-3,-9,-10,-11,-12,-63,-64,23,-2,-4,-5,-6,-7,-8,-28,-72,-68,-69,-70,-71,23,23,-66,23,-41,-40,-68,-72,-49,-60,-14,-65,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-42,-43,-48,23,-62,-29,-61,23,-13,]),'$end':([1,2,3,9,10,11,12,21,22,24,25,26,27,28,29,58,93,96,97,127,130,],[0,-1,-3,-9,-10,-11,-12,-63,-64,-2,-4,-5,-6,-7,-8,-66,-60,-14,-65,-61,-13,]),'}':([3,9,10,11,12,21,22,23,24,25,26,27,28,29,58,59,93,96,97,127,130,],[-3,-9,-10,-11,-12,-63,-64,58,-2,-4,-5,-6,-7,-8,-66,97,-60,-14,-65,-61,-13,]),';':([4,5,6,7,8,15,16,38,39,40,44,45,46,47,48,53,60,77,80,81,82,90,98,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,125,],[25,26,27,28,29,-17,-15,-18,-27,-28,-72,-68,-69,-70,-71,-16,-19,-41,-40,-68,-72,-49,-20,-26,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-42,-43,-48,-29,]),'ELSE':([9,10,11,12,21,22,25,26,27,28,29,58,93,96,97,127,130,],[-9,-10,-11,-12,-63,-64,-4,-5,-6,-7,-8,-66,120,-14,-65,-61,-13,]),'ASSIGN':([13,31,56,99,],[32,32,95,-53,]),'SUBASSIGN':([13,31,99,],[33,33,-53,]),'ADDASSIGN':([13,31,99,],[34,34,-53,]),'DIVASSIGN':([13,31,99,],[35,35,-53,]),'MULTASSIGN':([13,31,99,],[36,36,-53,]),'[':([13,14,17,30,32,33,34,35,36,37,42,43,52,55,61,65,66,67,68,69,70,71,72,73,74,75,76,78,83,84,85,86,87,88,95,100,101,119,128,],[37,52,52,52,-21,-22,-23,-24,-25,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-44,-45,-46,-47,52,52,52,52,52,52,]),'-':([14,17,30,32,33,34,35,36,37,39,40,42,44,45,46,47,48,53,55,60,61,64,65,66,77,78,79,80,81,82,90,94,95,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,122,124,125,128,129,],[43,43,43,-21,-22,-23,-24,-25,43,68,-28,43,-72,-68,-69,-70,-71,68,43,68,43,68,43,43,-41,43,68,-40,-68,-72,-49,68,43,68,43,43,68,68,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-42,-43,-48,68,68,-29,43,68,]),'(':([14,17,18,20,30,32,33,34,35,36,37,41,42,43,49,50,51,52,55,61,65,66,67,68,69,70,71,72,73,74,75,76,78,83,84,85,86,87,88,95,100,101,119,128,],[42,42,55,55,42,-21,-22,-23,-24,-25,42,78,42,42,-73,-74,-75,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-44,-45,-46,-47,42,42,42,42,42,42,]),'INTNUM':([14,17,30,32,33,34,35,36,37,42,43,52,55,61,65,66,67,68,69,70,71,72,73,74,75,76,78,83,84,85,86,87,88,95,100,101,119,128,],[46,46,46,-21,-22,-23,-24,-25,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-44,-45,-46,-47,46,46,46,46,46,46,]),'FLOATNUM':([14,17,30,32,33,34,35,36,37,42,43,52,55,61,65,66,67,68,69,70,71,72,73,74,75,76,78,83,84,85,86,87,88,95,100,101,119,128,],[47,47,47,-21,-22,-23,-24,-25,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-44,-45,-46,-47,47,47,47,47,47,47,]),'STR':([14,17,30,32,33,34,35,36,37,42,43,52,55,61,65,66,67,68,69,70,71,72,73,74,75,76,78,83,84,85,86,87,88,95,100,101,119,128,],[48,48,48,-21,-22,-23,-24,-25,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-44,-45,-46,-47,48,48,48,48,48,48,]),'EYE':([14,17,30,32,33,34,35,36,37,42,55,61,65,66,78,95,100,101,128,],[49,49,49,-21,-22,-23,-24,-25,49,49,49,49,49,49,49,49,49,49,49,]),'ONES':([14,17,30,32,33,34,35,36,37,42,55,61,65,66,78,95,100,101,128,],[50,50,50,-21,-22,-23,-24,-25,50,50,50,50,50,50,50,50,50,50,50,]),'ZEROS':([14,17,30,32,33,34,35,36,37,42,55,61,65,66,78,95,100,101,128,],[51,51,51,-21,-22,-23,-24,-25,51,51,51,51,51,51,51,51,51,51,51,]),':':([37,40,44,45,46,47,48,64,77,80,81,82,90,100,104,105,106,107,108,109,110,111,112,113,115,116,117,118,122,125,],[65,-28,-72,-68,-69,-70,-71,101,-41,-40,-68,-72,-49,65,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-42,-43,-48,128,-29,]),',':([38,39,40,44,45,46,47,48,62,63,64,77,80,81,82,89,90,91,92,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,123,124,125,126,],[66,-27,-28,-72,-68,-69,-70,-71,100,-55,-59,-41,-40,-68,-72,119,-49,-51,-52,-57,-58,-26,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,66,-67,-42,-43,-48,-54,-56,-29,-50,]),')':([39,40,44,45,46,47,48,77,79,80,81,82,90,94,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,125,],[-27,-28,-72,-68,-69,-70,-71,-41,115,-40,-68,-72,-49,121,-26,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,125,-67,-42,-43,-48,-29,]),'+':([39,40,44,45,46,47,48,53,60,64,77,79,80,81,82,90,94,98,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,122,124,125,129,],[67,-28,-72,-68,-69,-70,-71,67,67,67,-41,67,-40,-68,-72,-49,67,67,67,67,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-42,-43,-48,67,67,-29,67,]),'/':([39,40,44,45,46,47,48,53,60,64,77,79,80,81,82,90,94,98,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,122,124,125,129,],[69,-28,-72,-68,-69,-70,-71,69,69,69,-41,69,-40,-68,-72,-49,69,69,69,69,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-42,-43,-48,69,69,-29,69,]),'*':([39,40,44,45,46,47,48,53,60,64,77,79,80,81,82,90,94,98,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,122,124,125,129,],[70,-28,-72,-68,-69,-70,-71,70,70,70,-41,70,-40,-68,-72,-49,70,70,70,70,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-42,-43,-48,70,70,-29,70,]),'EQL':([39,40,44,45,46,47,48,53,60,64,77,79,80,81,82,90,94,98,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,122,124,125,129,],[71,-28,-72,-68,-69,-70,-71,71,71,71,-41,71,-40,-68,-72,-49,71,71,71,71,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-42,-43,-48,71,71,-29,71,]),'NEQ':([39,40,44,45,46,47,48,53,60,64,77,79,80,81,82,90,94,98,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,122,124,125,129,],[72,-28,-72,-68,-69,-70,-71,72,72,72,-41,72,-40,-68,-72,-49,72,72,72,72,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-42,-43,-48,72,72,-29,72,]),'GT':([39,40,44,45,46,47,48,53,60,64,77,79,80,81,82,90,94,98,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,122,124,125,129,],[73,-28,-72,-68,-69,-70,-71,73,73,73,-41,73,-40,-68,-72,-49,73,73,73,73,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-42,-43,-48,73,73,-29,73,]),'GTE':([39,40,44,45,46,47,48,53,60,64,77,79,80,81,82,90,94,98,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,122,124,125,129,],[74,-28,-72,-68,-69,-70,-71,74,74,74,-41,74,-40,-68,-72,-49,74,74,74,74,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-42,-43,-48,74,74,-29,74,]),'LT':([39,40,44,45,46,47,48,53,60,64,77,79,80,81,82,90,94,98,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,122,124,125,129,],[75,-28,-72,-68,-69,-70,-71,75,75,75,-41,75,-40,-68,-72,-49,75,75,75,75,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-42,-43,-48,75,75,-29,75,]),'LTE':([39,40,44,45,46,47,48,53,60,64,77,79,80,81,82,90,94,98,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,122,124,125,129,],[76,-28,-72,-68,-69,-70,-71,76,76,76,-41,76,-40,-68,-72,-49,76,76,76,76,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-42,-43,-48,76,76,-29,76,]),'TRANSPOSE':([39,40,44,45,46,47,48,53,60,64,77,79,80,81,82,90,94,98,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,122,124,125,129,],[77,-28,-72,-68,-69,-70,-71,77,77,77,-41,77,-40,-68,-72,-49,77,77,77,77,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-42,-43,-48,77,77,-29,77,]),']':([40,44,45,46,47,48,52,62,63,64,77,80,81,82,89,90,91,92,101,102,104,105,106,107,108,109,110,111,112,113,115,116,117,118,123,124,125,126,],[-28,-72,-68,-69,-70,-71,90,99,-55,-59,-41,-40,-68,-72,118,-49,-51,-52,-57,-58,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-67,-42,-43,-48,-54,-56,-29,-50,]),'DOTADD':([44,45,90,118,],[84,84,-49,-48,]),'DOTSUB':([44,45,90,118,],[85,85,-49,-48,]),'DOTMUL':([44,45,90,118,],[86,86,-49,-48,]),'DOTDIV':([44,45,90,118,],[87,87,-49,-48,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'statements':([0,23,],[2,59,]),'statement':([0,2,23,54,57,59,120,129,],[3,24,3,93,96,24,127,130,]),'assignment':([0,2,23,54,57,59,120,129,],[4,4,4,4,4,4,4,4,]),'print':([0,2,23,54,57,59,120,129,],[5,5,5,5,5,5,5,5,]),'continue':([0,2,23,54,57,59,120,129,],[6,6,6,6,6,6,6,6,]),'break':([0,2,23,54,57,59,120,129,],[7,7,7,7,7,7,7,7,]),'return':([0,2,23,54,57,59,120,129,],[8,8,8,8,8,8,8,8,]),'if':([0,2,23,54,57,59,120,129,],[9,9,9,9,9,9,9,9,]),'for':([0,2,23,54,57,59,120,129,],[10,10,10,10,10,10,10,10,]),'while':([0,2,23,54,57,59,120,129,],[11,11,11,11,11,11,11,11,]),'nested_statements':([0,2,23,54,57,59,120,129,],[12,12,12,12,12,12,12,12,]),'nested_empty':([0,2,23,54,57,59,120,129,],[21,21,21,21,21,21,21,21,]),'nested_statements_list':([0,2,23,54,57,59,120,129,],[22,22,22,22,22,22,22,22,]),'assign_symbol':([13,31,],[30,61,]),'slice':([13,],[31,]),'expression_list':([14,78,],[38,114,]),'expression':([14,17,30,37,42,55,61,65,66,78,95,100,101,128,],[39,53,60,64,79,94,98,102,103,39,122,64,124,129,]),'term':([14,17,30,37,42,43,52,55,61,65,66,67,68,69,70,71,72,73,74,75,76,78,83,88,95,100,101,119,128,],[40,40,40,40,40,80,92,40,40,40,40,104,105,106,107,108,109,110,111,112,113,40,116,117,40,40,40,92,40,]),'built_in_function':([14,17,30,37,42,55,61,65,66,78,95,100,101,128,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'vector':([14,17,30,37,42,43,52,55,61,65,66,67,68,69,70,71,72,73,74,75,76,78,83,88,95,100,101,119,128,],[45,45,45,45,45,81,81,45,45,45,45,81,81,81,81,81,81,81,81,81,81,45,81,81,45,45,45,81,45,]),'condition':([18,20,],[54,57,]),'slice_contents':([37,],[62,]),'range':([37,100,],[63,123,]),'dot_operation':([44,45,],[83,88,]),'vector_contents':([52,],[89,]),'vector_element':([52,119,],[91,126,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> statements','start',1,'p_start','Parser.py',36),
  ('statements -> statements statement','statements',2,'p_statements','Parser.py',43),
  ('statements -> statement','statements',1,'p_statements_list_single','Parser.py',51),
  ('statement -> assignment ;','statement',2,'p_statement','Parser.py',58),
  ('statement -> print ;','statement',2,'p_statement','Parser.py',59),
  ('statement -> continue ;','statement',2,'p_statement','Parser.py',60),
  ('statement -> break ;','statement',2,'p_statement','Parser.py',61),
  ('statement -> return ;','statement',2,'p_statement','Parser.py',62),
  ('statement -> if','statement',1,'p_statement','Parser.py',63),
  ('statement -> for','statement',1,'p_statement','Parser.py',64),
  ('statement -> while','statement',1,'p_statement','Parser.py',65),
  ('statement -> nested_statements','statement',1,'p_statement','Parser.py',66),
  ('for -> FOR ID ASSIGN expression : expression statement','for',7,'p_for','Parser.py',73),
  ('while -> WHILE condition statement','while',3,'p_while','Parser.py',80),
  ('break -> BREAK','break',1,'p_break','Parser.py',87),
  ('return -> RETURN expression','return',2,'p_return','Parser.py',94),
  ('continue -> CONTINUE','continue',1,'p_continue','Parser.py',101),
  ('print -> PRINT expression_list','print',2,'p_print','Parser.py',108),
  ('assignment -> ID assign_symbol expression','assignment',3,'p_assignment','Parser.py',131),
  ('assignment -> ID slice assign_symbol expression','assignment',4,'p_slice_assignment','Parser.py',138),
  ('assign_symbol -> ASSIGN','assign_symbol',1,'p_assign','Parser.py',145),
  ('assign_symbol -> SUBASSIGN','assign_symbol',1,'p_assign','Parser.py',146),
  ('assign_symbol -> ADDASSIGN','assign_symbol',1,'p_assign','Parser.py',147),
  ('assign_symbol -> DIVASSIGN','assign_symbol',1,'p_assign','Parser.py',148),
  ('assign_symbol -> MULTASSIGN','assign_symbol',1,'p_assign','Parser.py',149),
  ('expression_list -> expression_list , expression','expression_list',3,'p_expression_list','Parser.py',156),
  ('expression_list -> expression','expression_list',1,'p_expression_list_single','Parser.py',164),
  ('expression -> term','expression',1,'p_expression_term','Parser.py',171),
  ('expression -> built_in_function ( expression_list )','expression',4,'p_expression_function_call','Parser.py',178),
  ('expression -> expression + term','expression',3,'p_expression_binary_ops','Parser.py',185),
  ('expression -> expression - term','expression',3,'p_expression_binary_ops','Parser.py',186),
  ('expression -> expression / term','expression',3,'p_expression_binary_ops','Parser.py',187),
  ('expression -> expression * term','expression',3,'p_expression_binary_ops','Parser.py',188),
  ('expression -> expression EQL term','expression',3,'p_expression_relational_ops','Parser.py',195),
  ('expression -> expression NEQ term','expression',3,'p_expression_relational_ops','Parser.py',196),
  ('expression -> expression GT term','expression',3,'p_expression_relational_ops','Parser.py',197),
  ('expression -> expression GTE term','expression',3,'p_expression_relational_ops','Parser.py',198),
  ('expression -> expression LT term','expression',3,'p_expression_relational_ops','Parser.py',199),
  ('expression -> expression LTE term','expression',3,'p_expression_relational_ops','Parser.py',200),
  ('expression -> - term','expression',2,'p_expression_unary','Parser.py',207),
  ('expression -> expression TRANSPOSE','expression',2,'p_vector_transpose','Parser.py',214),
  ('expression -> ID dot_operation term','expression',3,'p_expression_id_func_call','Parser.py',221),
  ('expression -> vector dot_operation term','expression',3,'p_expression_vector_func_call','Parser.py',229),
  ('dot_operation -> DOTADD','dot_operation',1,'p_dot_operation','Parser.py',236),
  ('dot_operation -> DOTSUB','dot_operation',1,'p_dot_operation','Parser.py',237),
  ('dot_operation -> DOTMUL','dot_operation',1,'p_dot_operation','Parser.py',238),
  ('dot_operation -> DOTDIV','dot_operation',1,'p_dot_operation','Parser.py',239),
  ('vector -> [ vector_contents ]','vector',3,'p_vector','Parser.py',246),
  ('vector -> [ ]','vector',2,'p_vector_empty','Parser.py',253),
  ('vector_contents -> vector_contents , vector_element','vector_contents',3,'p_vector_contents_list','Parser.py',260),
  ('vector_contents -> vector_element','vector_contents',1,'p_vector_contents_single','Parser.py',268),
  ('vector_element -> term','vector_element',1,'p_vector_element','Parser.py',275),
  ('slice -> [ slice_contents ]','slice',3,'p_slice','Parser.py',282),
  ('slice_contents -> slice_contents , range','slice_contents',3,'p_slice_contents','Parser.py',289),
  ('slice_contents -> range','slice_contents',1,'p_slice_contents_single','Parser.py',297),
  ('range -> expression : expression','range',3,'p_range','Parser.py',304),
  ('range -> expression :','range',2,'p_range_startless','Parser.py',311),
  ('range -> : expression','range',2,'p_range_endless','Parser.py',318),
  ('range -> expression','range',1,'p_range_simple','Parser.py',325),
  ('if -> IF condition statement','if',3,'p_if','Parser.py',332),
  ('if -> IF condition statement ELSE statement','if',5,'p_if_else','Parser.py',339),
  ('condition -> ( expression )','condition',3,'p_condition','Parser.py',346),
  ('nested_statements -> nested_empty','nested_statements',1,'p_nested_statements','Parser.py',361),
  ('nested_statements -> nested_statements_list','nested_statements',1,'p_nested_statements','Parser.py',362),
  ('nested_statements_list -> { statements }','nested_statements_list',3,'p_nested_statements_list','Parser.py',369),
  ('nested_empty -> { }','nested_empty',2,'p_nested_statements_empty','Parser.py',380),
  ('term -> ( expression )','term',3,'p_term','Parser.py',387),
  ('term -> vector','term',1,'p_term_vector','Parser.py',394),
  ('term -> INTNUM','term',1,'p_term_primitive_int','Parser.py',401),
  ('term -> FLOATNUM','term',1,'p_term_primitive_float','Parser.py',408),
  ('term -> STR','term',1,'p_term_primitive_str','Parser.py',415),
  ('term -> ID','term',1,'p_term_id','Parser.py',422),
  ('built_in_function -> EYE','built_in_function',1,'p_built_in_function','Parser.py',429),
  ('built_in_function -> ONES','built_in_function',1,'p_built_in_function','Parser.py',430),
  ('built_in_function -> ZEROS','built_in_function',1,'p_built_in_function','Parser.py',431),
]
