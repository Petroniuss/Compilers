Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> assignment ;
Rule 5     statement -> print ;
Rule 6     statement -> continue ;
Rule 7     statement -> break ;
Rule 8     statement -> return ;
Rule 9     statement -> if
Rule 10    statement -> for
Rule 11    statement -> while
Rule 12    statement -> nested_statements
Rule 13    for -> FOR ID ASSIGN expression : expression nested
Rule 14    while -> WHILE condition nested
Rule 15    break -> BREAK
Rule 16    return -> RETURN expression
Rule 17    continue -> CONTINUE
Rule 18    print -> PRINT coma_separated
Rule 19    coma_separated -> coma_separated , expression
Rule 20    coma_separated -> expression
Rule 21    assignment -> ID assign_symbol expression
Rule 22    assignment -> ID slice assign_symbol expression
Rule 23    assign_symbol -> ASSIGN
Rule 24    assign_symbol -> SUBASSIGN
Rule 25    assign_symbol -> ADDASSIGN
Rule 26    assign_symbol -> DIVASSIGN
Rule 27    assign_symbol -> MULTASSIGN
Rule 28    expression -> built_in_function ( expression_list )
Rule 29    expression_list -> expression_list , expression
Rule 30    expression_list -> expression
Rule 31    expression -> term
Rule 32    expression -> expression + term
Rule 33    expression -> expression - term
Rule 34    expression -> expression / term
Rule 35    expression -> expression * term
Rule 36    expression -> expression EQL term
Rule 37    expression -> expression NEQ term
Rule 38    expression -> expression GT term
Rule 39    expression -> expression GTE term
Rule 40    expression -> expression LT term
Rule 41    expression -> expression LTE term
Rule 42    expression -> - term
Rule 43    expression -> expression TRANSPOSE
Rule 44    expression -> ID dot_operation term
Rule 45    expression -> vector dot_operation term
Rule 46    dot_operation -> DOTADD
Rule 47    dot_operation -> DOTSUB
Rule 48    dot_operation -> DOTMUL
Rule 49    dot_operation -> DOTDIV
Rule 50    vector -> [ vector_contents ]
Rule 51    vector -> [ ]
Rule 52    vector_contents -> vector_contents , vector_element
Rule 53    vector_contents -> vector_element
Rule 54    vector_element -> term
Rule 55    slice -> [ slice_contents ]
Rule 56    slice_contents -> slice_contents , range
Rule 57    slice_contents -> range
Rule 58    range -> expression : expression
Rule 59    range -> expression :
Rule 60    range -> : expression
Rule 61    range -> expression
Rule 62    if -> IF condition nested
Rule 63    if -> IF condition nested ELSE nested
Rule 64    condition -> ( expression )
Rule 65    nested -> statement
Rule 66    nested_statements -> nested_empty
Rule 67    nested_statements -> nested_statements_list
Rule 68    nested_statements_list -> { statements }
Rule 69    nested_empty -> { }
Rule 70    term -> ( expression )
Rule 71    term -> vector
Rule 72    term -> INTNUM
Rule 73    term -> FLOATNUM
Rule 74    term -> STR
Rule 75    term -> ID
Rule 76    built_in_function -> EYE
Rule 77    built_in_function -> ONES
Rule 78    built_in_function -> ZEROS

Terminals, with rules where they appear

(                    : 28 64 70
)                    : 28 64 70
*                    : 35
+                    : 32
,                    : 19 29 52 56
-                    : 33 42
/                    : 34
:                    : 13 58 59 60
;                    : 4 5 6 7 8
ADDASSIGN            : 25
ASSIGN               : 13 23
BREAK                : 15
CONTINUE             : 17
DIVASSIGN            : 26
DOTADD               : 46
DOTDIV               : 49
DOTMUL               : 48
DOTSUB               : 47
ELSE                 : 63
EQL                  : 36
EYE                  : 76
FLOATNUM             : 73
FOR                  : 13
GT                   : 38
GTE                  : 39
ID                   : 13 21 22 44 75
IF                   : 62 63
INTNUM               : 72
LT                   : 40
LTE                  : 41
MULTASSIGN           : 27
NEQ                  : 37
ONES                 : 77
PRINT                : 18
RETURN               : 16
STR                  : 74
SUBASSIGN            : 24
TRANSPOSE            : 43
WHILE                : 14
ZEROS                : 78
[                    : 50 51 55
]                    : 50 51 55
error                : 
{                    : 68 69
}                    : 68 69

Nonterminals, with rules where they appear

assign_symbol        : 21 22
assignment           : 4
break                : 7
built_in_function    : 28
coma_separated       : 18 19
condition            : 14 62 63
continue             : 6
dot_operation        : 44 45
expression           : 13 13 16 19 20 21 22 29 30 32 33 34 35 36 37 38 39 40 41 43 58 58 59 60 61 64 70
expression_list      : 28 29
for                  : 10
if                   : 9
nested               : 13 14 62 63 63
nested_empty         : 66
nested_statements    : 12
nested_statements_list : 67
print                : 5
range                : 56 57
return               : 8
slice                : 22
slice_contents       : 55 56
start                : 0
statement            : 2 3 65
statements           : 1 2 68
term                 : 31 32 33 34 35 36 37 38 39 40 41 42 44 45 54
vector               : 45 71
vector_contents      : 50 52
vector_element       : 52 53
while                : 11

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if
    (10) statement -> . for
    (11) statement -> . while
    (12) statement -> . nested_statements
    (21) assignment -> . ID assign_symbol expression
    (22) assignment -> . ID slice assign_symbol expression
    (18) print -> . PRINT coma_separated
    (17) continue -> . CONTINUE
    (15) break -> . BREAK
    (16) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (13) for -> . FOR ID ASSIGN expression : expression nested
    (14) while -> . WHILE condition nested
    (66) nested_statements -> . nested_empty
    (67) nested_statements -> . nested_statements_list
    (69) nested_empty -> . { }
    (68) nested_statements_list -> . { statements }

    ID              shift and go to state 13
    PRINT           shift and go to state 14
    CONTINUE        shift and go to state 15
    BREAK           shift and go to state 16
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 20
    {               shift and go to state 23

    start                          shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if                             shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    nested_statements              shift and go to state 12
    nested_empty                   shift and go to state 21
    nested_statements_list         shift and go to state 22

state 1

    (0) S' -> start .



state 2

    (1) start -> statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if
    (10) statement -> . for
    (11) statement -> . while
    (12) statement -> . nested_statements
    (21) assignment -> . ID assign_symbol expression
    (22) assignment -> . ID slice assign_symbol expression
    (18) print -> . PRINT coma_separated
    (17) continue -> . CONTINUE
    (15) break -> . BREAK
    (16) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (13) for -> . FOR ID ASSIGN expression : expression nested
    (14) while -> . WHILE condition nested
    (66) nested_statements -> . nested_empty
    (67) nested_statements -> . nested_statements_list
    (69) nested_empty -> . { }
    (68) nested_statements_list -> . { statements }

    $end            reduce using rule 1 (start -> statements .)
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    CONTINUE        shift and go to state 15
    BREAK           shift and go to state 16
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 20
    {               shift and go to state 23

    statement                      shift and go to state 24
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if                             shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    nested_statements              shift and go to state 12
    nested_empty                   shift and go to state 21
    nested_statements_list         shift and go to state 22

state 3

    (3) statements -> statement .

    ID              reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    CONTINUE        reduce using rule 3 (statements -> statement .)
    BREAK           reduce using rule 3 (statements -> statement .)
    RETURN          reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    FOR             reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    {               reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    }               reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> assignment . ;

    ;               shift and go to state 25


state 5

    (5) statement -> print . ;

    ;               shift and go to state 26


state 6

    (6) statement -> continue . ;

    ;               shift and go to state 27


state 7

    (7) statement -> break . ;

    ;               shift and go to state 28


state 8

    (8) statement -> return . ;

    ;               shift and go to state 29


state 9

    (9) statement -> if .

    ID              reduce using rule 9 (statement -> if .)
    PRINT           reduce using rule 9 (statement -> if .)
    CONTINUE        reduce using rule 9 (statement -> if .)
    BREAK           reduce using rule 9 (statement -> if .)
    RETURN          reduce using rule 9 (statement -> if .)
    IF              reduce using rule 9 (statement -> if .)
    FOR             reduce using rule 9 (statement -> if .)
    WHILE           reduce using rule 9 (statement -> if .)
    {               reduce using rule 9 (statement -> if .)
    $end            reduce using rule 9 (statement -> if .)
    }               reduce using rule 9 (statement -> if .)
    ELSE            reduce using rule 9 (statement -> if .)


state 10

    (10) statement -> for .

    ID              reduce using rule 10 (statement -> for .)
    PRINT           reduce using rule 10 (statement -> for .)
    CONTINUE        reduce using rule 10 (statement -> for .)
    BREAK           reduce using rule 10 (statement -> for .)
    RETURN          reduce using rule 10 (statement -> for .)
    IF              reduce using rule 10 (statement -> for .)
    FOR             reduce using rule 10 (statement -> for .)
    WHILE           reduce using rule 10 (statement -> for .)
    {               reduce using rule 10 (statement -> for .)
    $end            reduce using rule 10 (statement -> for .)
    }               reduce using rule 10 (statement -> for .)
    ELSE            reduce using rule 10 (statement -> for .)


state 11

    (11) statement -> while .

    ID              reduce using rule 11 (statement -> while .)
    PRINT           reduce using rule 11 (statement -> while .)
    CONTINUE        reduce using rule 11 (statement -> while .)
    BREAK           reduce using rule 11 (statement -> while .)
    RETURN          reduce using rule 11 (statement -> while .)
    IF              reduce using rule 11 (statement -> while .)
    FOR             reduce using rule 11 (statement -> while .)
    WHILE           reduce using rule 11 (statement -> while .)
    {               reduce using rule 11 (statement -> while .)
    $end            reduce using rule 11 (statement -> while .)
    }               reduce using rule 11 (statement -> while .)
    ELSE            reduce using rule 11 (statement -> while .)


state 12

    (12) statement -> nested_statements .

    ID              reduce using rule 12 (statement -> nested_statements .)
    PRINT           reduce using rule 12 (statement -> nested_statements .)
    CONTINUE        reduce using rule 12 (statement -> nested_statements .)
    BREAK           reduce using rule 12 (statement -> nested_statements .)
    RETURN          reduce using rule 12 (statement -> nested_statements .)
    IF              reduce using rule 12 (statement -> nested_statements .)
    FOR             reduce using rule 12 (statement -> nested_statements .)
    WHILE           reduce using rule 12 (statement -> nested_statements .)
    {               reduce using rule 12 (statement -> nested_statements .)
    $end            reduce using rule 12 (statement -> nested_statements .)
    }               reduce using rule 12 (statement -> nested_statements .)
    ELSE            reduce using rule 12 (statement -> nested_statements .)


state 13

    (21) assignment -> ID . assign_symbol expression
    (22) assignment -> ID . slice assign_symbol expression
    (23) assign_symbol -> . ASSIGN
    (24) assign_symbol -> . SUBASSIGN
    (25) assign_symbol -> . ADDASSIGN
    (26) assign_symbol -> . DIVASSIGN
    (27) assign_symbol -> . MULTASSIGN
    (55) slice -> . [ slice_contents ]

    ASSIGN          shift and go to state 32
    SUBASSIGN       shift and go to state 33
    ADDASSIGN       shift and go to state 34
    DIVASSIGN       shift and go to state 35
    MULTASSIGN      shift and go to state 36
    [               shift and go to state 37

    assign_symbol                  shift and go to state 30
    slice                          shift and go to state 31

state 14

    (18) print -> PRINT . coma_separated
    (19) coma_separated -> . coma_separated , expression
    (20) coma_separated -> . expression
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (76) built_in_function -> . EYE
    (77) built_in_function -> . ONES
    (78) built_in_function -> . ZEROS
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 43
    ID              shift and go to state 44
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48
    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    [               shift and go to state 52

    coma_separated                 shift and go to state 38
    expression                     shift and go to state 39
    built_in_function              shift and go to state 40
    term                           shift and go to state 42
    vector                         shift and go to state 45

state 15

    (17) continue -> CONTINUE .

    ;               reduce using rule 17 (continue -> CONTINUE .)


state 16

    (15) break -> BREAK .

    ;               reduce using rule 15 (break -> BREAK .)


state 17

    (16) return -> RETURN . expression
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (76) built_in_function -> . EYE
    (77) built_in_function -> . ONES
    (78) built_in_function -> . ZEROS
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 43
    ID              shift and go to state 44
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48
    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    [               shift and go to state 52

    expression                     shift and go to state 53
    built_in_function              shift and go to state 40
    term                           shift and go to state 42
    vector                         shift and go to state 45

state 18

    (62) if -> IF . condition nested
    (63) if -> IF . condition nested ELSE nested
    (64) condition -> . ( expression )

    (               shift and go to state 55

    condition                      shift and go to state 54

state 19

    (13) for -> FOR . ID ASSIGN expression : expression nested

    ID              shift and go to state 56


state 20

    (14) while -> WHILE . condition nested
    (64) condition -> . ( expression )

    (               shift and go to state 55

    condition                      shift and go to state 57

state 21

    (66) nested_statements -> nested_empty .

    ID              reduce using rule 66 (nested_statements -> nested_empty .)
    PRINT           reduce using rule 66 (nested_statements -> nested_empty .)
    CONTINUE        reduce using rule 66 (nested_statements -> nested_empty .)
    BREAK           reduce using rule 66 (nested_statements -> nested_empty .)
    RETURN          reduce using rule 66 (nested_statements -> nested_empty .)
    IF              reduce using rule 66 (nested_statements -> nested_empty .)
    FOR             reduce using rule 66 (nested_statements -> nested_empty .)
    WHILE           reduce using rule 66 (nested_statements -> nested_empty .)
    {               reduce using rule 66 (nested_statements -> nested_empty .)
    $end            reduce using rule 66 (nested_statements -> nested_empty .)
    }               reduce using rule 66 (nested_statements -> nested_empty .)
    ELSE            reduce using rule 66 (nested_statements -> nested_empty .)


state 22

    (67) nested_statements -> nested_statements_list .

    ID              reduce using rule 67 (nested_statements -> nested_statements_list .)
    PRINT           reduce using rule 67 (nested_statements -> nested_statements_list .)
    CONTINUE        reduce using rule 67 (nested_statements -> nested_statements_list .)
    BREAK           reduce using rule 67 (nested_statements -> nested_statements_list .)
    RETURN          reduce using rule 67 (nested_statements -> nested_statements_list .)
    IF              reduce using rule 67 (nested_statements -> nested_statements_list .)
    FOR             reduce using rule 67 (nested_statements -> nested_statements_list .)
    WHILE           reduce using rule 67 (nested_statements -> nested_statements_list .)
    {               reduce using rule 67 (nested_statements -> nested_statements_list .)
    $end            reduce using rule 67 (nested_statements -> nested_statements_list .)
    }               reduce using rule 67 (nested_statements -> nested_statements_list .)
    ELSE            reduce using rule 67 (nested_statements -> nested_statements_list .)


state 23

    (69) nested_empty -> { . }
    (68) nested_statements_list -> { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if
    (10) statement -> . for
    (11) statement -> . while
    (12) statement -> . nested_statements
    (21) assignment -> . ID assign_symbol expression
    (22) assignment -> . ID slice assign_symbol expression
    (18) print -> . PRINT coma_separated
    (17) continue -> . CONTINUE
    (15) break -> . BREAK
    (16) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (13) for -> . FOR ID ASSIGN expression : expression nested
    (14) while -> . WHILE condition nested
    (66) nested_statements -> . nested_empty
    (67) nested_statements -> . nested_statements_list
    (69) nested_empty -> . { }
    (68) nested_statements_list -> . { statements }

    }               shift and go to state 58
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    CONTINUE        shift and go to state 15
    BREAK           shift and go to state 16
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 20
    {               shift and go to state 23

    statements                     shift and go to state 59
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if                             shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    nested_statements              shift and go to state 12
    nested_empty                   shift and go to state 21
    nested_statements_list         shift and go to state 22

state 24

    (2) statements -> statements statement .

    ID              reduce using rule 2 (statements -> statements statement .)
    PRINT           reduce using rule 2 (statements -> statements statement .)
    CONTINUE        reduce using rule 2 (statements -> statements statement .)
    BREAK           reduce using rule 2 (statements -> statements statement .)
    RETURN          reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    FOR             reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    {               reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    }               reduce using rule 2 (statements -> statements statement .)


state 25

    (4) statement -> assignment ; .

    ID              reduce using rule 4 (statement -> assignment ; .)
    PRINT           reduce using rule 4 (statement -> assignment ; .)
    CONTINUE        reduce using rule 4 (statement -> assignment ; .)
    BREAK           reduce using rule 4 (statement -> assignment ; .)
    RETURN          reduce using rule 4 (statement -> assignment ; .)
    IF              reduce using rule 4 (statement -> assignment ; .)
    FOR             reduce using rule 4 (statement -> assignment ; .)
    WHILE           reduce using rule 4 (statement -> assignment ; .)
    {               reduce using rule 4 (statement -> assignment ; .)
    $end            reduce using rule 4 (statement -> assignment ; .)
    }               reduce using rule 4 (statement -> assignment ; .)
    ELSE            reduce using rule 4 (statement -> assignment ; .)


state 26

    (5) statement -> print ; .

    ID              reduce using rule 5 (statement -> print ; .)
    PRINT           reduce using rule 5 (statement -> print ; .)
    CONTINUE        reduce using rule 5 (statement -> print ; .)
    BREAK           reduce using rule 5 (statement -> print ; .)
    RETURN          reduce using rule 5 (statement -> print ; .)
    IF              reduce using rule 5 (statement -> print ; .)
    FOR             reduce using rule 5 (statement -> print ; .)
    WHILE           reduce using rule 5 (statement -> print ; .)
    {               reduce using rule 5 (statement -> print ; .)
    $end            reduce using rule 5 (statement -> print ; .)
    }               reduce using rule 5 (statement -> print ; .)
    ELSE            reduce using rule 5 (statement -> print ; .)


state 27

    (6) statement -> continue ; .

    ID              reduce using rule 6 (statement -> continue ; .)
    PRINT           reduce using rule 6 (statement -> continue ; .)
    CONTINUE        reduce using rule 6 (statement -> continue ; .)
    BREAK           reduce using rule 6 (statement -> continue ; .)
    RETURN          reduce using rule 6 (statement -> continue ; .)
    IF              reduce using rule 6 (statement -> continue ; .)
    FOR             reduce using rule 6 (statement -> continue ; .)
    WHILE           reduce using rule 6 (statement -> continue ; .)
    {               reduce using rule 6 (statement -> continue ; .)
    $end            reduce using rule 6 (statement -> continue ; .)
    }               reduce using rule 6 (statement -> continue ; .)
    ELSE            reduce using rule 6 (statement -> continue ; .)


state 28

    (7) statement -> break ; .

    ID              reduce using rule 7 (statement -> break ; .)
    PRINT           reduce using rule 7 (statement -> break ; .)
    CONTINUE        reduce using rule 7 (statement -> break ; .)
    BREAK           reduce using rule 7 (statement -> break ; .)
    RETURN          reduce using rule 7 (statement -> break ; .)
    IF              reduce using rule 7 (statement -> break ; .)
    FOR             reduce using rule 7 (statement -> break ; .)
    WHILE           reduce using rule 7 (statement -> break ; .)
    {               reduce using rule 7 (statement -> break ; .)
    $end            reduce using rule 7 (statement -> break ; .)
    }               reduce using rule 7 (statement -> break ; .)
    ELSE            reduce using rule 7 (statement -> break ; .)


state 29

    (8) statement -> return ; .

    ID              reduce using rule 8 (statement -> return ; .)
    PRINT           reduce using rule 8 (statement -> return ; .)
    CONTINUE        reduce using rule 8 (statement -> return ; .)
    BREAK           reduce using rule 8 (statement -> return ; .)
    RETURN          reduce using rule 8 (statement -> return ; .)
    IF              reduce using rule 8 (statement -> return ; .)
    FOR             reduce using rule 8 (statement -> return ; .)
    WHILE           reduce using rule 8 (statement -> return ; .)
    {               reduce using rule 8 (statement -> return ; .)
    $end            reduce using rule 8 (statement -> return ; .)
    }               reduce using rule 8 (statement -> return ; .)
    ELSE            reduce using rule 8 (statement -> return ; .)


state 30

    (21) assignment -> ID assign_symbol . expression
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (76) built_in_function -> . EYE
    (77) built_in_function -> . ONES
    (78) built_in_function -> . ZEROS
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 43
    ID              shift and go to state 44
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48
    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    [               shift and go to state 52

    expression                     shift and go to state 60
    built_in_function              shift and go to state 40
    term                           shift and go to state 42
    vector                         shift and go to state 45

state 31

    (22) assignment -> ID slice . assign_symbol expression
    (23) assign_symbol -> . ASSIGN
    (24) assign_symbol -> . SUBASSIGN
    (25) assign_symbol -> . ADDASSIGN
    (26) assign_symbol -> . DIVASSIGN
    (27) assign_symbol -> . MULTASSIGN

    ASSIGN          shift and go to state 32
    SUBASSIGN       shift and go to state 33
    ADDASSIGN       shift and go to state 34
    DIVASSIGN       shift and go to state 35
    MULTASSIGN      shift and go to state 36

    assign_symbol                  shift and go to state 61

state 32

    (23) assign_symbol -> ASSIGN .

    -               reduce using rule 23 (assign_symbol -> ASSIGN .)
    ID              reduce using rule 23 (assign_symbol -> ASSIGN .)
    EYE             reduce using rule 23 (assign_symbol -> ASSIGN .)
    ONES            reduce using rule 23 (assign_symbol -> ASSIGN .)
    ZEROS           reduce using rule 23 (assign_symbol -> ASSIGN .)
    (               reduce using rule 23 (assign_symbol -> ASSIGN .)
    INTNUM          reduce using rule 23 (assign_symbol -> ASSIGN .)
    FLOATNUM        reduce using rule 23 (assign_symbol -> ASSIGN .)
    STR             reduce using rule 23 (assign_symbol -> ASSIGN .)
    [               reduce using rule 23 (assign_symbol -> ASSIGN .)


state 33

    (24) assign_symbol -> SUBASSIGN .

    -               reduce using rule 24 (assign_symbol -> SUBASSIGN .)
    ID              reduce using rule 24 (assign_symbol -> SUBASSIGN .)
    EYE             reduce using rule 24 (assign_symbol -> SUBASSIGN .)
    ONES            reduce using rule 24 (assign_symbol -> SUBASSIGN .)
    ZEROS           reduce using rule 24 (assign_symbol -> SUBASSIGN .)
    (               reduce using rule 24 (assign_symbol -> SUBASSIGN .)
    INTNUM          reduce using rule 24 (assign_symbol -> SUBASSIGN .)
    FLOATNUM        reduce using rule 24 (assign_symbol -> SUBASSIGN .)
    STR             reduce using rule 24 (assign_symbol -> SUBASSIGN .)
    [               reduce using rule 24 (assign_symbol -> SUBASSIGN .)


state 34

    (25) assign_symbol -> ADDASSIGN .

    -               reduce using rule 25 (assign_symbol -> ADDASSIGN .)
    ID              reduce using rule 25 (assign_symbol -> ADDASSIGN .)
    EYE             reduce using rule 25 (assign_symbol -> ADDASSIGN .)
    ONES            reduce using rule 25 (assign_symbol -> ADDASSIGN .)
    ZEROS           reduce using rule 25 (assign_symbol -> ADDASSIGN .)
    (               reduce using rule 25 (assign_symbol -> ADDASSIGN .)
    INTNUM          reduce using rule 25 (assign_symbol -> ADDASSIGN .)
    FLOATNUM        reduce using rule 25 (assign_symbol -> ADDASSIGN .)
    STR             reduce using rule 25 (assign_symbol -> ADDASSIGN .)
    [               reduce using rule 25 (assign_symbol -> ADDASSIGN .)


state 35

    (26) assign_symbol -> DIVASSIGN .

    -               reduce using rule 26 (assign_symbol -> DIVASSIGN .)
    ID              reduce using rule 26 (assign_symbol -> DIVASSIGN .)
    EYE             reduce using rule 26 (assign_symbol -> DIVASSIGN .)
    ONES            reduce using rule 26 (assign_symbol -> DIVASSIGN .)
    ZEROS           reduce using rule 26 (assign_symbol -> DIVASSIGN .)
    (               reduce using rule 26 (assign_symbol -> DIVASSIGN .)
    INTNUM          reduce using rule 26 (assign_symbol -> DIVASSIGN .)
    FLOATNUM        reduce using rule 26 (assign_symbol -> DIVASSIGN .)
    STR             reduce using rule 26 (assign_symbol -> DIVASSIGN .)
    [               reduce using rule 26 (assign_symbol -> DIVASSIGN .)


state 36

    (27) assign_symbol -> MULTASSIGN .

    -               reduce using rule 27 (assign_symbol -> MULTASSIGN .)
    ID              reduce using rule 27 (assign_symbol -> MULTASSIGN .)
    EYE             reduce using rule 27 (assign_symbol -> MULTASSIGN .)
    ONES            reduce using rule 27 (assign_symbol -> MULTASSIGN .)
    ZEROS           reduce using rule 27 (assign_symbol -> MULTASSIGN .)
    (               reduce using rule 27 (assign_symbol -> MULTASSIGN .)
    INTNUM          reduce using rule 27 (assign_symbol -> MULTASSIGN .)
    FLOATNUM        reduce using rule 27 (assign_symbol -> MULTASSIGN .)
    STR             reduce using rule 27 (assign_symbol -> MULTASSIGN .)
    [               reduce using rule 27 (assign_symbol -> MULTASSIGN .)


state 37

    (55) slice -> [ . slice_contents ]
    (56) slice_contents -> . slice_contents , range
    (57) slice_contents -> . range
    (58) range -> . expression : expression
    (59) range -> . expression :
    (60) range -> . : expression
    (61) range -> . expression
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (76) built_in_function -> . EYE
    (77) built_in_function -> . ONES
    (78) built_in_function -> . ZEROS
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    :               shift and go to state 65
    -               shift and go to state 43
    ID              shift and go to state 44
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48
    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    [               shift and go to state 52

    slice_contents                 shift and go to state 62
    range                          shift and go to state 63
    expression                     shift and go to state 64
    built_in_function              shift and go to state 40
    term                           shift and go to state 42
    vector                         shift and go to state 45

state 38

    (18) print -> PRINT coma_separated .
    (19) coma_separated -> coma_separated . , expression

    ;               reduce using rule 18 (print -> PRINT coma_separated .)
    ,               shift and go to state 66


state 39

    (20) coma_separated -> expression .
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    ,               reduce using rule 20 (coma_separated -> expression .)
    ;               reduce using rule 20 (coma_separated -> expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    EQL             shift and go to state 71
    NEQ             shift and go to state 72
    GT              shift and go to state 73
    GTE             shift and go to state 74
    LT              shift and go to state 75
    LTE             shift and go to state 76
    TRANSPOSE       shift and go to state 77


state 40

    (28) expression -> built_in_function . ( expression_list )

    (               shift and go to state 78


state 41

    (70) term -> ( . expression )
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (76) built_in_function -> . EYE
    (77) built_in_function -> . ONES
    (78) built_in_function -> . ZEROS
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 43
    ID              shift and go to state 44
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48
    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    [               shift and go to state 52

    expression                     shift and go to state 79
    built_in_function              shift and go to state 40
    term                           shift and go to state 42
    vector                         shift and go to state 45

state 42

    (31) expression -> term .

    +               reduce using rule 31 (expression -> term .)
    -               reduce using rule 31 (expression -> term .)
    /               reduce using rule 31 (expression -> term .)
    *               reduce using rule 31 (expression -> term .)
    EQL             reduce using rule 31 (expression -> term .)
    NEQ             reduce using rule 31 (expression -> term .)
    GT              reduce using rule 31 (expression -> term .)
    GTE             reduce using rule 31 (expression -> term .)
    LT              reduce using rule 31 (expression -> term .)
    LTE             reduce using rule 31 (expression -> term .)
    TRANSPOSE       reduce using rule 31 (expression -> term .)
    ,               reduce using rule 31 (expression -> term .)
    ;               reduce using rule 31 (expression -> term .)
    :               reduce using rule 31 (expression -> term .)
    ]               reduce using rule 31 (expression -> term .)
    )               reduce using rule 31 (expression -> term .)
    ID              reduce using rule 31 (expression -> term .)
    PRINT           reduce using rule 31 (expression -> term .)
    CONTINUE        reduce using rule 31 (expression -> term .)
    BREAK           reduce using rule 31 (expression -> term .)
    RETURN          reduce using rule 31 (expression -> term .)
    IF              reduce using rule 31 (expression -> term .)
    FOR             reduce using rule 31 (expression -> term .)
    WHILE           reduce using rule 31 (expression -> term .)
    {               reduce using rule 31 (expression -> term .)


state 43

    (42) expression -> - . term
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    ID              shift and go to state 82
    [               shift and go to state 52

    term                           shift and go to state 80
    vector                         shift and go to state 81

state 44

    (44) expression -> ID . dot_operation term
    (75) term -> ID .
    (46) dot_operation -> . DOTADD
    (47) dot_operation -> . DOTSUB
    (48) dot_operation -> . DOTMUL
    (49) dot_operation -> . DOTDIV

    +               reduce using rule 75 (term -> ID .)
    -               reduce using rule 75 (term -> ID .)
    /               reduce using rule 75 (term -> ID .)
    *               reduce using rule 75 (term -> ID .)
    EQL             reduce using rule 75 (term -> ID .)
    NEQ             reduce using rule 75 (term -> ID .)
    GT              reduce using rule 75 (term -> ID .)
    GTE             reduce using rule 75 (term -> ID .)
    LT              reduce using rule 75 (term -> ID .)
    LTE             reduce using rule 75 (term -> ID .)
    TRANSPOSE       reduce using rule 75 (term -> ID .)
    ,               reduce using rule 75 (term -> ID .)
    ;               reduce using rule 75 (term -> ID .)
    :               reduce using rule 75 (term -> ID .)
    ]               reduce using rule 75 (term -> ID .)
    )               reduce using rule 75 (term -> ID .)
    ID              reduce using rule 75 (term -> ID .)
    PRINT           reduce using rule 75 (term -> ID .)
    CONTINUE        reduce using rule 75 (term -> ID .)
    BREAK           reduce using rule 75 (term -> ID .)
    RETURN          reduce using rule 75 (term -> ID .)
    IF              reduce using rule 75 (term -> ID .)
    FOR             reduce using rule 75 (term -> ID .)
    WHILE           reduce using rule 75 (term -> ID .)
    {               reduce using rule 75 (term -> ID .)
    DOTADD          shift and go to state 84
    DOTSUB          shift and go to state 85
    DOTMUL          shift and go to state 86
    DOTDIV          shift and go to state 87

    dot_operation                  shift and go to state 83

state 45

    (45) expression -> vector . dot_operation term
    (71) term -> vector .
    (46) dot_operation -> . DOTADD
    (47) dot_operation -> . DOTSUB
    (48) dot_operation -> . DOTMUL
    (49) dot_operation -> . DOTDIV

    +               reduce using rule 71 (term -> vector .)
    -               reduce using rule 71 (term -> vector .)
    /               reduce using rule 71 (term -> vector .)
    *               reduce using rule 71 (term -> vector .)
    EQL             reduce using rule 71 (term -> vector .)
    NEQ             reduce using rule 71 (term -> vector .)
    GT              reduce using rule 71 (term -> vector .)
    GTE             reduce using rule 71 (term -> vector .)
    LT              reduce using rule 71 (term -> vector .)
    LTE             reduce using rule 71 (term -> vector .)
    TRANSPOSE       reduce using rule 71 (term -> vector .)
    ,               reduce using rule 71 (term -> vector .)
    ;               reduce using rule 71 (term -> vector .)
    :               reduce using rule 71 (term -> vector .)
    ]               reduce using rule 71 (term -> vector .)
    )               reduce using rule 71 (term -> vector .)
    ID              reduce using rule 71 (term -> vector .)
    PRINT           reduce using rule 71 (term -> vector .)
    CONTINUE        reduce using rule 71 (term -> vector .)
    BREAK           reduce using rule 71 (term -> vector .)
    RETURN          reduce using rule 71 (term -> vector .)
    IF              reduce using rule 71 (term -> vector .)
    FOR             reduce using rule 71 (term -> vector .)
    WHILE           reduce using rule 71 (term -> vector .)
    {               reduce using rule 71 (term -> vector .)
    DOTADD          shift and go to state 84
    DOTSUB          shift and go to state 85
    DOTMUL          shift and go to state 86
    DOTDIV          shift and go to state 87

    dot_operation                  shift and go to state 88

state 46

    (76) built_in_function -> EYE .

    (               reduce using rule 76 (built_in_function -> EYE .)


state 47

    (77) built_in_function -> ONES .

    (               reduce using rule 77 (built_in_function -> ONES .)


state 48

    (78) built_in_function -> ZEROS .

    (               reduce using rule 78 (built_in_function -> ZEROS .)


state 49

    (72) term -> INTNUM .

    +               reduce using rule 72 (term -> INTNUM .)
    -               reduce using rule 72 (term -> INTNUM .)
    /               reduce using rule 72 (term -> INTNUM .)
    *               reduce using rule 72 (term -> INTNUM .)
    EQL             reduce using rule 72 (term -> INTNUM .)
    NEQ             reduce using rule 72 (term -> INTNUM .)
    GT              reduce using rule 72 (term -> INTNUM .)
    GTE             reduce using rule 72 (term -> INTNUM .)
    LT              reduce using rule 72 (term -> INTNUM .)
    LTE             reduce using rule 72 (term -> INTNUM .)
    TRANSPOSE       reduce using rule 72 (term -> INTNUM .)
    ,               reduce using rule 72 (term -> INTNUM .)
    ;               reduce using rule 72 (term -> INTNUM .)
    :               reduce using rule 72 (term -> INTNUM .)
    ]               reduce using rule 72 (term -> INTNUM .)
    )               reduce using rule 72 (term -> INTNUM .)
    ID              reduce using rule 72 (term -> INTNUM .)
    PRINT           reduce using rule 72 (term -> INTNUM .)
    CONTINUE        reduce using rule 72 (term -> INTNUM .)
    BREAK           reduce using rule 72 (term -> INTNUM .)
    RETURN          reduce using rule 72 (term -> INTNUM .)
    IF              reduce using rule 72 (term -> INTNUM .)
    FOR             reduce using rule 72 (term -> INTNUM .)
    WHILE           reduce using rule 72 (term -> INTNUM .)
    {               reduce using rule 72 (term -> INTNUM .)


state 50

    (73) term -> FLOATNUM .

    +               reduce using rule 73 (term -> FLOATNUM .)
    -               reduce using rule 73 (term -> FLOATNUM .)
    /               reduce using rule 73 (term -> FLOATNUM .)
    *               reduce using rule 73 (term -> FLOATNUM .)
    EQL             reduce using rule 73 (term -> FLOATNUM .)
    NEQ             reduce using rule 73 (term -> FLOATNUM .)
    GT              reduce using rule 73 (term -> FLOATNUM .)
    GTE             reduce using rule 73 (term -> FLOATNUM .)
    LT              reduce using rule 73 (term -> FLOATNUM .)
    LTE             reduce using rule 73 (term -> FLOATNUM .)
    TRANSPOSE       reduce using rule 73 (term -> FLOATNUM .)
    ,               reduce using rule 73 (term -> FLOATNUM .)
    ;               reduce using rule 73 (term -> FLOATNUM .)
    :               reduce using rule 73 (term -> FLOATNUM .)
    ]               reduce using rule 73 (term -> FLOATNUM .)
    )               reduce using rule 73 (term -> FLOATNUM .)
    ID              reduce using rule 73 (term -> FLOATNUM .)
    PRINT           reduce using rule 73 (term -> FLOATNUM .)
    CONTINUE        reduce using rule 73 (term -> FLOATNUM .)
    BREAK           reduce using rule 73 (term -> FLOATNUM .)
    RETURN          reduce using rule 73 (term -> FLOATNUM .)
    IF              reduce using rule 73 (term -> FLOATNUM .)
    FOR             reduce using rule 73 (term -> FLOATNUM .)
    WHILE           reduce using rule 73 (term -> FLOATNUM .)
    {               reduce using rule 73 (term -> FLOATNUM .)


state 51

    (74) term -> STR .

    +               reduce using rule 74 (term -> STR .)
    -               reduce using rule 74 (term -> STR .)
    /               reduce using rule 74 (term -> STR .)
    *               reduce using rule 74 (term -> STR .)
    EQL             reduce using rule 74 (term -> STR .)
    NEQ             reduce using rule 74 (term -> STR .)
    GT              reduce using rule 74 (term -> STR .)
    GTE             reduce using rule 74 (term -> STR .)
    LT              reduce using rule 74 (term -> STR .)
    LTE             reduce using rule 74 (term -> STR .)
    TRANSPOSE       reduce using rule 74 (term -> STR .)
    ,               reduce using rule 74 (term -> STR .)
    ;               reduce using rule 74 (term -> STR .)
    :               reduce using rule 74 (term -> STR .)
    ]               reduce using rule 74 (term -> STR .)
    )               reduce using rule 74 (term -> STR .)
    ID              reduce using rule 74 (term -> STR .)
    PRINT           reduce using rule 74 (term -> STR .)
    CONTINUE        reduce using rule 74 (term -> STR .)
    BREAK           reduce using rule 74 (term -> STR .)
    RETURN          reduce using rule 74 (term -> STR .)
    IF              reduce using rule 74 (term -> STR .)
    FOR             reduce using rule 74 (term -> STR .)
    WHILE           reduce using rule 74 (term -> STR .)
    {               reduce using rule 74 (term -> STR .)


state 52

    (50) vector -> [ . vector_contents ]
    (51) vector -> [ . ]
    (52) vector_contents -> . vector_contents , vector_element
    (53) vector_contents -> . vector_element
    (54) vector_element -> . term
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    ]               shift and go to state 90
    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    ID              shift and go to state 82
    [               shift and go to state 52

    vector_contents                shift and go to state 89
    vector_element                 shift and go to state 91
    term                           shift and go to state 92
    vector                         shift and go to state 81

state 53

    (16) return -> RETURN expression .
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    ;               reduce using rule 16 (return -> RETURN expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    EQL             shift and go to state 71
    NEQ             shift and go to state 72
    GT              shift and go to state 73
    GTE             shift and go to state 74
    LT              shift and go to state 75
    LTE             shift and go to state 76
    TRANSPOSE       shift and go to state 77


state 54

    (62) if -> IF condition . nested
    (63) if -> IF condition . nested ELSE nested
    (65) nested -> . statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if
    (10) statement -> . for
    (11) statement -> . while
    (12) statement -> . nested_statements
    (21) assignment -> . ID assign_symbol expression
    (22) assignment -> . ID slice assign_symbol expression
    (18) print -> . PRINT coma_separated
    (17) continue -> . CONTINUE
    (15) break -> . BREAK
    (16) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (13) for -> . FOR ID ASSIGN expression : expression nested
    (14) while -> . WHILE condition nested
    (66) nested_statements -> . nested_empty
    (67) nested_statements -> . nested_statements_list
    (69) nested_empty -> . { }
    (68) nested_statements_list -> . { statements }

    ID              shift and go to state 13
    PRINT           shift and go to state 14
    CONTINUE        shift and go to state 15
    BREAK           shift and go to state 16
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 20
    {               shift and go to state 23

    nested                         shift and go to state 93
    statement                      shift and go to state 94
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if                             shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    nested_statements              shift and go to state 12
    nested_empty                   shift and go to state 21
    nested_statements_list         shift and go to state 22

state 55

    (64) condition -> ( . expression )
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (76) built_in_function -> . EYE
    (77) built_in_function -> . ONES
    (78) built_in_function -> . ZEROS
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 43
    ID              shift and go to state 44
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48
    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    [               shift and go to state 52

    expression                     shift and go to state 95
    built_in_function              shift and go to state 40
    term                           shift and go to state 42
    vector                         shift and go to state 45

state 56

    (13) for -> FOR ID . ASSIGN expression : expression nested

    ASSIGN          shift and go to state 96


state 57

    (14) while -> WHILE condition . nested
    (65) nested -> . statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if
    (10) statement -> . for
    (11) statement -> . while
    (12) statement -> . nested_statements
    (21) assignment -> . ID assign_symbol expression
    (22) assignment -> . ID slice assign_symbol expression
    (18) print -> . PRINT coma_separated
    (17) continue -> . CONTINUE
    (15) break -> . BREAK
    (16) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (13) for -> . FOR ID ASSIGN expression : expression nested
    (14) while -> . WHILE condition nested
    (66) nested_statements -> . nested_empty
    (67) nested_statements -> . nested_statements_list
    (69) nested_empty -> . { }
    (68) nested_statements_list -> . { statements }

    ID              shift and go to state 13
    PRINT           shift and go to state 14
    CONTINUE        shift and go to state 15
    BREAK           shift and go to state 16
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 20
    {               shift and go to state 23

    nested                         shift and go to state 97
    statement                      shift and go to state 94
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if                             shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    nested_statements              shift and go to state 12
    nested_empty                   shift and go to state 21
    nested_statements_list         shift and go to state 22

state 58

    (69) nested_empty -> { } .

    ID              reduce using rule 69 (nested_empty -> { } .)
    PRINT           reduce using rule 69 (nested_empty -> { } .)
    CONTINUE        reduce using rule 69 (nested_empty -> { } .)
    BREAK           reduce using rule 69 (nested_empty -> { } .)
    RETURN          reduce using rule 69 (nested_empty -> { } .)
    IF              reduce using rule 69 (nested_empty -> { } .)
    FOR             reduce using rule 69 (nested_empty -> { } .)
    WHILE           reduce using rule 69 (nested_empty -> { } .)
    {               reduce using rule 69 (nested_empty -> { } .)
    $end            reduce using rule 69 (nested_empty -> { } .)
    }               reduce using rule 69 (nested_empty -> { } .)
    ELSE            reduce using rule 69 (nested_empty -> { } .)


state 59

    (68) nested_statements_list -> { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if
    (10) statement -> . for
    (11) statement -> . while
    (12) statement -> . nested_statements
    (21) assignment -> . ID assign_symbol expression
    (22) assignment -> . ID slice assign_symbol expression
    (18) print -> . PRINT coma_separated
    (17) continue -> . CONTINUE
    (15) break -> . BREAK
    (16) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (13) for -> . FOR ID ASSIGN expression : expression nested
    (14) while -> . WHILE condition nested
    (66) nested_statements -> . nested_empty
    (67) nested_statements -> . nested_statements_list
    (69) nested_empty -> . { }
    (68) nested_statements_list -> . { statements }

    }               shift and go to state 98
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    CONTINUE        shift and go to state 15
    BREAK           shift and go to state 16
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 20
    {               shift and go to state 23

    statement                      shift and go to state 24
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if                             shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    nested_statements              shift and go to state 12
    nested_empty                   shift and go to state 21
    nested_statements_list         shift and go to state 22

state 60

    (21) assignment -> ID assign_symbol expression .
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    ;               reduce using rule 21 (assignment -> ID assign_symbol expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    EQL             shift and go to state 71
    NEQ             shift and go to state 72
    GT              shift and go to state 73
    GTE             shift and go to state 74
    LT              shift and go to state 75
    LTE             shift and go to state 76
    TRANSPOSE       shift and go to state 77


state 61

    (22) assignment -> ID slice assign_symbol . expression
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (76) built_in_function -> . EYE
    (77) built_in_function -> . ONES
    (78) built_in_function -> . ZEROS
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 43
    ID              shift and go to state 44
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48
    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    [               shift and go to state 52

    expression                     shift and go to state 99
    built_in_function              shift and go to state 40
    term                           shift and go to state 42
    vector                         shift and go to state 45

state 62

    (55) slice -> [ slice_contents . ]
    (56) slice_contents -> slice_contents . , range

    ]               shift and go to state 100
    ,               shift and go to state 101


state 63

    (57) slice_contents -> range .

    ]               reduce using rule 57 (slice_contents -> range .)
    ,               reduce using rule 57 (slice_contents -> range .)


state 64

    (58) range -> expression . : expression
    (59) range -> expression . :
    (61) range -> expression .
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    :               shift and go to state 102
    ]               reduce using rule 61 (range -> expression .)
    ,               reduce using rule 61 (range -> expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    EQL             shift and go to state 71
    NEQ             shift and go to state 72
    GT              shift and go to state 73
    GTE             shift and go to state 74
    LT              shift and go to state 75
    LTE             shift and go to state 76
    TRANSPOSE       shift and go to state 77


state 65

    (60) range -> : . expression
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (76) built_in_function -> . EYE
    (77) built_in_function -> . ONES
    (78) built_in_function -> . ZEROS
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 43
    ID              shift and go to state 44
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48
    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    [               shift and go to state 52

    expression                     shift and go to state 103
    built_in_function              shift and go to state 40
    term                           shift and go to state 42
    vector                         shift and go to state 45

state 66

    (19) coma_separated -> coma_separated , . expression
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (76) built_in_function -> . EYE
    (77) built_in_function -> . ONES
    (78) built_in_function -> . ZEROS
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 43
    ID              shift and go to state 44
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48
    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    [               shift and go to state 52

    expression                     shift and go to state 104
    built_in_function              shift and go to state 40
    term                           shift and go to state 42
    vector                         shift and go to state 45

state 67

    (32) expression -> expression + . term
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    ID              shift and go to state 82
    [               shift and go to state 52

    term                           shift and go to state 105
    vector                         shift and go to state 81

state 68

    (33) expression -> expression - . term
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    ID              shift and go to state 82
    [               shift and go to state 52

    term                           shift and go to state 106
    vector                         shift and go to state 81

state 69

    (34) expression -> expression / . term
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    ID              shift and go to state 82
    [               shift and go to state 52

    term                           shift and go to state 107
    vector                         shift and go to state 81

state 70

    (35) expression -> expression * . term
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    ID              shift and go to state 82
    [               shift and go to state 52

    term                           shift and go to state 108
    vector                         shift and go to state 81

state 71

    (36) expression -> expression EQL . term
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    ID              shift and go to state 82
    [               shift and go to state 52

    term                           shift and go to state 109
    vector                         shift and go to state 81

state 72

    (37) expression -> expression NEQ . term
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    ID              shift and go to state 82
    [               shift and go to state 52

    term                           shift and go to state 110
    vector                         shift and go to state 81

state 73

    (38) expression -> expression GT . term
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    ID              shift and go to state 82
    [               shift and go to state 52

    term                           shift and go to state 111
    vector                         shift and go to state 81

state 74

    (39) expression -> expression GTE . term
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    ID              shift and go to state 82
    [               shift and go to state 52

    term                           shift and go to state 112
    vector                         shift and go to state 81

state 75

    (40) expression -> expression LT . term
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    ID              shift and go to state 82
    [               shift and go to state 52

    term                           shift and go to state 113
    vector                         shift and go to state 81

state 76

    (41) expression -> expression LTE . term
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    ID              shift and go to state 82
    [               shift and go to state 52

    term                           shift and go to state 114
    vector                         shift and go to state 81

state 77

    (43) expression -> expression TRANSPOSE .

    +               reduce using rule 43 (expression -> expression TRANSPOSE .)
    -               reduce using rule 43 (expression -> expression TRANSPOSE .)
    /               reduce using rule 43 (expression -> expression TRANSPOSE .)
    *               reduce using rule 43 (expression -> expression TRANSPOSE .)
    EQL             reduce using rule 43 (expression -> expression TRANSPOSE .)
    NEQ             reduce using rule 43 (expression -> expression TRANSPOSE .)
    GT              reduce using rule 43 (expression -> expression TRANSPOSE .)
    GTE             reduce using rule 43 (expression -> expression TRANSPOSE .)
    LT              reduce using rule 43 (expression -> expression TRANSPOSE .)
    LTE             reduce using rule 43 (expression -> expression TRANSPOSE .)
    TRANSPOSE       reduce using rule 43 (expression -> expression TRANSPOSE .)
    ,               reduce using rule 43 (expression -> expression TRANSPOSE .)
    ;               reduce using rule 43 (expression -> expression TRANSPOSE .)
    :               reduce using rule 43 (expression -> expression TRANSPOSE .)
    ]               reduce using rule 43 (expression -> expression TRANSPOSE .)
    )               reduce using rule 43 (expression -> expression TRANSPOSE .)
    ID              reduce using rule 43 (expression -> expression TRANSPOSE .)
    PRINT           reduce using rule 43 (expression -> expression TRANSPOSE .)
    CONTINUE        reduce using rule 43 (expression -> expression TRANSPOSE .)
    BREAK           reduce using rule 43 (expression -> expression TRANSPOSE .)
    RETURN          reduce using rule 43 (expression -> expression TRANSPOSE .)
    IF              reduce using rule 43 (expression -> expression TRANSPOSE .)
    FOR             reduce using rule 43 (expression -> expression TRANSPOSE .)
    WHILE           reduce using rule 43 (expression -> expression TRANSPOSE .)
    {               reduce using rule 43 (expression -> expression TRANSPOSE .)


state 78

    (28) expression -> built_in_function ( . expression_list )
    (29) expression_list -> . expression_list , expression
    (30) expression_list -> . expression
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (76) built_in_function -> . EYE
    (77) built_in_function -> . ONES
    (78) built_in_function -> . ZEROS
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 43
    ID              shift and go to state 44
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48
    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    [               shift and go to state 52

    built_in_function              shift and go to state 40
    expression_list                shift and go to state 115
    expression                     shift and go to state 116
    term                           shift and go to state 42
    vector                         shift and go to state 45

state 79

    (70) term -> ( expression . )
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    )               shift and go to state 117
    +               shift and go to state 67
    -               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    EQL             shift and go to state 71
    NEQ             shift and go to state 72
    GT              shift and go to state 73
    GTE             shift and go to state 74
    LT              shift and go to state 75
    LTE             shift and go to state 76
    TRANSPOSE       shift and go to state 77


state 80

    (42) expression -> - term .

    +               reduce using rule 42 (expression -> - term .)
    -               reduce using rule 42 (expression -> - term .)
    /               reduce using rule 42 (expression -> - term .)
    *               reduce using rule 42 (expression -> - term .)
    EQL             reduce using rule 42 (expression -> - term .)
    NEQ             reduce using rule 42 (expression -> - term .)
    GT              reduce using rule 42 (expression -> - term .)
    GTE             reduce using rule 42 (expression -> - term .)
    LT              reduce using rule 42 (expression -> - term .)
    LTE             reduce using rule 42 (expression -> - term .)
    TRANSPOSE       reduce using rule 42 (expression -> - term .)
    ,               reduce using rule 42 (expression -> - term .)
    ;               reduce using rule 42 (expression -> - term .)
    :               reduce using rule 42 (expression -> - term .)
    ]               reduce using rule 42 (expression -> - term .)
    )               reduce using rule 42 (expression -> - term .)
    ID              reduce using rule 42 (expression -> - term .)
    PRINT           reduce using rule 42 (expression -> - term .)
    CONTINUE        reduce using rule 42 (expression -> - term .)
    BREAK           reduce using rule 42 (expression -> - term .)
    RETURN          reduce using rule 42 (expression -> - term .)
    IF              reduce using rule 42 (expression -> - term .)
    FOR             reduce using rule 42 (expression -> - term .)
    WHILE           reduce using rule 42 (expression -> - term .)
    {               reduce using rule 42 (expression -> - term .)


state 81

    (71) term -> vector .

    +               reduce using rule 71 (term -> vector .)
    -               reduce using rule 71 (term -> vector .)
    /               reduce using rule 71 (term -> vector .)
    *               reduce using rule 71 (term -> vector .)
    EQL             reduce using rule 71 (term -> vector .)
    NEQ             reduce using rule 71 (term -> vector .)
    GT              reduce using rule 71 (term -> vector .)
    GTE             reduce using rule 71 (term -> vector .)
    LT              reduce using rule 71 (term -> vector .)
    LTE             reduce using rule 71 (term -> vector .)
    TRANSPOSE       reduce using rule 71 (term -> vector .)
    ,               reduce using rule 71 (term -> vector .)
    ;               reduce using rule 71 (term -> vector .)
    :               reduce using rule 71 (term -> vector .)
    ]               reduce using rule 71 (term -> vector .)
    )               reduce using rule 71 (term -> vector .)
    ID              reduce using rule 71 (term -> vector .)
    PRINT           reduce using rule 71 (term -> vector .)
    CONTINUE        reduce using rule 71 (term -> vector .)
    BREAK           reduce using rule 71 (term -> vector .)
    RETURN          reduce using rule 71 (term -> vector .)
    IF              reduce using rule 71 (term -> vector .)
    FOR             reduce using rule 71 (term -> vector .)
    WHILE           reduce using rule 71 (term -> vector .)
    {               reduce using rule 71 (term -> vector .)


state 82

    (75) term -> ID .

    +               reduce using rule 75 (term -> ID .)
    -               reduce using rule 75 (term -> ID .)
    /               reduce using rule 75 (term -> ID .)
    *               reduce using rule 75 (term -> ID .)
    EQL             reduce using rule 75 (term -> ID .)
    NEQ             reduce using rule 75 (term -> ID .)
    GT              reduce using rule 75 (term -> ID .)
    GTE             reduce using rule 75 (term -> ID .)
    LT              reduce using rule 75 (term -> ID .)
    LTE             reduce using rule 75 (term -> ID .)
    TRANSPOSE       reduce using rule 75 (term -> ID .)
    ,               reduce using rule 75 (term -> ID .)
    ;               reduce using rule 75 (term -> ID .)
    :               reduce using rule 75 (term -> ID .)
    ]               reduce using rule 75 (term -> ID .)
    )               reduce using rule 75 (term -> ID .)
    ID              reduce using rule 75 (term -> ID .)
    PRINT           reduce using rule 75 (term -> ID .)
    CONTINUE        reduce using rule 75 (term -> ID .)
    BREAK           reduce using rule 75 (term -> ID .)
    RETURN          reduce using rule 75 (term -> ID .)
    IF              reduce using rule 75 (term -> ID .)
    FOR             reduce using rule 75 (term -> ID .)
    WHILE           reduce using rule 75 (term -> ID .)
    {               reduce using rule 75 (term -> ID .)


state 83

    (44) expression -> ID dot_operation . term
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    ID              shift and go to state 82
    [               shift and go to state 52

    term                           shift and go to state 118
    vector                         shift and go to state 81

state 84

    (46) dot_operation -> DOTADD .

    (               reduce using rule 46 (dot_operation -> DOTADD .)
    INTNUM          reduce using rule 46 (dot_operation -> DOTADD .)
    FLOATNUM        reduce using rule 46 (dot_operation -> DOTADD .)
    STR             reduce using rule 46 (dot_operation -> DOTADD .)
    ID              reduce using rule 46 (dot_operation -> DOTADD .)
    [               reduce using rule 46 (dot_operation -> DOTADD .)


state 85

    (47) dot_operation -> DOTSUB .

    (               reduce using rule 47 (dot_operation -> DOTSUB .)
    INTNUM          reduce using rule 47 (dot_operation -> DOTSUB .)
    FLOATNUM        reduce using rule 47 (dot_operation -> DOTSUB .)
    STR             reduce using rule 47 (dot_operation -> DOTSUB .)
    ID              reduce using rule 47 (dot_operation -> DOTSUB .)
    [               reduce using rule 47 (dot_operation -> DOTSUB .)


state 86

    (48) dot_operation -> DOTMUL .

    (               reduce using rule 48 (dot_operation -> DOTMUL .)
    INTNUM          reduce using rule 48 (dot_operation -> DOTMUL .)
    FLOATNUM        reduce using rule 48 (dot_operation -> DOTMUL .)
    STR             reduce using rule 48 (dot_operation -> DOTMUL .)
    ID              reduce using rule 48 (dot_operation -> DOTMUL .)
    [               reduce using rule 48 (dot_operation -> DOTMUL .)


state 87

    (49) dot_operation -> DOTDIV .

    (               reduce using rule 49 (dot_operation -> DOTDIV .)
    INTNUM          reduce using rule 49 (dot_operation -> DOTDIV .)
    FLOATNUM        reduce using rule 49 (dot_operation -> DOTDIV .)
    STR             reduce using rule 49 (dot_operation -> DOTDIV .)
    ID              reduce using rule 49 (dot_operation -> DOTDIV .)
    [               reduce using rule 49 (dot_operation -> DOTDIV .)


state 88

    (45) expression -> vector dot_operation . term
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    ID              shift and go to state 82
    [               shift and go to state 52

    vector                         shift and go to state 81
    term                           shift and go to state 119

state 89

    (50) vector -> [ vector_contents . ]
    (52) vector_contents -> vector_contents . , vector_element

    ]               shift and go to state 120
    ,               shift and go to state 121


state 90

    (51) vector -> [ ] .

    DOTADD          reduce using rule 51 (vector -> [ ] .)
    DOTSUB          reduce using rule 51 (vector -> [ ] .)
    DOTMUL          reduce using rule 51 (vector -> [ ] .)
    DOTDIV          reduce using rule 51 (vector -> [ ] .)
    +               reduce using rule 51 (vector -> [ ] .)
    -               reduce using rule 51 (vector -> [ ] .)
    /               reduce using rule 51 (vector -> [ ] .)
    *               reduce using rule 51 (vector -> [ ] .)
    EQL             reduce using rule 51 (vector -> [ ] .)
    NEQ             reduce using rule 51 (vector -> [ ] .)
    GT              reduce using rule 51 (vector -> [ ] .)
    GTE             reduce using rule 51 (vector -> [ ] .)
    LT              reduce using rule 51 (vector -> [ ] .)
    LTE             reduce using rule 51 (vector -> [ ] .)
    TRANSPOSE       reduce using rule 51 (vector -> [ ] .)
    ,               reduce using rule 51 (vector -> [ ] .)
    ;               reduce using rule 51 (vector -> [ ] .)
    :               reduce using rule 51 (vector -> [ ] .)
    ]               reduce using rule 51 (vector -> [ ] .)
    )               reduce using rule 51 (vector -> [ ] .)
    ID              reduce using rule 51 (vector -> [ ] .)
    PRINT           reduce using rule 51 (vector -> [ ] .)
    CONTINUE        reduce using rule 51 (vector -> [ ] .)
    BREAK           reduce using rule 51 (vector -> [ ] .)
    RETURN          reduce using rule 51 (vector -> [ ] .)
    IF              reduce using rule 51 (vector -> [ ] .)
    FOR             reduce using rule 51 (vector -> [ ] .)
    WHILE           reduce using rule 51 (vector -> [ ] .)
    {               reduce using rule 51 (vector -> [ ] .)


state 91

    (53) vector_contents -> vector_element .

    ]               reduce using rule 53 (vector_contents -> vector_element .)
    ,               reduce using rule 53 (vector_contents -> vector_element .)


state 92

    (54) vector_element -> term .

    ]               reduce using rule 54 (vector_element -> term .)
    ,               reduce using rule 54 (vector_element -> term .)


state 93

    (62) if -> IF condition nested .
    (63) if -> IF condition nested . ELSE nested

    ID              reduce using rule 62 (if -> IF condition nested .)
    PRINT           reduce using rule 62 (if -> IF condition nested .)
    CONTINUE        reduce using rule 62 (if -> IF condition nested .)
    BREAK           reduce using rule 62 (if -> IF condition nested .)
    RETURN          reduce using rule 62 (if -> IF condition nested .)
    IF              reduce using rule 62 (if -> IF condition nested .)
    FOR             reduce using rule 62 (if -> IF condition nested .)
    WHILE           reduce using rule 62 (if -> IF condition nested .)
    {               reduce using rule 62 (if -> IF condition nested .)
    $end            reduce using rule 62 (if -> IF condition nested .)
    }               reduce using rule 62 (if -> IF condition nested .)
    ELSE            shift and go to state 122

  ! ELSE            [ reduce using rule 62 (if -> IF condition nested .) ]


state 94

    (65) nested -> statement .

    ELSE            reduce using rule 65 (nested -> statement .)
    ID              reduce using rule 65 (nested -> statement .)
    PRINT           reduce using rule 65 (nested -> statement .)
    CONTINUE        reduce using rule 65 (nested -> statement .)
    BREAK           reduce using rule 65 (nested -> statement .)
    RETURN          reduce using rule 65 (nested -> statement .)
    IF              reduce using rule 65 (nested -> statement .)
    FOR             reduce using rule 65 (nested -> statement .)
    WHILE           reduce using rule 65 (nested -> statement .)
    {               reduce using rule 65 (nested -> statement .)
    $end            reduce using rule 65 (nested -> statement .)
    }               reduce using rule 65 (nested -> statement .)


state 95

    (64) condition -> ( expression . )
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    )               shift and go to state 123
    +               shift and go to state 67
    -               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    EQL             shift and go to state 71
    NEQ             shift and go to state 72
    GT              shift and go to state 73
    GTE             shift and go to state 74
    LT              shift and go to state 75
    LTE             shift and go to state 76
    TRANSPOSE       shift and go to state 77


state 96

    (13) for -> FOR ID ASSIGN . expression : expression nested
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (76) built_in_function -> . EYE
    (77) built_in_function -> . ONES
    (78) built_in_function -> . ZEROS
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 43
    ID              shift and go to state 44
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48
    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    [               shift and go to state 52

    expression                     shift and go to state 124
    built_in_function              shift and go to state 40
    term                           shift and go to state 42
    vector                         shift and go to state 45

state 97

    (14) while -> WHILE condition nested .

    ID              reduce using rule 14 (while -> WHILE condition nested .)
    PRINT           reduce using rule 14 (while -> WHILE condition nested .)
    CONTINUE        reduce using rule 14 (while -> WHILE condition nested .)
    BREAK           reduce using rule 14 (while -> WHILE condition nested .)
    RETURN          reduce using rule 14 (while -> WHILE condition nested .)
    IF              reduce using rule 14 (while -> WHILE condition nested .)
    FOR             reduce using rule 14 (while -> WHILE condition nested .)
    WHILE           reduce using rule 14 (while -> WHILE condition nested .)
    {               reduce using rule 14 (while -> WHILE condition nested .)
    $end            reduce using rule 14 (while -> WHILE condition nested .)
    }               reduce using rule 14 (while -> WHILE condition nested .)
    ELSE            reduce using rule 14 (while -> WHILE condition nested .)


state 98

    (68) nested_statements_list -> { statements } .

    ID              reduce using rule 68 (nested_statements_list -> { statements } .)
    PRINT           reduce using rule 68 (nested_statements_list -> { statements } .)
    CONTINUE        reduce using rule 68 (nested_statements_list -> { statements } .)
    BREAK           reduce using rule 68 (nested_statements_list -> { statements } .)
    RETURN          reduce using rule 68 (nested_statements_list -> { statements } .)
    IF              reduce using rule 68 (nested_statements_list -> { statements } .)
    FOR             reduce using rule 68 (nested_statements_list -> { statements } .)
    WHILE           reduce using rule 68 (nested_statements_list -> { statements } .)
    {               reduce using rule 68 (nested_statements_list -> { statements } .)
    $end            reduce using rule 68 (nested_statements_list -> { statements } .)
    }               reduce using rule 68 (nested_statements_list -> { statements } .)
    ELSE            reduce using rule 68 (nested_statements_list -> { statements } .)


state 99

    (22) assignment -> ID slice assign_symbol expression .
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    ;               reduce using rule 22 (assignment -> ID slice assign_symbol expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    EQL             shift and go to state 71
    NEQ             shift and go to state 72
    GT              shift and go to state 73
    GTE             shift and go to state 74
    LT              shift and go to state 75
    LTE             shift and go to state 76
    TRANSPOSE       shift and go to state 77


state 100

    (55) slice -> [ slice_contents ] .

    ASSIGN          reduce using rule 55 (slice -> [ slice_contents ] .)
    SUBASSIGN       reduce using rule 55 (slice -> [ slice_contents ] .)
    ADDASSIGN       reduce using rule 55 (slice -> [ slice_contents ] .)
    DIVASSIGN       reduce using rule 55 (slice -> [ slice_contents ] .)
    MULTASSIGN      reduce using rule 55 (slice -> [ slice_contents ] .)


state 101

    (56) slice_contents -> slice_contents , . range
    (58) range -> . expression : expression
    (59) range -> . expression :
    (60) range -> . : expression
    (61) range -> . expression
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (76) built_in_function -> . EYE
    (77) built_in_function -> . ONES
    (78) built_in_function -> . ZEROS
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    :               shift and go to state 65
    -               shift and go to state 43
    ID              shift and go to state 44
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48
    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    [               shift and go to state 52

    range                          shift and go to state 125
    expression                     shift and go to state 64
    built_in_function              shift and go to state 40
    term                           shift and go to state 42
    vector                         shift and go to state 45

state 102

    (58) range -> expression : . expression
    (59) range -> expression : .
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (76) built_in_function -> . EYE
    (77) built_in_function -> . ONES
    (78) built_in_function -> . ZEROS
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    ]               reduce using rule 59 (range -> expression : .)
    ,               reduce using rule 59 (range -> expression : .)
    -               shift and go to state 43
    ID              shift and go to state 44
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48
    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    [               shift and go to state 52

    expression                     shift and go to state 126
    built_in_function              shift and go to state 40
    term                           shift and go to state 42
    vector                         shift and go to state 45

state 103

    (60) range -> : expression .
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    ]               reduce using rule 60 (range -> : expression .)
    ,               reduce using rule 60 (range -> : expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    EQL             shift and go to state 71
    NEQ             shift and go to state 72
    GT              shift and go to state 73
    GTE             shift and go to state 74
    LT              shift and go to state 75
    LTE             shift and go to state 76
    TRANSPOSE       shift and go to state 77


state 104

    (19) coma_separated -> coma_separated , expression .
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    ,               reduce using rule 19 (coma_separated -> coma_separated , expression .)
    ;               reduce using rule 19 (coma_separated -> coma_separated , expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    EQL             shift and go to state 71
    NEQ             shift and go to state 72
    GT              shift and go to state 73
    GTE             shift and go to state 74
    LT              shift and go to state 75
    LTE             shift and go to state 76
    TRANSPOSE       shift and go to state 77


state 105

    (32) expression -> expression + term .

    +               reduce using rule 32 (expression -> expression + term .)
    -               reduce using rule 32 (expression -> expression + term .)
    /               reduce using rule 32 (expression -> expression + term .)
    *               reduce using rule 32 (expression -> expression + term .)
    EQL             reduce using rule 32 (expression -> expression + term .)
    NEQ             reduce using rule 32 (expression -> expression + term .)
    GT              reduce using rule 32 (expression -> expression + term .)
    GTE             reduce using rule 32 (expression -> expression + term .)
    LT              reduce using rule 32 (expression -> expression + term .)
    LTE             reduce using rule 32 (expression -> expression + term .)
    TRANSPOSE       reduce using rule 32 (expression -> expression + term .)
    ,               reduce using rule 32 (expression -> expression + term .)
    ;               reduce using rule 32 (expression -> expression + term .)
    :               reduce using rule 32 (expression -> expression + term .)
    ]               reduce using rule 32 (expression -> expression + term .)
    )               reduce using rule 32 (expression -> expression + term .)
    ID              reduce using rule 32 (expression -> expression + term .)
    PRINT           reduce using rule 32 (expression -> expression + term .)
    CONTINUE        reduce using rule 32 (expression -> expression + term .)
    BREAK           reduce using rule 32 (expression -> expression + term .)
    RETURN          reduce using rule 32 (expression -> expression + term .)
    IF              reduce using rule 32 (expression -> expression + term .)
    FOR             reduce using rule 32 (expression -> expression + term .)
    WHILE           reduce using rule 32 (expression -> expression + term .)
    {               reduce using rule 32 (expression -> expression + term .)


state 106

    (33) expression -> expression - term .

    +               reduce using rule 33 (expression -> expression - term .)
    -               reduce using rule 33 (expression -> expression - term .)
    /               reduce using rule 33 (expression -> expression - term .)
    *               reduce using rule 33 (expression -> expression - term .)
    EQL             reduce using rule 33 (expression -> expression - term .)
    NEQ             reduce using rule 33 (expression -> expression - term .)
    GT              reduce using rule 33 (expression -> expression - term .)
    GTE             reduce using rule 33 (expression -> expression - term .)
    LT              reduce using rule 33 (expression -> expression - term .)
    LTE             reduce using rule 33 (expression -> expression - term .)
    TRANSPOSE       reduce using rule 33 (expression -> expression - term .)
    ,               reduce using rule 33 (expression -> expression - term .)
    ;               reduce using rule 33 (expression -> expression - term .)
    :               reduce using rule 33 (expression -> expression - term .)
    ]               reduce using rule 33 (expression -> expression - term .)
    )               reduce using rule 33 (expression -> expression - term .)
    ID              reduce using rule 33 (expression -> expression - term .)
    PRINT           reduce using rule 33 (expression -> expression - term .)
    CONTINUE        reduce using rule 33 (expression -> expression - term .)
    BREAK           reduce using rule 33 (expression -> expression - term .)
    RETURN          reduce using rule 33 (expression -> expression - term .)
    IF              reduce using rule 33 (expression -> expression - term .)
    FOR             reduce using rule 33 (expression -> expression - term .)
    WHILE           reduce using rule 33 (expression -> expression - term .)
    {               reduce using rule 33 (expression -> expression - term .)


state 107

    (34) expression -> expression / term .

    +               reduce using rule 34 (expression -> expression / term .)
    -               reduce using rule 34 (expression -> expression / term .)
    /               reduce using rule 34 (expression -> expression / term .)
    *               reduce using rule 34 (expression -> expression / term .)
    EQL             reduce using rule 34 (expression -> expression / term .)
    NEQ             reduce using rule 34 (expression -> expression / term .)
    GT              reduce using rule 34 (expression -> expression / term .)
    GTE             reduce using rule 34 (expression -> expression / term .)
    LT              reduce using rule 34 (expression -> expression / term .)
    LTE             reduce using rule 34 (expression -> expression / term .)
    TRANSPOSE       reduce using rule 34 (expression -> expression / term .)
    ,               reduce using rule 34 (expression -> expression / term .)
    ;               reduce using rule 34 (expression -> expression / term .)
    :               reduce using rule 34 (expression -> expression / term .)
    ]               reduce using rule 34 (expression -> expression / term .)
    )               reduce using rule 34 (expression -> expression / term .)
    ID              reduce using rule 34 (expression -> expression / term .)
    PRINT           reduce using rule 34 (expression -> expression / term .)
    CONTINUE        reduce using rule 34 (expression -> expression / term .)
    BREAK           reduce using rule 34 (expression -> expression / term .)
    RETURN          reduce using rule 34 (expression -> expression / term .)
    IF              reduce using rule 34 (expression -> expression / term .)
    FOR             reduce using rule 34 (expression -> expression / term .)
    WHILE           reduce using rule 34 (expression -> expression / term .)
    {               reduce using rule 34 (expression -> expression / term .)


state 108

    (35) expression -> expression * term .

    +               reduce using rule 35 (expression -> expression * term .)
    -               reduce using rule 35 (expression -> expression * term .)
    /               reduce using rule 35 (expression -> expression * term .)
    *               reduce using rule 35 (expression -> expression * term .)
    EQL             reduce using rule 35 (expression -> expression * term .)
    NEQ             reduce using rule 35 (expression -> expression * term .)
    GT              reduce using rule 35 (expression -> expression * term .)
    GTE             reduce using rule 35 (expression -> expression * term .)
    LT              reduce using rule 35 (expression -> expression * term .)
    LTE             reduce using rule 35 (expression -> expression * term .)
    TRANSPOSE       reduce using rule 35 (expression -> expression * term .)
    ,               reduce using rule 35 (expression -> expression * term .)
    ;               reduce using rule 35 (expression -> expression * term .)
    :               reduce using rule 35 (expression -> expression * term .)
    ]               reduce using rule 35 (expression -> expression * term .)
    )               reduce using rule 35 (expression -> expression * term .)
    ID              reduce using rule 35 (expression -> expression * term .)
    PRINT           reduce using rule 35 (expression -> expression * term .)
    CONTINUE        reduce using rule 35 (expression -> expression * term .)
    BREAK           reduce using rule 35 (expression -> expression * term .)
    RETURN          reduce using rule 35 (expression -> expression * term .)
    IF              reduce using rule 35 (expression -> expression * term .)
    FOR             reduce using rule 35 (expression -> expression * term .)
    WHILE           reduce using rule 35 (expression -> expression * term .)
    {               reduce using rule 35 (expression -> expression * term .)


state 109

    (36) expression -> expression EQL term .

    +               reduce using rule 36 (expression -> expression EQL term .)
    -               reduce using rule 36 (expression -> expression EQL term .)
    /               reduce using rule 36 (expression -> expression EQL term .)
    *               reduce using rule 36 (expression -> expression EQL term .)
    EQL             reduce using rule 36 (expression -> expression EQL term .)
    NEQ             reduce using rule 36 (expression -> expression EQL term .)
    GT              reduce using rule 36 (expression -> expression EQL term .)
    GTE             reduce using rule 36 (expression -> expression EQL term .)
    LT              reduce using rule 36 (expression -> expression EQL term .)
    LTE             reduce using rule 36 (expression -> expression EQL term .)
    TRANSPOSE       reduce using rule 36 (expression -> expression EQL term .)
    ,               reduce using rule 36 (expression -> expression EQL term .)
    ;               reduce using rule 36 (expression -> expression EQL term .)
    :               reduce using rule 36 (expression -> expression EQL term .)
    ]               reduce using rule 36 (expression -> expression EQL term .)
    )               reduce using rule 36 (expression -> expression EQL term .)
    ID              reduce using rule 36 (expression -> expression EQL term .)
    PRINT           reduce using rule 36 (expression -> expression EQL term .)
    CONTINUE        reduce using rule 36 (expression -> expression EQL term .)
    BREAK           reduce using rule 36 (expression -> expression EQL term .)
    RETURN          reduce using rule 36 (expression -> expression EQL term .)
    IF              reduce using rule 36 (expression -> expression EQL term .)
    FOR             reduce using rule 36 (expression -> expression EQL term .)
    WHILE           reduce using rule 36 (expression -> expression EQL term .)
    {               reduce using rule 36 (expression -> expression EQL term .)


state 110

    (37) expression -> expression NEQ term .

    +               reduce using rule 37 (expression -> expression NEQ term .)
    -               reduce using rule 37 (expression -> expression NEQ term .)
    /               reduce using rule 37 (expression -> expression NEQ term .)
    *               reduce using rule 37 (expression -> expression NEQ term .)
    EQL             reduce using rule 37 (expression -> expression NEQ term .)
    NEQ             reduce using rule 37 (expression -> expression NEQ term .)
    GT              reduce using rule 37 (expression -> expression NEQ term .)
    GTE             reduce using rule 37 (expression -> expression NEQ term .)
    LT              reduce using rule 37 (expression -> expression NEQ term .)
    LTE             reduce using rule 37 (expression -> expression NEQ term .)
    TRANSPOSE       reduce using rule 37 (expression -> expression NEQ term .)
    ,               reduce using rule 37 (expression -> expression NEQ term .)
    ;               reduce using rule 37 (expression -> expression NEQ term .)
    :               reduce using rule 37 (expression -> expression NEQ term .)
    ]               reduce using rule 37 (expression -> expression NEQ term .)
    )               reduce using rule 37 (expression -> expression NEQ term .)
    ID              reduce using rule 37 (expression -> expression NEQ term .)
    PRINT           reduce using rule 37 (expression -> expression NEQ term .)
    CONTINUE        reduce using rule 37 (expression -> expression NEQ term .)
    BREAK           reduce using rule 37 (expression -> expression NEQ term .)
    RETURN          reduce using rule 37 (expression -> expression NEQ term .)
    IF              reduce using rule 37 (expression -> expression NEQ term .)
    FOR             reduce using rule 37 (expression -> expression NEQ term .)
    WHILE           reduce using rule 37 (expression -> expression NEQ term .)
    {               reduce using rule 37 (expression -> expression NEQ term .)


state 111

    (38) expression -> expression GT term .

    +               reduce using rule 38 (expression -> expression GT term .)
    -               reduce using rule 38 (expression -> expression GT term .)
    /               reduce using rule 38 (expression -> expression GT term .)
    *               reduce using rule 38 (expression -> expression GT term .)
    EQL             reduce using rule 38 (expression -> expression GT term .)
    NEQ             reduce using rule 38 (expression -> expression GT term .)
    GT              reduce using rule 38 (expression -> expression GT term .)
    GTE             reduce using rule 38 (expression -> expression GT term .)
    LT              reduce using rule 38 (expression -> expression GT term .)
    LTE             reduce using rule 38 (expression -> expression GT term .)
    TRANSPOSE       reduce using rule 38 (expression -> expression GT term .)
    ,               reduce using rule 38 (expression -> expression GT term .)
    ;               reduce using rule 38 (expression -> expression GT term .)
    :               reduce using rule 38 (expression -> expression GT term .)
    ]               reduce using rule 38 (expression -> expression GT term .)
    )               reduce using rule 38 (expression -> expression GT term .)
    ID              reduce using rule 38 (expression -> expression GT term .)
    PRINT           reduce using rule 38 (expression -> expression GT term .)
    CONTINUE        reduce using rule 38 (expression -> expression GT term .)
    BREAK           reduce using rule 38 (expression -> expression GT term .)
    RETURN          reduce using rule 38 (expression -> expression GT term .)
    IF              reduce using rule 38 (expression -> expression GT term .)
    FOR             reduce using rule 38 (expression -> expression GT term .)
    WHILE           reduce using rule 38 (expression -> expression GT term .)
    {               reduce using rule 38 (expression -> expression GT term .)


state 112

    (39) expression -> expression GTE term .

    +               reduce using rule 39 (expression -> expression GTE term .)
    -               reduce using rule 39 (expression -> expression GTE term .)
    /               reduce using rule 39 (expression -> expression GTE term .)
    *               reduce using rule 39 (expression -> expression GTE term .)
    EQL             reduce using rule 39 (expression -> expression GTE term .)
    NEQ             reduce using rule 39 (expression -> expression GTE term .)
    GT              reduce using rule 39 (expression -> expression GTE term .)
    GTE             reduce using rule 39 (expression -> expression GTE term .)
    LT              reduce using rule 39 (expression -> expression GTE term .)
    LTE             reduce using rule 39 (expression -> expression GTE term .)
    TRANSPOSE       reduce using rule 39 (expression -> expression GTE term .)
    ,               reduce using rule 39 (expression -> expression GTE term .)
    ;               reduce using rule 39 (expression -> expression GTE term .)
    :               reduce using rule 39 (expression -> expression GTE term .)
    ]               reduce using rule 39 (expression -> expression GTE term .)
    )               reduce using rule 39 (expression -> expression GTE term .)
    ID              reduce using rule 39 (expression -> expression GTE term .)
    PRINT           reduce using rule 39 (expression -> expression GTE term .)
    CONTINUE        reduce using rule 39 (expression -> expression GTE term .)
    BREAK           reduce using rule 39 (expression -> expression GTE term .)
    RETURN          reduce using rule 39 (expression -> expression GTE term .)
    IF              reduce using rule 39 (expression -> expression GTE term .)
    FOR             reduce using rule 39 (expression -> expression GTE term .)
    WHILE           reduce using rule 39 (expression -> expression GTE term .)
    {               reduce using rule 39 (expression -> expression GTE term .)


state 113

    (40) expression -> expression LT term .

    +               reduce using rule 40 (expression -> expression LT term .)
    -               reduce using rule 40 (expression -> expression LT term .)
    /               reduce using rule 40 (expression -> expression LT term .)
    *               reduce using rule 40 (expression -> expression LT term .)
    EQL             reduce using rule 40 (expression -> expression LT term .)
    NEQ             reduce using rule 40 (expression -> expression LT term .)
    GT              reduce using rule 40 (expression -> expression LT term .)
    GTE             reduce using rule 40 (expression -> expression LT term .)
    LT              reduce using rule 40 (expression -> expression LT term .)
    LTE             reduce using rule 40 (expression -> expression LT term .)
    TRANSPOSE       reduce using rule 40 (expression -> expression LT term .)
    ,               reduce using rule 40 (expression -> expression LT term .)
    ;               reduce using rule 40 (expression -> expression LT term .)
    :               reduce using rule 40 (expression -> expression LT term .)
    ]               reduce using rule 40 (expression -> expression LT term .)
    )               reduce using rule 40 (expression -> expression LT term .)
    ID              reduce using rule 40 (expression -> expression LT term .)
    PRINT           reduce using rule 40 (expression -> expression LT term .)
    CONTINUE        reduce using rule 40 (expression -> expression LT term .)
    BREAK           reduce using rule 40 (expression -> expression LT term .)
    RETURN          reduce using rule 40 (expression -> expression LT term .)
    IF              reduce using rule 40 (expression -> expression LT term .)
    FOR             reduce using rule 40 (expression -> expression LT term .)
    WHILE           reduce using rule 40 (expression -> expression LT term .)
    {               reduce using rule 40 (expression -> expression LT term .)


state 114

    (41) expression -> expression LTE term .

    +               reduce using rule 41 (expression -> expression LTE term .)
    -               reduce using rule 41 (expression -> expression LTE term .)
    /               reduce using rule 41 (expression -> expression LTE term .)
    *               reduce using rule 41 (expression -> expression LTE term .)
    EQL             reduce using rule 41 (expression -> expression LTE term .)
    NEQ             reduce using rule 41 (expression -> expression LTE term .)
    GT              reduce using rule 41 (expression -> expression LTE term .)
    GTE             reduce using rule 41 (expression -> expression LTE term .)
    LT              reduce using rule 41 (expression -> expression LTE term .)
    LTE             reduce using rule 41 (expression -> expression LTE term .)
    TRANSPOSE       reduce using rule 41 (expression -> expression LTE term .)
    ,               reduce using rule 41 (expression -> expression LTE term .)
    ;               reduce using rule 41 (expression -> expression LTE term .)
    :               reduce using rule 41 (expression -> expression LTE term .)
    ]               reduce using rule 41 (expression -> expression LTE term .)
    )               reduce using rule 41 (expression -> expression LTE term .)
    ID              reduce using rule 41 (expression -> expression LTE term .)
    PRINT           reduce using rule 41 (expression -> expression LTE term .)
    CONTINUE        reduce using rule 41 (expression -> expression LTE term .)
    BREAK           reduce using rule 41 (expression -> expression LTE term .)
    RETURN          reduce using rule 41 (expression -> expression LTE term .)
    IF              reduce using rule 41 (expression -> expression LTE term .)
    FOR             reduce using rule 41 (expression -> expression LTE term .)
    WHILE           reduce using rule 41 (expression -> expression LTE term .)
    {               reduce using rule 41 (expression -> expression LTE term .)


state 115

    (28) expression -> built_in_function ( expression_list . )
    (29) expression_list -> expression_list . , expression

    )               shift and go to state 127
    ,               shift and go to state 128


state 116

    (30) expression_list -> expression .
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    )               reduce using rule 30 (expression_list -> expression .)
    ,               reduce using rule 30 (expression_list -> expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    EQL             shift and go to state 71
    NEQ             shift and go to state 72
    GT              shift and go to state 73
    GTE             shift and go to state 74
    LT              shift and go to state 75
    LTE             shift and go to state 76
    TRANSPOSE       shift and go to state 77


state 117

    (70) term -> ( expression ) .

    +               reduce using rule 70 (term -> ( expression ) .)
    -               reduce using rule 70 (term -> ( expression ) .)
    /               reduce using rule 70 (term -> ( expression ) .)
    *               reduce using rule 70 (term -> ( expression ) .)
    EQL             reduce using rule 70 (term -> ( expression ) .)
    NEQ             reduce using rule 70 (term -> ( expression ) .)
    GT              reduce using rule 70 (term -> ( expression ) .)
    GTE             reduce using rule 70 (term -> ( expression ) .)
    LT              reduce using rule 70 (term -> ( expression ) .)
    LTE             reduce using rule 70 (term -> ( expression ) .)
    TRANSPOSE       reduce using rule 70 (term -> ( expression ) .)
    ,               reduce using rule 70 (term -> ( expression ) .)
    ;               reduce using rule 70 (term -> ( expression ) .)
    :               reduce using rule 70 (term -> ( expression ) .)
    ]               reduce using rule 70 (term -> ( expression ) .)
    )               reduce using rule 70 (term -> ( expression ) .)
    ID              reduce using rule 70 (term -> ( expression ) .)
    PRINT           reduce using rule 70 (term -> ( expression ) .)
    CONTINUE        reduce using rule 70 (term -> ( expression ) .)
    BREAK           reduce using rule 70 (term -> ( expression ) .)
    RETURN          reduce using rule 70 (term -> ( expression ) .)
    IF              reduce using rule 70 (term -> ( expression ) .)
    FOR             reduce using rule 70 (term -> ( expression ) .)
    WHILE           reduce using rule 70 (term -> ( expression ) .)
    {               reduce using rule 70 (term -> ( expression ) .)


state 118

    (44) expression -> ID dot_operation term .

    +               reduce using rule 44 (expression -> ID dot_operation term .)
    -               reduce using rule 44 (expression -> ID dot_operation term .)
    /               reduce using rule 44 (expression -> ID dot_operation term .)
    *               reduce using rule 44 (expression -> ID dot_operation term .)
    EQL             reduce using rule 44 (expression -> ID dot_operation term .)
    NEQ             reduce using rule 44 (expression -> ID dot_operation term .)
    GT              reduce using rule 44 (expression -> ID dot_operation term .)
    GTE             reduce using rule 44 (expression -> ID dot_operation term .)
    LT              reduce using rule 44 (expression -> ID dot_operation term .)
    LTE             reduce using rule 44 (expression -> ID dot_operation term .)
    TRANSPOSE       reduce using rule 44 (expression -> ID dot_operation term .)
    ,               reduce using rule 44 (expression -> ID dot_operation term .)
    ;               reduce using rule 44 (expression -> ID dot_operation term .)
    :               reduce using rule 44 (expression -> ID dot_operation term .)
    ]               reduce using rule 44 (expression -> ID dot_operation term .)
    )               reduce using rule 44 (expression -> ID dot_operation term .)
    ID              reduce using rule 44 (expression -> ID dot_operation term .)
    PRINT           reduce using rule 44 (expression -> ID dot_operation term .)
    CONTINUE        reduce using rule 44 (expression -> ID dot_operation term .)
    BREAK           reduce using rule 44 (expression -> ID dot_operation term .)
    RETURN          reduce using rule 44 (expression -> ID dot_operation term .)
    IF              reduce using rule 44 (expression -> ID dot_operation term .)
    FOR             reduce using rule 44 (expression -> ID dot_operation term .)
    WHILE           reduce using rule 44 (expression -> ID dot_operation term .)
    {               reduce using rule 44 (expression -> ID dot_operation term .)


state 119

    (45) expression -> vector dot_operation term .

    +               reduce using rule 45 (expression -> vector dot_operation term .)
    -               reduce using rule 45 (expression -> vector dot_operation term .)
    /               reduce using rule 45 (expression -> vector dot_operation term .)
    *               reduce using rule 45 (expression -> vector dot_operation term .)
    EQL             reduce using rule 45 (expression -> vector dot_operation term .)
    NEQ             reduce using rule 45 (expression -> vector dot_operation term .)
    GT              reduce using rule 45 (expression -> vector dot_operation term .)
    GTE             reduce using rule 45 (expression -> vector dot_operation term .)
    LT              reduce using rule 45 (expression -> vector dot_operation term .)
    LTE             reduce using rule 45 (expression -> vector dot_operation term .)
    TRANSPOSE       reduce using rule 45 (expression -> vector dot_operation term .)
    ,               reduce using rule 45 (expression -> vector dot_operation term .)
    ;               reduce using rule 45 (expression -> vector dot_operation term .)
    :               reduce using rule 45 (expression -> vector dot_operation term .)
    ]               reduce using rule 45 (expression -> vector dot_operation term .)
    )               reduce using rule 45 (expression -> vector dot_operation term .)
    ID              reduce using rule 45 (expression -> vector dot_operation term .)
    PRINT           reduce using rule 45 (expression -> vector dot_operation term .)
    CONTINUE        reduce using rule 45 (expression -> vector dot_operation term .)
    BREAK           reduce using rule 45 (expression -> vector dot_operation term .)
    RETURN          reduce using rule 45 (expression -> vector dot_operation term .)
    IF              reduce using rule 45 (expression -> vector dot_operation term .)
    FOR             reduce using rule 45 (expression -> vector dot_operation term .)
    WHILE           reduce using rule 45 (expression -> vector dot_operation term .)
    {               reduce using rule 45 (expression -> vector dot_operation term .)


state 120

    (50) vector -> [ vector_contents ] .

    DOTADD          reduce using rule 50 (vector -> [ vector_contents ] .)
    DOTSUB          reduce using rule 50 (vector -> [ vector_contents ] .)
    DOTMUL          reduce using rule 50 (vector -> [ vector_contents ] .)
    DOTDIV          reduce using rule 50 (vector -> [ vector_contents ] .)
    +               reduce using rule 50 (vector -> [ vector_contents ] .)
    -               reduce using rule 50 (vector -> [ vector_contents ] .)
    /               reduce using rule 50 (vector -> [ vector_contents ] .)
    *               reduce using rule 50 (vector -> [ vector_contents ] .)
    EQL             reduce using rule 50 (vector -> [ vector_contents ] .)
    NEQ             reduce using rule 50 (vector -> [ vector_contents ] .)
    GT              reduce using rule 50 (vector -> [ vector_contents ] .)
    GTE             reduce using rule 50 (vector -> [ vector_contents ] .)
    LT              reduce using rule 50 (vector -> [ vector_contents ] .)
    LTE             reduce using rule 50 (vector -> [ vector_contents ] .)
    TRANSPOSE       reduce using rule 50 (vector -> [ vector_contents ] .)
    ,               reduce using rule 50 (vector -> [ vector_contents ] .)
    ;               reduce using rule 50 (vector -> [ vector_contents ] .)
    :               reduce using rule 50 (vector -> [ vector_contents ] .)
    ]               reduce using rule 50 (vector -> [ vector_contents ] .)
    )               reduce using rule 50 (vector -> [ vector_contents ] .)
    ID              reduce using rule 50 (vector -> [ vector_contents ] .)
    PRINT           reduce using rule 50 (vector -> [ vector_contents ] .)
    CONTINUE        reduce using rule 50 (vector -> [ vector_contents ] .)
    BREAK           reduce using rule 50 (vector -> [ vector_contents ] .)
    RETURN          reduce using rule 50 (vector -> [ vector_contents ] .)
    IF              reduce using rule 50 (vector -> [ vector_contents ] .)
    FOR             reduce using rule 50 (vector -> [ vector_contents ] .)
    WHILE           reduce using rule 50 (vector -> [ vector_contents ] .)
    {               reduce using rule 50 (vector -> [ vector_contents ] .)


state 121

    (52) vector_contents -> vector_contents , . vector_element
    (54) vector_element -> . term
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    ID              shift and go to state 82
    [               shift and go to state 52

    vector_element                 shift and go to state 129
    term                           shift and go to state 92
    vector                         shift and go to state 81

state 122

    (63) if -> IF condition nested ELSE . nested
    (65) nested -> . statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if
    (10) statement -> . for
    (11) statement -> . while
    (12) statement -> . nested_statements
    (21) assignment -> . ID assign_symbol expression
    (22) assignment -> . ID slice assign_symbol expression
    (18) print -> . PRINT coma_separated
    (17) continue -> . CONTINUE
    (15) break -> . BREAK
    (16) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (13) for -> . FOR ID ASSIGN expression : expression nested
    (14) while -> . WHILE condition nested
    (66) nested_statements -> . nested_empty
    (67) nested_statements -> . nested_statements_list
    (69) nested_empty -> . { }
    (68) nested_statements_list -> . { statements }

    ID              shift and go to state 13
    PRINT           shift and go to state 14
    CONTINUE        shift and go to state 15
    BREAK           shift and go to state 16
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 20
    {               shift and go to state 23

    nested                         shift and go to state 130
    statement                      shift and go to state 94
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if                             shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    nested_statements              shift and go to state 12
    nested_empty                   shift and go to state 21
    nested_statements_list         shift and go to state 22

state 123

    (64) condition -> ( expression ) .

    ID              reduce using rule 64 (condition -> ( expression ) .)
    PRINT           reduce using rule 64 (condition -> ( expression ) .)
    CONTINUE        reduce using rule 64 (condition -> ( expression ) .)
    BREAK           reduce using rule 64 (condition -> ( expression ) .)
    RETURN          reduce using rule 64 (condition -> ( expression ) .)
    IF              reduce using rule 64 (condition -> ( expression ) .)
    FOR             reduce using rule 64 (condition -> ( expression ) .)
    WHILE           reduce using rule 64 (condition -> ( expression ) .)
    {               reduce using rule 64 (condition -> ( expression ) .)


state 124

    (13) for -> FOR ID ASSIGN expression . : expression nested
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    :               shift and go to state 131
    +               shift and go to state 67
    -               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    EQL             shift and go to state 71
    NEQ             shift and go to state 72
    GT              shift and go to state 73
    GTE             shift and go to state 74
    LT              shift and go to state 75
    LTE             shift and go to state 76
    TRANSPOSE       shift and go to state 77


state 125

    (56) slice_contents -> slice_contents , range .

    ]               reduce using rule 56 (slice_contents -> slice_contents , range .)
    ,               reduce using rule 56 (slice_contents -> slice_contents , range .)


state 126

    (58) range -> expression : expression .
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    ]               reduce using rule 58 (range -> expression : expression .)
    ,               reduce using rule 58 (range -> expression : expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    EQL             shift and go to state 71
    NEQ             shift and go to state 72
    GT              shift and go to state 73
    GTE             shift and go to state 74
    LT              shift and go to state 75
    LTE             shift and go to state 76
    TRANSPOSE       shift and go to state 77


state 127

    (28) expression -> built_in_function ( expression_list ) .

    +               reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    -               reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    /               reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    *               reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    EQL             reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    NEQ             reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    GT              reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    GTE             reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    LT              reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    LTE             reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    TRANSPOSE       reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    ,               reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    ;               reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    :               reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    ]               reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    )               reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    ID              reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    PRINT           reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    CONTINUE        reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    BREAK           reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    RETURN          reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    IF              reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    FOR             reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    WHILE           reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    {               reduce using rule 28 (expression -> built_in_function ( expression_list ) .)


state 128

    (29) expression_list -> expression_list , . expression
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (76) built_in_function -> . EYE
    (77) built_in_function -> . ONES
    (78) built_in_function -> . ZEROS
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 43
    ID              shift and go to state 44
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48
    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    [               shift and go to state 52

    expression                     shift and go to state 132
    built_in_function              shift and go to state 40
    term                           shift and go to state 42
    vector                         shift and go to state 45

state 129

    (52) vector_contents -> vector_contents , vector_element .

    ]               reduce using rule 52 (vector_contents -> vector_contents , vector_element .)
    ,               reduce using rule 52 (vector_contents -> vector_contents , vector_element .)


state 130

    (63) if -> IF condition nested ELSE nested .

    ID              reduce using rule 63 (if -> IF condition nested ELSE nested .)
    PRINT           reduce using rule 63 (if -> IF condition nested ELSE nested .)
    CONTINUE        reduce using rule 63 (if -> IF condition nested ELSE nested .)
    BREAK           reduce using rule 63 (if -> IF condition nested ELSE nested .)
    RETURN          reduce using rule 63 (if -> IF condition nested ELSE nested .)
    IF              reduce using rule 63 (if -> IF condition nested ELSE nested .)
    FOR             reduce using rule 63 (if -> IF condition nested ELSE nested .)
    WHILE           reduce using rule 63 (if -> IF condition nested ELSE nested .)
    {               reduce using rule 63 (if -> IF condition nested ELSE nested .)
    $end            reduce using rule 63 (if -> IF condition nested ELSE nested .)
    }               reduce using rule 63 (if -> IF condition nested ELSE nested .)
    ELSE            reduce using rule 63 (if -> IF condition nested ELSE nested .)


state 131

    (13) for -> FOR ID ASSIGN expression : . expression nested
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (76) built_in_function -> . EYE
    (77) built_in_function -> . ONES
    (78) built_in_function -> . ZEROS
    (70) term -> . ( expression )
    (71) term -> . vector
    (72) term -> . INTNUM
    (73) term -> . FLOATNUM
    (74) term -> . STR
    (75) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 43
    ID              shift and go to state 44
    EYE             shift and go to state 46
    ONES            shift and go to state 47
    ZEROS           shift and go to state 48
    (               shift and go to state 41
    INTNUM          shift and go to state 49
    FLOATNUM        shift and go to state 50
    STR             shift and go to state 51
    [               shift and go to state 52

    expression                     shift and go to state 133
    built_in_function              shift and go to state 40
    term                           shift and go to state 42
    vector                         shift and go to state 45

state 132

    (29) expression_list -> expression_list , expression .
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    )               reduce using rule 29 (expression_list -> expression_list , expression .)
    ,               reduce using rule 29 (expression_list -> expression_list , expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    EQL             shift and go to state 71
    NEQ             shift and go to state 72
    GT              shift and go to state 73
    GTE             shift and go to state 74
    LT              shift and go to state 75
    LTE             shift and go to state 76
    TRANSPOSE       shift and go to state 77


state 133

    (13) for -> FOR ID ASSIGN expression : expression . nested
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE
    (65) nested -> . statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if
    (10) statement -> . for
    (11) statement -> . while
    (12) statement -> . nested_statements
    (21) assignment -> . ID assign_symbol expression
    (22) assignment -> . ID slice assign_symbol expression
    (18) print -> . PRINT coma_separated
    (17) continue -> . CONTINUE
    (15) break -> . BREAK
    (16) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (13) for -> . FOR ID ASSIGN expression : expression nested
    (14) while -> . WHILE condition nested
    (66) nested_statements -> . nested_empty
    (67) nested_statements -> . nested_statements_list
    (69) nested_empty -> . { }
    (68) nested_statements_list -> . { statements }

    +               shift and go to state 67
    -               shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    EQL             shift and go to state 71
    NEQ             shift and go to state 72
    GT              shift and go to state 73
    GTE             shift and go to state 74
    LT              shift and go to state 75
    LTE             shift and go to state 76
    TRANSPOSE       shift and go to state 77
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    CONTINUE        shift and go to state 15
    BREAK           shift and go to state 16
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 20
    {               shift and go to state 23

    nested                         shift and go to state 134
    statement                      shift and go to state 94
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if                             shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    nested_statements              shift and go to state 12
    nested_empty                   shift and go to state 21
    nested_statements_list         shift and go to state 22

state 134

    (13) for -> FOR ID ASSIGN expression : expression nested .

    ID              reduce using rule 13 (for -> FOR ID ASSIGN expression : expression nested .)
    PRINT           reduce using rule 13 (for -> FOR ID ASSIGN expression : expression nested .)
    CONTINUE        reduce using rule 13 (for -> FOR ID ASSIGN expression : expression nested .)
    BREAK           reduce using rule 13 (for -> FOR ID ASSIGN expression : expression nested .)
    RETURN          reduce using rule 13 (for -> FOR ID ASSIGN expression : expression nested .)
    IF              reduce using rule 13 (for -> FOR ID ASSIGN expression : expression nested .)
    FOR             reduce using rule 13 (for -> FOR ID ASSIGN expression : expression nested .)
    WHILE           reduce using rule 13 (for -> FOR ID ASSIGN expression : expression nested .)
    {               reduce using rule 13 (for -> FOR ID ASSIGN expression : expression nested .)
    $end            reduce using rule 13 (for -> FOR ID ASSIGN expression : expression nested .)
    }               reduce using rule 13 (for -> FOR ID ASSIGN expression : expression nested .)
    ELSE            reduce using rule 13 (for -> FOR ID ASSIGN expression : expression nested .)

