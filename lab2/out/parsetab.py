
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "startnonassocEQLNEQGTGTELTLTEleft+-left/*leftTRANSPOSErightUMINUSnonassocIFxnonassocELSEADDASSIGN ASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQL EYE FLOATNUM FOR GT GTE ID IF INTNUM LT LTE MULTASSIGN NEQ ONES PRINT RETURN STR SUBASSIGN TRANSPOSE WHILE ZEROS\n        start : statements\n    \n        statements : statement\n                   | statements statement\n    \n        statement : assignment ';'\n                  | print ';'\n                  | continue ';'\n                  | break ';'\n                  | return ';'\n                  | if\n                  | for\n                  | while\n    \n        for : FOR ID ASSIGN expression ':' expression nested\n    \n        while : WHILE condition nested\n    \n        break : BREAK\n    \n        return : RETURN expression\n    \n        continue : CONTINUE\n    \n        print : PRINT coma_separated\n    \n        coma_separated : expression\n                       | coma_separated ',' expression\n    \n        assignment : ID assign_symbol expression\n    \n        assignment : ID slice assign_symbol expression\n    \n        assign_symbol : ASSIGN\n                      | SUBASSIGN\n                      | ADDASSIGN\n                      | DIVASSIGN\n                      | MULTASSIGN\n    \n        expression : built_in_function '(' term_list ')'\n    \n        term_list : term\n                  | term_list ',' term\n    \n        expression : term\n    \n        expression : expression '+' term\n                   | expression '-' term\n                   | expression '/' term\n                   | expression '*' term\n                   | expression EQL term\n                   | expression NEQ term\n                   | expression GT term\n                   | expression GTE term\n                   | expression LT term\n                   | expression LTE term\n    \n        expression : '-' term %prec UMINUS\n    \n        vector : ID TRANSPOSE\n               | vector TRANSPOSE\n    \n        expression : ID dot_operation term\n                   | vector dot_operation term\n    \n         dot_operation : DOTADD\n                       | DOTSUB\n                       | DOTMUL\n                       | DOTDIV\n    \n        vector : '[' vector_contents ']'\n    \n        vector_contents : vector_element\n                        | vector_contents ',' vector_element\n    \n        vector_element : term\n    \n        slice : '[' slice_contents ']'\n    \n        slice_contents : range\n                       | slice_contents ',' range\n    \n        range : term ':' term\n              | term ':'\n              | ':' term\n              | term\n    \n        if : IF condition nested %prec IFx\n           | IF condition nested ELSE nested\n    \n        condition : '(' expression ')'\n    \n        nested : '{' statements '}'\n               | statement\n    \n        term : '(' expression ')'\n             | vector\n             | INTNUM\n             | STR\n             | FLOATNUM\n             | ID\n    \n        built_in_function : EYE\n                          | ONES\n                          | ZEROS\n    "
    
_lr_action_items = {'ID':([0,2,3,9,10,11,13,16,18,20,21,22,23,24,25,26,28,29,30,31,32,33,37,38,39,40,41,45,46,47,48,50,51,53,55,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,87,88,89,91,92,95,96,99,100,101,102,103,104,105,106,107,108,111,112,113,114,115,116,117,118,122,123,125,126,127,129,130,],[12,12,-2,-9,-10,-11,40,40,52,-3,-4,-5,-6,-7,-8,40,-22,-23,-24,-25,-26,61,40,-30,61,-71,-67,-68,-69,-70,61,12,40,12,40,61,-67,-71,40,61,61,61,61,61,61,61,61,61,61,61,-41,61,-42,-46,-47,-48,-49,61,-43,-61,12,-65,40,-13,61,61,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-66,-44,-45,-50,61,12,12,-63,-27,61,-62,-64,40,12,-12,]),'PRINT':([0,2,3,9,10,11,20,21,22,23,24,25,38,40,41,45,46,47,50,53,60,61,75,77,83,87,88,89,92,99,100,101,102,103,104,105,106,107,108,111,112,113,114,116,117,118,122,125,126,129,130,],[13,13,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-30,-71,-67,-68,-69,-70,13,13,-67,-71,-41,-42,-43,-61,13,-65,-13,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-66,-44,-45,-50,13,13,-63,-27,-62,-64,13,-12,]),'CONTINUE':([0,2,3,9,10,11,20,21,22,23,24,25,38,40,41,45,46,47,50,53,60,61,75,77,83,87,88,89,92,99,100,101,102,103,104,105,106,107,108,111,112,113,114,116,117,118,122,125,126,129,130,],[14,14,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-30,-71,-67,-68,-69,-70,14,14,-67,-71,-41,-42,-43,-61,14,-65,-13,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-66,-44,-45,-50,14,14,-63,-27,-62,-64,14,-12,]),'BREAK':([0,2,3,9,10,11,20,21,22,23,24,25,38,40,41,45,46,47,50,53,60,61,75,77,83,87,88,89,92,99,100,101,102,103,104,105,106,107,108,111,112,113,114,116,117,118,122,125,126,129,130,],[15,15,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-30,-71,-67,-68,-69,-70,15,15,-67,-71,-41,-42,-43,-61,15,-65,-13,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-66,-44,-45,-50,15,15,-63,-27,-62,-64,15,-12,]),'RETURN':([0,2,3,9,10,11,20,21,22,23,24,25,38,40,41,45,46,47,50,53,60,61,75,77,83,87,88,89,92,99,100,101,102,103,104,105,106,107,108,111,112,113,114,116,117,118,122,125,126,129,130,],[16,16,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-30,-71,-67,-68,-69,-70,16,16,-67,-71,-41,-42,-43,-61,16,-65,-13,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-66,-44,-45,-50,16,16,-63,-27,-62,-64,16,-12,]),'IF':([0,2,3,9,10,11,20,21,22,23,24,25,38,40,41,45,46,47,50,53,60,61,75,77,83,87,88,89,92,99,100,101,102,103,104,105,106,107,108,111,112,113,114,116,117,118,122,125,126,129,130,],[17,17,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-30,-71,-67,-68,-69,-70,17,17,-67,-71,-41,-42,-43,-61,17,-65,-13,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-66,-44,-45,-50,17,17,-63,-27,-62,-64,17,-12,]),'FOR':([0,2,3,9,10,11,20,21,22,23,24,25,38,40,41,45,46,47,50,53,60,61,75,77,83,87,88,89,92,99,100,101,102,103,104,105,106,107,108,111,112,113,114,116,117,118,122,125,126,129,130,],[18,18,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-30,-71,-67,-68,-69,-70,18,18,-67,-71,-41,-42,-43,-61,18,-65,-13,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-66,-44,-45,-50,18,18,-63,-27,-62,-64,18,-12,]),'WHILE':([0,2,3,9,10,11,20,21,22,23,24,25,38,40,41,45,46,47,50,53,60,61,75,77,83,87,88,89,92,99,100,101,102,103,104,105,106,107,108,111,112,113,114,116,117,118,122,125,126,129,130,],[19,19,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-30,-71,-67,-68,-69,-70,19,19,-67,-71,-41,-42,-43,-61,19,-65,-13,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-66,-44,-45,-50,19,19,-63,-27,-62,-64,19,-12,]),'$end':([1,2,3,9,10,11,20,21,22,23,24,25,87,89,92,125,126,130,],[0,-1,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-61,-65,-13,-62,-64,-12,]),'}':([3,9,10,11,20,21,22,23,24,25,87,89,92,117,125,126,130,],[-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-61,-65,-13,126,-62,-64,-12,]),';':([4,5,6,7,8,14,15,34,35,38,40,41,45,46,47,49,54,60,61,75,77,83,93,98,99,100,101,102,103,104,105,106,107,108,111,112,113,114,122,],[21,22,23,24,25,-16,-14,-17,-18,-30,-71,-67,-68,-69,-70,-15,-20,-67,-71,-41,-42,-43,-21,-19,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-66,-44,-45,-50,-27,]),'ELSE':([9,10,11,21,22,23,24,25,87,89,92,125,126,130,],[-9,-10,-11,-4,-5,-6,-7,-8,116,-65,-13,-62,-64,-12,]),'ASSIGN':([12,27,52,94,],[28,28,91,-54,]),'SUBASSIGN':([12,27,94,],[29,29,-54,]),'ADDASSIGN':([12,27,94,],[30,30,-54,]),'DIVASSIGN':([12,27,94,],[31,31,-54,]),'MULTASSIGN':([12,27,94,],[32,32,-54,]),'[':([12,13,16,26,28,29,30,31,32,33,37,39,48,51,55,59,62,63,64,65,66,67,68,69,70,71,72,73,76,78,79,80,81,82,91,95,96,115,123,127,],[33,48,48,48,-22,-23,-24,-25,-26,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-46,-47,-48,-49,48,48,48,48,48,48,48,]),'-':([13,16,26,28,29,30,31,32,35,37,38,40,41,45,46,47,49,51,54,55,60,61,62,74,75,77,83,90,91,93,98,99,100,101,102,103,104,105,106,107,108,111,112,113,114,119,122,127,129,],[39,39,39,-22,-23,-24,-25,-26,64,39,-30,-71,-67,-68,-69,-70,64,39,64,39,-67,-71,39,64,-41,-42,-43,64,39,64,64,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-66,-44,-45,-50,64,-27,39,64,]),'EYE':([13,16,26,28,29,30,31,32,37,51,55,62,91,127,],[42,42,42,-22,-23,-24,-25,-26,42,42,42,42,42,42,]),'ONES':([13,16,26,28,29,30,31,32,37,51,55,62,91,127,],[43,43,43,-22,-23,-24,-25,-26,43,43,43,43,43,43,]),'ZEROS':([13,16,26,28,29,30,31,32,37,51,55,62,91,127,],[44,44,44,-22,-23,-24,-25,-26,44,44,44,44,44,44,]),'(':([13,16,17,19,26,28,29,30,31,32,33,36,37,39,42,43,44,48,51,55,59,62,63,64,65,66,67,68,69,70,71,72,73,76,78,79,80,81,82,91,95,96,115,123,127,],[37,37,51,51,37,-22,-23,-24,-25,-26,37,73,37,37,-72,-73,-74,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-46,-47,-48,-49,37,37,37,37,37,37,37,]),'INTNUM':([13,16,26,28,29,30,31,32,33,37,39,48,51,55,59,62,63,64,65,66,67,68,69,70,71,72,73,76,78,79,80,81,82,91,95,96,115,123,127,],[45,45,45,-22,-23,-24,-25,-26,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-46,-47,-48,-49,45,45,45,45,45,45,45,]),'STR':([13,16,26,28,29,30,31,32,33,37,39,48,51,55,59,62,63,64,65,66,67,68,69,70,71,72,73,76,78,79,80,81,82,91,95,96,115,123,127,],[46,46,46,-22,-23,-24,-25,-26,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-46,-47,-48,-49,46,46,46,46,46,46,46,]),'FLOATNUM':([13,16,26,28,29,30,31,32,33,37,39,48,51,55,59,62,63,64,65,66,67,68,69,70,71,72,73,76,78,79,80,81,82,91,95,96,115,123,127,],[47,47,47,-22,-23,-24,-25,-26,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-46,-47,-48,-49,47,47,47,47,47,47,47,]),':':([33,38,40,41,45,46,47,58,60,61,75,77,83,95,99,100,101,102,103,104,105,106,107,108,111,112,113,114,119,122,],[59,-30,-71,-67,-68,-69,-70,96,-67,-71,-41,-42,-43,59,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-66,-44,-45,-50,127,-27,]),',':([34,35,38,40,41,45,46,47,56,57,58,60,61,75,77,83,84,85,86,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,120,121,122,124,128,],[62,-18,-30,-71,-67,-68,-69,-70,95,-55,-60,-67,-71,-41,-42,-43,115,-51,-53,-58,-59,-19,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,123,-28,-66,-44,-45,-50,-56,-57,-27,-52,-29,]),'+':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,90,93,98,99,100,101,102,103,104,105,106,107,108,111,112,113,114,119,122,129,],[63,-30,-71,-67,-68,-69,-70,63,63,-67,-71,63,-41,-42,-43,63,63,63,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-66,-44,-45,-50,63,-27,63,]),'/':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,90,93,98,99,100,101,102,103,104,105,106,107,108,111,112,113,114,119,122,129,],[65,-30,-71,-67,-68,-69,-70,65,65,-67,-71,65,-41,-42,-43,65,65,65,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-66,-44,-45,-50,65,-27,65,]),'*':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,90,93,98,99,100,101,102,103,104,105,106,107,108,111,112,113,114,119,122,129,],[66,-30,-71,-67,-68,-69,-70,66,66,-67,-71,66,-41,-42,-43,66,66,66,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-66,-44,-45,-50,66,-27,66,]),'EQL':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,90,93,98,99,100,101,102,103,104,105,106,107,108,111,112,113,114,119,122,129,],[67,-30,-71,-67,-68,-69,-70,67,67,-67,-71,67,-41,-42,-43,67,67,67,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-66,-44,-45,-50,67,-27,67,]),'NEQ':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,90,93,98,99,100,101,102,103,104,105,106,107,108,111,112,113,114,119,122,129,],[68,-30,-71,-67,-68,-69,-70,68,68,-67,-71,68,-41,-42,-43,68,68,68,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-66,-44,-45,-50,68,-27,68,]),'GT':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,90,93,98,99,100,101,102,103,104,105,106,107,108,111,112,113,114,119,122,129,],[69,-30,-71,-67,-68,-69,-70,69,69,-67,-71,69,-41,-42,-43,69,69,69,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-66,-44,-45,-50,69,-27,69,]),'GTE':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,90,93,98,99,100,101,102,103,104,105,106,107,108,111,112,113,114,119,122,129,],[70,-30,-71,-67,-68,-69,-70,70,70,-67,-71,70,-41,-42,-43,70,70,70,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-66,-44,-45,-50,70,-27,70,]),'LT':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,90,93,98,99,100,101,102,103,104,105,106,107,108,111,112,113,114,119,122,129,],[71,-30,-71,-67,-68,-69,-70,71,71,-67,-71,71,-41,-42,-43,71,71,71,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-66,-44,-45,-50,71,-27,71,]),'LTE':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,90,93,98,99,100,101,102,103,104,105,106,107,108,111,112,113,114,119,122,129,],[72,-30,-71,-67,-68,-69,-70,72,72,-67,-71,72,-41,-42,-43,72,72,72,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-66,-44,-45,-50,72,-27,72,]),')':([38,40,41,45,46,47,60,61,74,75,77,83,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,122,128,],[-30,-71,-67,-68,-69,-70,-67,-71,111,-41,-42,-43,118,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,122,-28,-66,-44,-45,-50,-27,-29,]),'{':([38,40,41,45,46,47,50,53,60,61,75,77,83,99,100,101,102,103,104,105,106,107,108,111,112,113,114,116,118,122,129,],[-30,-71,-67,-68,-69,-70,88,88,-67,-71,-41,-42,-43,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-66,-44,-45,-50,88,-63,-27,88,]),'TRANSPOSE':([40,41,60,61,77,83,114,],[77,83,83,77,-42,-43,-50,]),'DOTADD':([40,41,77,83,114,],[78,78,-42,-43,-50,]),'DOTSUB':([40,41,77,83,114,],[79,79,-42,-43,-50,]),'DOTMUL':([40,41,77,83,114,],[80,80,-42,-43,-50,]),'DOTDIV':([40,41,77,83,114,],[81,81,-42,-43,-50,]),']':([45,46,47,56,57,58,60,61,77,83,84,85,86,96,97,111,114,120,121,124,],[-68,-69,-70,94,-55,-60,-67,-71,-42,-43,114,-51,-53,-58,-59,-66,-50,-56,-57,-52,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'statements':([0,88,],[2,117,]),'statement':([0,2,50,53,88,116,117,129,],[3,20,89,89,3,89,20,89,]),'assignment':([0,2,50,53,88,116,117,129,],[4,4,4,4,4,4,4,4,]),'print':([0,2,50,53,88,116,117,129,],[5,5,5,5,5,5,5,5,]),'continue':([0,2,50,53,88,116,117,129,],[6,6,6,6,6,6,6,6,]),'break':([0,2,50,53,88,116,117,129,],[7,7,7,7,7,7,7,7,]),'return':([0,2,50,53,88,116,117,129,],[8,8,8,8,8,8,8,8,]),'if':([0,2,50,53,88,116,117,129,],[9,9,9,9,9,9,9,9,]),'for':([0,2,50,53,88,116,117,129,],[10,10,10,10,10,10,10,10,]),'while':([0,2,50,53,88,116,117,129,],[11,11,11,11,11,11,11,11,]),'assign_symbol':([12,27,],[26,55,]),'slice':([12,],[27,]),'coma_separated':([13,],[34,]),'expression':([13,16,26,37,51,55,62,91,127,],[35,49,54,74,90,93,98,119,129,]),'built_in_function':([13,16,26,37,51,55,62,91,127,],[36,36,36,36,36,36,36,36,36,]),'term':([13,16,26,33,37,39,48,51,55,59,62,63,64,65,66,67,68,69,70,71,72,73,76,82,91,95,96,115,123,127,],[38,38,38,58,38,75,86,38,38,97,38,99,100,101,102,103,104,105,106,107,108,110,112,113,38,58,121,86,128,38,]),'vector':([13,16,26,33,37,39,48,51,55,59,62,63,64,65,66,67,68,69,70,71,72,73,76,82,91,95,96,115,123,127,],[41,41,41,60,41,60,60,41,41,60,41,60,60,60,60,60,60,60,60,60,60,60,60,60,41,60,60,60,60,41,]),'condition':([17,19,],[50,53,]),'slice_contents':([33,],[56,]),'range':([33,95,],[57,120,]),'dot_operation':([40,41,],[76,82,]),'vector_contents':([48,],[84,]),'vector_element':([48,115,],[85,124,]),'nested':([50,53,116,129,],[87,92,125,130,]),'term_list':([73,],[109,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> statements','start',1,'p_start','Parser.py',32),
  ('statements -> statement','statements',1,'p_statements','Parser.py',39),
  ('statements -> statements statement','statements',2,'p_statements','Parser.py',40),
  ('statement -> assignment ;','statement',2,'p_statement','Parser.py',47),
  ('statement -> print ;','statement',2,'p_statement','Parser.py',48),
  ('statement -> continue ;','statement',2,'p_statement','Parser.py',49),
  ('statement -> break ;','statement',2,'p_statement','Parser.py',50),
  ('statement -> return ;','statement',2,'p_statement','Parser.py',51),
  ('statement -> if','statement',1,'p_statement','Parser.py',52),
  ('statement -> for','statement',1,'p_statement','Parser.py',53),
  ('statement -> while','statement',1,'p_statement','Parser.py',54),
  ('for -> FOR ID ASSIGN expression : expression nested','for',7,'p_for','Parser.py',61),
  ('while -> WHILE condition nested','while',3,'p_while','Parser.py',69),
  ('break -> BREAK','break',1,'p_break','Parser.py',77),
  ('return -> RETURN expression','return',2,'p_return','Parser.py',85),
  ('continue -> CONTINUE','continue',1,'p_continue','Parser.py',93),
  ('print -> PRINT coma_separated','print',2,'p_print','Parser.py',101),
  ('coma_separated -> expression','coma_separated',1,'p_coma_separated','Parser.py',109),
  ('coma_separated -> coma_separated , expression','coma_separated',3,'p_coma_separated','Parser.py',110),
  ('assignment -> ID assign_symbol expression','assignment',3,'p_assignment','Parser.py',117),
  ('assignment -> ID slice assign_symbol expression','assignment',4,'p_slice_assignment','Parser.py',124),
  ('assign_symbol -> ASSIGN','assign_symbol',1,'p_assign','Parser.py',131),
  ('assign_symbol -> SUBASSIGN','assign_symbol',1,'p_assign','Parser.py',132),
  ('assign_symbol -> ADDASSIGN','assign_symbol',1,'p_assign','Parser.py',133),
  ('assign_symbol -> DIVASSIGN','assign_symbol',1,'p_assign','Parser.py',134),
  ('assign_symbol -> MULTASSIGN','assign_symbol',1,'p_assign','Parser.py',135),
  ('expression -> built_in_function ( term_list )','expression',4,'p_expression_built_in_function','Parser.py',142),
  ('term_list -> term','term_list',1,'p_term_list','Parser.py',149),
  ('term_list -> term_list , term','term_list',3,'p_term_list','Parser.py',150),
  ('expression -> term','expression',1,'p_expression_term','Parser.py',156),
  ('expression -> expression + term','expression',3,'p_expression_binary_ops','Parser.py',163),
  ('expression -> expression - term','expression',3,'p_expression_binary_ops','Parser.py',164),
  ('expression -> expression / term','expression',3,'p_expression_binary_ops','Parser.py',165),
  ('expression -> expression * term','expression',3,'p_expression_binary_ops','Parser.py',166),
  ('expression -> expression EQL term','expression',3,'p_expression_binary_ops','Parser.py',167),
  ('expression -> expression NEQ term','expression',3,'p_expression_binary_ops','Parser.py',168),
  ('expression -> expression GT term','expression',3,'p_expression_binary_ops','Parser.py',169),
  ('expression -> expression GTE term','expression',3,'p_expression_binary_ops','Parser.py',170),
  ('expression -> expression LT term','expression',3,'p_expression_binary_ops','Parser.py',171),
  ('expression -> expression LTE term','expression',3,'p_expression_binary_ops','Parser.py',172),
  ('expression -> - term','expression',2,'p_expression_unary','Parser.py',179),
  ('vector -> ID TRANSPOSE','vector',2,'p_vector_transpose','Parser.py',186),
  ('vector -> vector TRANSPOSE','vector',2,'p_vector_transpose','Parser.py',187),
  ('expression -> ID dot_operation term','expression',3,'p_expression_suffix_binary_ops','Parser.py',194),
  ('expression -> vector dot_operation term','expression',3,'p_expression_suffix_binary_ops','Parser.py',195),
  ('dot_operation -> DOTADD','dot_operation',1,'p_dot_operation','Parser.py',202),
  ('dot_operation -> DOTSUB','dot_operation',1,'p_dot_operation','Parser.py',203),
  ('dot_operation -> DOTMUL','dot_operation',1,'p_dot_operation','Parser.py',204),
  ('dot_operation -> DOTDIV','dot_operation',1,'p_dot_operation','Parser.py',205),
  ('vector -> [ vector_contents ]','vector',3,'p_vector','Parser.py',212),
  ('vector_contents -> vector_element','vector_contents',1,'p_vector_contents','Parser.py',219),
  ('vector_contents -> vector_contents , vector_element','vector_contents',3,'p_vector_contents','Parser.py',220),
  ('vector_element -> term','vector_element',1,'p_vector_element','Parser.py',227),
  ('slice -> [ slice_contents ]','slice',3,'p_slice','Parser.py',234),
  ('slice_contents -> range','slice_contents',1,'p_slice_contents','Parser.py',241),
  ('slice_contents -> slice_contents , range','slice_contents',3,'p_slice_contents','Parser.py',242),
  ('range -> term : term','range',3,'p_range','Parser.py',249),
  ('range -> term :','range',2,'p_range','Parser.py',250),
  ('range -> : term','range',2,'p_range','Parser.py',251),
  ('range -> term','range',1,'p_range','Parser.py',252),
  ('if -> IF condition nested','if',3,'p_if','Parser.py',263),
  ('if -> IF condition nested ELSE nested','if',5,'p_if','Parser.py',264),
  ('condition -> ( expression )','condition',3,'p_condition','Parser.py',272),
  ('nested -> { statements }','nested',3,'p_nested','Parser.py',278),
  ('nested -> statement','nested',1,'p_nested','Parser.py',279),
  ('term -> ( expression )','term',3,'p_term','Parser.py',286),
  ('term -> vector','term',1,'p_term','Parser.py',287),
  ('term -> INTNUM','term',1,'p_term','Parser.py',288),
  ('term -> STR','term',1,'p_term','Parser.py',289),
  ('term -> FLOATNUM','term',1,'p_term','Parser.py',290),
  ('term -> ID','term',1,'p_term','Parser.py',291),
  ('built_in_function -> EYE','built_in_function',1,'p_built_in_function','Parser.py',299),
  ('built_in_function -> ONES','built_in_function',1,'p_built_in_function','Parser.py',300),
  ('built_in_function -> ZEROS','built_in_function',1,'p_built_in_function','Parser.py',301),
]
