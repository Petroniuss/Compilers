
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "startnonassocEQLNEQGTGTELTLTEleft+-left/*rightUMINUSnonassocIFxnonassocELSEleftTRANSPOSEADDASSIGN ASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQL EYE FLOATNUM FOR GT GTE ID IF INTNUM LT LTE MULTASSIGN NEQ ONES PRINT RETURN STR SUBASSIGN TRANSPOSE WHILE ZEROS\n        start : statements\n    \n        statements : statements_list \n    \n        statements_list : statements_list statement\n    \n        statements_list : statement\n    \n        statement : assignment ';'\n                  | print ';'\n                  | continue ';'\n                  | break ';'\n                  | return ';'\n                  | if\n                  | for\n                  | while\n    \n        for : FOR ID ASSIGN expression ':' expression nested\n    \n        while : WHILE condition nested\n    \n        break : BREAK\n    \n        return : RETURN expression\n    \n        continue : CONTINUE\n    \n        print : PRINT coma_separated\n    \n        coma_separated : coma_separated ',' expression\n    \n        coma_separated : expression\n    \n        assignment : ID assign_symbol expression\n    \n        assignment : ID slice assign_symbol expression\n    \n        assign_symbol : ASSIGN\n                      | SUBASSIGN\n                      | ADDASSIGN\n                      | DIVASSIGN\n                      | MULTASSIGN\n    \n        expression : built_in_function '(' expression_list ')'\n    \n        expression_list : expression_list ',' expression\n    \n        expression_list : expression\n    \n        expression : term\n    \n        expression : expression '+' term\n                   | expression '-' term\n                   | expression '/' term\n                   | expression '*' term\n    \n        expression : expression EQL term\n                   | expression NEQ term\n                   | expression GT term\n                   | expression GTE term\n                   | expression LT term\n                   | expression LTE term\n    \n        expression : '-' term %prec UMINUS\n    \n        expression : expression TRANSPOSE\n    \n        expression : ID dot_operation term\n    \n        expression : vector dot_operation term\n    \n         dot_operation : DOTADD\n                       | DOTSUB\n                       | DOTMUL\n                       | DOTDIV\n    \n        vector : '[' vector_contents ']'\n    \n        vector : '[' ']'\n    \n        vector_contents : vector_contents ',' vector_element\n    \n        vector_contents : vector_element\n    \n        vector_element : term\n    \n        slice : '[' slice_contents ']'\n    \n        slice_contents : slice_contents ',' range\n    \n        slice_contents : range\n    \n        range : expression ':' expression\n    \n        range : expression ':'\n    \n        range : ':' expression\n    \n        range : expression\n    \n        if : IF condition nested %prec IFx\n    \n        if : IF condition nested ELSE nested\n    \n        condition : '(' expression ')'\n    \n        nested : '{' statements_list '}'\n               | statement\n    \n        term : '(' expression ')'\n    \n        term : vector\n    \n        term : INTNUM\n    \n        term : FLOATNUM\n    \n        term : STR\n    \n        term : ID\n    \n        built_in_function : EYE\n                          | ONES\n                          | ZEROS\n    "
    
_lr_action_items = {'ID':([0,3,4,10,11,12,14,17,19,21,22,23,24,25,26,27,29,30,31,32,33,34,38,39,40,41,42,46,47,48,49,51,52,54,56,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,85,88,89,90,92,93,96,97,100,101,102,103,104,105,106,107,108,109,112,113,114,115,116,117,118,119,123,124,126,127,128,130,131,],[13,13,-4,-10,-11,-12,41,41,53,-3,-5,-6,-7,-8,-9,41,-23,-24,-25,-26,-27,41,41,-31,77,-72,-68,-69,-70,-71,77,13,41,13,41,41,41,77,77,77,77,77,77,77,77,77,77,-43,41,-42,-68,-72,77,-46,-47,-48,-49,77,-51,-62,13,-66,41,-14,41,41,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-67,-44,-45,-50,77,13,13,-64,-28,41,-63,-65,41,13,-13,]),'PRINT':([0,3,4,10,11,12,21,22,23,24,25,26,39,41,42,46,47,48,51,54,72,75,76,77,85,88,89,90,93,100,101,102,103,104,105,106,107,108,109,112,113,114,115,117,118,119,123,126,127,130,131,],[14,14,-4,-10,-11,-12,-3,-5,-6,-7,-8,-9,-31,-72,-68,-69,-70,-71,14,14,-43,-42,-68,-72,-51,-62,14,-66,-14,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-67,-44,-45,-50,14,14,-64,-28,-63,-65,14,-13,]),'CONTINUE':([0,3,4,10,11,12,21,22,23,24,25,26,39,41,42,46,47,48,51,54,72,75,76,77,85,88,89,90,93,100,101,102,103,104,105,106,107,108,109,112,113,114,115,117,118,119,123,126,127,130,131,],[15,15,-4,-10,-11,-12,-3,-5,-6,-7,-8,-9,-31,-72,-68,-69,-70,-71,15,15,-43,-42,-68,-72,-51,-62,15,-66,-14,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-67,-44,-45,-50,15,15,-64,-28,-63,-65,15,-13,]),'BREAK':([0,3,4,10,11,12,21,22,23,24,25,26,39,41,42,46,47,48,51,54,72,75,76,77,85,88,89,90,93,100,101,102,103,104,105,106,107,108,109,112,113,114,115,117,118,119,123,126,127,130,131,],[16,16,-4,-10,-11,-12,-3,-5,-6,-7,-8,-9,-31,-72,-68,-69,-70,-71,16,16,-43,-42,-68,-72,-51,-62,16,-66,-14,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-67,-44,-45,-50,16,16,-64,-28,-63,-65,16,-13,]),'RETURN':([0,3,4,10,11,12,21,22,23,24,25,26,39,41,42,46,47,48,51,54,72,75,76,77,85,88,89,90,93,100,101,102,103,104,105,106,107,108,109,112,113,114,115,117,118,119,123,126,127,130,131,],[17,17,-4,-10,-11,-12,-3,-5,-6,-7,-8,-9,-31,-72,-68,-69,-70,-71,17,17,-43,-42,-68,-72,-51,-62,17,-66,-14,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-67,-44,-45,-50,17,17,-64,-28,-63,-65,17,-13,]),'IF':([0,3,4,10,11,12,21,22,23,24,25,26,39,41,42,46,47,48,51,54,72,75,76,77,85,88,89,90,93,100,101,102,103,104,105,106,107,108,109,112,113,114,115,117,118,119,123,126,127,130,131,],[18,18,-4,-10,-11,-12,-3,-5,-6,-7,-8,-9,-31,-72,-68,-69,-70,-71,18,18,-43,-42,-68,-72,-51,-62,18,-66,-14,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-67,-44,-45,-50,18,18,-64,-28,-63,-65,18,-13,]),'FOR':([0,3,4,10,11,12,21,22,23,24,25,26,39,41,42,46,47,48,51,54,72,75,76,77,85,88,89,90,93,100,101,102,103,104,105,106,107,108,109,112,113,114,115,117,118,119,123,126,127,130,131,],[19,19,-4,-10,-11,-12,-3,-5,-6,-7,-8,-9,-31,-72,-68,-69,-70,-71,19,19,-43,-42,-68,-72,-51,-62,19,-66,-14,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-67,-44,-45,-50,19,19,-64,-28,-63,-65,19,-13,]),'WHILE':([0,3,4,10,11,12,21,22,23,24,25,26,39,41,42,46,47,48,51,54,72,75,76,77,85,88,89,90,93,100,101,102,103,104,105,106,107,108,109,112,113,114,115,117,118,119,123,126,127,130,131,],[20,20,-4,-10,-11,-12,-3,-5,-6,-7,-8,-9,-31,-72,-68,-69,-70,-71,20,20,-43,-42,-68,-72,-51,-62,20,-66,-14,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-67,-44,-45,-50,20,20,-64,-28,-63,-65,20,-13,]),'$end':([1,2,3,4,10,11,12,21,22,23,24,25,26,88,90,93,126,127,131,],[0,-1,-2,-4,-10,-11,-12,-3,-5,-6,-7,-8,-9,-62,-66,-14,-63,-65,-13,]),'}':([4,10,11,12,21,22,23,24,25,26,88,90,93,118,126,127,131,],[-4,-10,-11,-12,-3,-5,-6,-7,-8,-9,-62,-66,-14,127,-63,-65,-13,]),';':([5,6,7,8,9,15,16,35,36,39,41,42,46,47,48,50,55,72,75,76,77,85,94,99,100,101,102,103,104,105,106,107,108,109,112,113,114,115,123,],[22,23,24,25,26,-17,-15,-18,-20,-31,-72,-68,-69,-70,-71,-16,-21,-43,-42,-68,-72,-51,-22,-19,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-67,-44,-45,-50,-28,]),'ELSE':([10,11,12,22,23,24,25,26,88,90,93,126,127,131,],[-10,-11,-12,-5,-6,-7,-8,-9,117,-66,-14,-63,-65,-13,]),'ASSIGN':([13,28,53,95,],[29,29,92,-55,]),'SUBASSIGN':([13,28,95,],[30,30,-55,]),'ADDASSIGN':([13,28,95,],[31,31,-55,]),'DIVASSIGN':([13,28,95,],[32,32,-55,]),'MULTASSIGN':([13,28,95,],[33,33,-55,]),'[':([13,14,17,27,29,30,31,32,33,34,38,40,49,52,56,60,61,62,63,64,65,66,67,68,69,70,71,73,78,79,80,81,82,83,92,96,97,116,124,128,],[34,49,49,49,-23,-24,-25,-26,-27,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-46,-47,-48,-49,49,49,49,49,49,49,49,]),'-':([14,17,27,29,30,31,32,33,34,36,38,39,41,42,46,47,48,50,52,55,56,59,60,61,72,73,74,75,76,77,85,91,92,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,114,115,120,122,123,124,128,129,130,],[40,40,40,-23,-24,-25,-26,-27,40,63,40,-31,-72,-68,-69,-70,-71,63,40,63,40,63,40,40,-43,40,63,-42,-68,-72,-51,63,40,63,40,40,63,63,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,63,-67,-44,-45,-50,63,63,-28,40,40,63,63,]),'EYE':([14,17,27,29,30,31,32,33,34,38,52,56,60,61,73,92,96,97,124,128,],[43,43,43,-23,-24,-25,-26,-27,43,43,43,43,43,43,43,43,43,43,43,43,]),'ONES':([14,17,27,29,30,31,32,33,34,38,52,56,60,61,73,92,96,97,124,128,],[44,44,44,-23,-24,-25,-26,-27,44,44,44,44,44,44,44,44,44,44,44,44,]),'ZEROS':([14,17,27,29,30,31,32,33,34,38,52,56,60,61,73,92,96,97,124,128,],[45,45,45,-23,-24,-25,-26,-27,45,45,45,45,45,45,45,45,45,45,45,45,]),'(':([14,17,18,20,27,29,30,31,32,33,34,37,38,40,43,44,45,49,52,56,60,61,62,63,64,65,66,67,68,69,70,71,73,78,79,80,81,82,83,92,96,97,116,124,128,],[38,38,52,52,38,-23,-24,-25,-26,-27,38,73,38,38,-73,-74,-75,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-46,-47,-48,-49,38,38,38,38,38,38,38,]),'INTNUM':([14,17,27,29,30,31,32,33,34,38,40,49,52,56,60,61,62,63,64,65,66,67,68,69,70,71,73,78,79,80,81,82,83,92,96,97,116,124,128,],[46,46,46,-23,-24,-25,-26,-27,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-46,-47,-48,-49,46,46,46,46,46,46,46,]),'FLOATNUM':([14,17,27,29,30,31,32,33,34,38,40,49,52,56,60,61,62,63,64,65,66,67,68,69,70,71,73,78,79,80,81,82,83,92,96,97,116,124,128,],[47,47,47,-23,-24,-25,-26,-27,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-46,-47,-48,-49,47,47,47,47,47,47,47,]),'STR':([14,17,27,29,30,31,32,33,34,38,40,49,52,56,60,61,62,63,64,65,66,67,68,69,70,71,73,78,79,80,81,82,83,92,96,97,116,124,128,],[48,48,48,-23,-24,-25,-26,-27,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-46,-47,-48,-49,48,48,48,48,48,48,48,]),':':([34,39,41,42,46,47,48,59,72,75,76,77,85,96,100,101,102,103,104,105,106,107,108,109,112,113,114,115,120,123,],[60,-31,-72,-68,-69,-70,-71,97,-43,-42,-68,-72,-51,60,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-67,-44,-45,-50,128,-28,]),',':([35,36,39,41,42,46,47,48,57,58,59,72,75,76,77,84,85,86,87,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,121,122,123,125,129,],[61,-20,-31,-72,-68,-69,-70,-71,96,-57,-61,-43,-42,-68,-72,116,-51,-53,-54,-59,-60,-19,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,124,-30,-67,-44,-45,-50,-56,-58,-28,-52,-29,]),'+':([36,39,41,42,46,47,48,50,55,59,72,74,75,76,77,85,91,94,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,114,115,120,122,123,129,130,],[62,-31,-72,-68,-69,-70,-71,62,62,62,-43,62,-42,-68,-72,-51,62,62,62,62,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,62,-67,-44,-45,-50,62,62,-28,62,62,]),'/':([36,39,41,42,46,47,48,50,55,59,72,74,75,76,77,85,91,94,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,114,115,120,122,123,129,130,],[64,-31,-72,-68,-69,-70,-71,64,64,64,-43,64,-42,-68,-72,-51,64,64,64,64,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,64,-67,-44,-45,-50,64,64,-28,64,64,]),'*':([36,39,41,42,46,47,48,50,55,59,72,74,75,76,77,85,91,94,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,114,115,120,122,123,129,130,],[65,-31,-72,-68,-69,-70,-71,65,65,65,-43,65,-42,-68,-72,-51,65,65,65,65,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,65,-67,-44,-45,-50,65,65,-28,65,65,]),'EQL':([36,39,41,42,46,47,48,50,55,59,72,74,75,76,77,85,91,94,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,114,115,120,122,123,129,130,],[66,-31,-72,-68,-69,-70,-71,66,66,66,-43,66,-42,-68,-72,-51,66,66,66,66,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,66,-67,-44,-45,-50,66,66,-28,66,66,]),'NEQ':([36,39,41,42,46,47,48,50,55,59,72,74,75,76,77,85,91,94,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,114,115,120,122,123,129,130,],[67,-31,-72,-68,-69,-70,-71,67,67,67,-43,67,-42,-68,-72,-51,67,67,67,67,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,67,-67,-44,-45,-50,67,67,-28,67,67,]),'GT':([36,39,41,42,46,47,48,50,55,59,72,74,75,76,77,85,91,94,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,114,115,120,122,123,129,130,],[68,-31,-72,-68,-69,-70,-71,68,68,68,-43,68,-42,-68,-72,-51,68,68,68,68,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,68,-67,-44,-45,-50,68,68,-28,68,68,]),'GTE':([36,39,41,42,46,47,48,50,55,59,72,74,75,76,77,85,91,94,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,114,115,120,122,123,129,130,],[69,-31,-72,-68,-69,-70,-71,69,69,69,-43,69,-42,-68,-72,-51,69,69,69,69,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,69,-67,-44,-45,-50,69,69,-28,69,69,]),'LT':([36,39,41,42,46,47,48,50,55,59,72,74,75,76,77,85,91,94,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,114,115,120,122,123,129,130,],[70,-31,-72,-68,-69,-70,-71,70,70,70,-43,70,-42,-68,-72,-51,70,70,70,70,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,70,-67,-44,-45,-50,70,70,-28,70,70,]),'LTE':([36,39,41,42,46,47,48,50,55,59,72,74,75,76,77,85,91,94,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,114,115,120,122,123,129,130,],[71,-31,-72,-68,-69,-70,-71,71,71,71,-43,71,-42,-68,-72,-51,71,71,71,71,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,71,-67,-44,-45,-50,71,71,-28,71,71,]),'TRANSPOSE':([36,39,41,42,46,47,48,50,55,59,72,74,75,76,77,85,91,94,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,114,115,120,122,123,129,130,],[72,-31,-72,-68,-69,-70,-71,72,72,72,-43,72,-42,-68,-72,-51,72,72,72,72,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,72,-67,-44,-45,-50,72,72,-28,72,72,]),']':([39,41,42,46,47,48,49,57,58,59,72,75,76,77,84,85,86,87,97,98,100,101,102,103,104,105,106,107,108,109,112,113,114,115,121,122,123,125,],[-31,-72,-68,-69,-70,-71,85,95,-57,-61,-43,-42,-68,-72,115,-51,-53,-54,-59,-60,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-67,-44,-45,-50,-56,-58,-28,-52,]),')':([39,41,42,46,47,48,72,74,75,76,77,85,91,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,123,129,],[-31,-72,-68,-69,-70,-71,-43,112,-42,-68,-72,-51,119,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,123,-30,-67,-44,-45,-50,-28,-29,]),'{':([39,41,42,46,47,48,51,54,72,75,76,77,85,100,101,102,103,104,105,106,107,108,109,112,113,114,115,117,119,123,130,],[-31,-72,-68,-69,-70,-71,89,89,-43,-42,-68,-72,-51,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-67,-44,-45,-50,89,-64,-28,89,]),'DOTADD':([41,42,85,115,],[79,79,-51,-50,]),'DOTSUB':([41,42,85,115,],[80,80,-51,-50,]),'DOTMUL':([41,42,85,115,],[81,81,-51,-50,]),'DOTDIV':([41,42,85,115,],[82,82,-51,-50,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'statements':([0,],[2,]),'statements_list':([0,89,],[3,118,]),'statement':([0,3,51,54,89,117,118,130,],[4,21,90,90,4,90,21,90,]),'assignment':([0,3,51,54,89,117,118,130,],[5,5,5,5,5,5,5,5,]),'print':([0,3,51,54,89,117,118,130,],[6,6,6,6,6,6,6,6,]),'continue':([0,3,51,54,89,117,118,130,],[7,7,7,7,7,7,7,7,]),'break':([0,3,51,54,89,117,118,130,],[8,8,8,8,8,8,8,8,]),'return':([0,3,51,54,89,117,118,130,],[9,9,9,9,9,9,9,9,]),'if':([0,3,51,54,89,117,118,130,],[10,10,10,10,10,10,10,10,]),'for':([0,3,51,54,89,117,118,130,],[11,11,11,11,11,11,11,11,]),'while':([0,3,51,54,89,117,118,130,],[12,12,12,12,12,12,12,12,]),'assign_symbol':([13,28,],[27,56,]),'slice':([13,],[28,]),'coma_separated':([14,],[35,]),'expression':([14,17,27,34,38,52,56,60,61,73,92,96,97,124,128,],[36,50,55,59,74,91,94,98,99,111,120,59,122,129,130,]),'built_in_function':([14,17,27,34,38,52,56,60,61,73,92,96,97,124,128,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'term':([14,17,27,34,38,40,49,52,56,60,61,62,63,64,65,66,67,68,69,70,71,73,78,83,92,96,97,116,124,128,],[39,39,39,39,39,75,87,39,39,39,39,100,101,102,103,104,105,106,107,108,109,39,113,114,39,39,39,87,39,39,]),'vector':([14,17,27,34,38,40,49,52,56,60,61,62,63,64,65,66,67,68,69,70,71,73,78,83,92,96,97,116,124,128,],[42,42,42,42,42,76,76,42,42,42,42,76,76,76,76,76,76,76,76,76,76,42,76,76,42,42,42,76,42,42,]),'condition':([18,20,],[51,54,]),'slice_contents':([34,],[57,]),'range':([34,96,],[58,121,]),'dot_operation':([41,42,],[78,83,]),'vector_contents':([49,],[84,]),'vector_element':([49,116,],[86,125,]),'nested':([51,54,117,130,],[88,93,126,131,]),'expression_list':([73,],[110,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> statements','start',1,'p_start','Parser.py',34),
  ('statements -> statements_list','statements',1,'p_statements','Parser.py',41),
  ('statements_list -> statements_list statement','statements_list',2,'p_statements_list','Parser.py',48),
  ('statements_list -> statement','statements_list',1,'p_statements_list_single','Parser.py',56),
  ('statement -> assignment ;','statement',2,'p_statement','Parser.py',63),
  ('statement -> print ;','statement',2,'p_statement','Parser.py',64),
  ('statement -> continue ;','statement',2,'p_statement','Parser.py',65),
  ('statement -> break ;','statement',2,'p_statement','Parser.py',66),
  ('statement -> return ;','statement',2,'p_statement','Parser.py',67),
  ('statement -> if','statement',1,'p_statement','Parser.py',68),
  ('statement -> for','statement',1,'p_statement','Parser.py',69),
  ('statement -> while','statement',1,'p_statement','Parser.py',70),
  ('for -> FOR ID ASSIGN expression : expression nested','for',7,'p_for','Parser.py',77),
  ('while -> WHILE condition nested','while',3,'p_while','Parser.py',84),
  ('break -> BREAK','break',1,'p_break','Parser.py',91),
  ('return -> RETURN expression','return',2,'p_return','Parser.py',98),
  ('continue -> CONTINUE','continue',1,'p_continue','Parser.py',105),
  ('print -> PRINT coma_separated','print',2,'p_print','Parser.py',112),
  ('coma_separated -> coma_separated , expression','coma_separated',3,'p_coma_separated','Parser.py',119),
  ('coma_separated -> expression','coma_separated',1,'p_coma_separated_single','Parser.py',127),
  ('assignment -> ID assign_symbol expression','assignment',3,'p_assignment','Parser.py',134),
  ('assignment -> ID slice assign_symbol expression','assignment',4,'p_slice_assignment','Parser.py',141),
  ('assign_symbol -> ASSIGN','assign_symbol',1,'p_assign','Parser.py',148),
  ('assign_symbol -> SUBASSIGN','assign_symbol',1,'p_assign','Parser.py',149),
  ('assign_symbol -> ADDASSIGN','assign_symbol',1,'p_assign','Parser.py',150),
  ('assign_symbol -> DIVASSIGN','assign_symbol',1,'p_assign','Parser.py',151),
  ('assign_symbol -> MULTASSIGN','assign_symbol',1,'p_assign','Parser.py',152),
  ('expression -> built_in_function ( expression_list )','expression',4,'p_expression_function_call','Parser.py',159),
  ('expression_list -> expression_list , expression','expression_list',3,'p_expression_list','Parser.py',166),
  ('expression_list -> expression','expression_list',1,'p_expression_list_single','Parser.py',173),
  ('expression -> term','expression',1,'p_expression_term','Parser.py',180),
  ('expression -> expression + term','expression',3,'p_expression_binary_ops','Parser.py',187),
  ('expression -> expression - term','expression',3,'p_expression_binary_ops','Parser.py',188),
  ('expression -> expression / term','expression',3,'p_expression_binary_ops','Parser.py',189),
  ('expression -> expression * term','expression',3,'p_expression_binary_ops','Parser.py',190),
  ('expression -> expression EQL term','expression',3,'p_expression_relational_ops','Parser.py',197),
  ('expression -> expression NEQ term','expression',3,'p_expression_relational_ops','Parser.py',198),
  ('expression -> expression GT term','expression',3,'p_expression_relational_ops','Parser.py',199),
  ('expression -> expression GTE term','expression',3,'p_expression_relational_ops','Parser.py',200),
  ('expression -> expression LT term','expression',3,'p_expression_relational_ops','Parser.py',201),
  ('expression -> expression LTE term','expression',3,'p_expression_relational_ops','Parser.py',202),
  ('expression -> - term','expression',2,'p_expression_unary','Parser.py',209),
  ('expression -> expression TRANSPOSE','expression',2,'p_vector_transpose','Parser.py',216),
  ('expression -> ID dot_operation term','expression',3,'p_expression_id_func_call','Parser.py',223),
  ('expression -> vector dot_operation term','expression',3,'p_expression_vector_func_call','Parser.py',231),
  ('dot_operation -> DOTADD','dot_operation',1,'p_dot_operation','Parser.py',238),
  ('dot_operation -> DOTSUB','dot_operation',1,'p_dot_operation','Parser.py',239),
  ('dot_operation -> DOTMUL','dot_operation',1,'p_dot_operation','Parser.py',240),
  ('dot_operation -> DOTDIV','dot_operation',1,'p_dot_operation','Parser.py',241),
  ('vector -> [ vector_contents ]','vector',3,'p_vector','Parser.py',248),
  ('vector -> [ ]','vector',2,'p_vector_empty','Parser.py',255),
  ('vector_contents -> vector_contents , vector_element','vector_contents',3,'p_vector_contents_list','Parser.py',262),
  ('vector_contents -> vector_element','vector_contents',1,'p_vector_contents_single','Parser.py',270),
  ('vector_element -> term','vector_element',1,'p_vector_element','Parser.py',277),
  ('slice -> [ slice_contents ]','slice',3,'p_slice','Parser.py',284),
  ('slice_contents -> slice_contents , range','slice_contents',3,'p_slice_contents','Parser.py',291),
  ('slice_contents -> range','slice_contents',1,'p_slice_contents_single','Parser.py',299),
  ('range -> expression : expression','range',3,'p_range','Parser.py',306),
  ('range -> expression :','range',2,'p_range_startless','Parser.py',313),
  ('range -> : expression','range',2,'p_range_endless','Parser.py',320),
  ('range -> expression','range',1,'p_range_simple','Parser.py',327),
  ('if -> IF condition nested','if',3,'p_if','Parser.py',334),
  ('if -> IF condition nested ELSE nested','if',5,'p_if_else','Parser.py',341),
  ('condition -> ( expression )','condition',3,'p_condition','Parser.py',348),
  ('nested -> { statements_list }','nested',3,'p_nested','Parser.py',355),
  ('nested -> statement','nested',1,'p_nested','Parser.py',356),
  ('term -> ( expression )','term',3,'p_term','Parser.py',369),
  ('term -> vector','term',1,'p_term_vector','Parser.py',376),
  ('term -> INTNUM','term',1,'p_term_primitive_int','Parser.py',383),
  ('term -> FLOATNUM','term',1,'p_term_primitive_float','Parser.py',390),
  ('term -> STR','term',1,'p_term_primitive_str','Parser.py',397),
  ('term -> ID','term',1,'p_term_id','Parser.py',404),
  ('built_in_function -> EYE','built_in_function',1,'p_built_in_function','Parser.py',411),
  ('built_in_function -> ONES','built_in_function',1,'p_built_in_function','Parser.py',412),
  ('built_in_function -> ZEROS','built_in_function',1,'p_built_in_function','Parser.py',413),
]
