
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "startnonassocEQLNEQGTGTELTLTEleft+-left/*rightUMINUSnonassocIFxnonassocELSEleftTRANSPOSEADDASSIGN ASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQL EYE FLOATNUM FOR GT GTE ID IF INTNUM LT LTE MULTASSIGN NEQ ONES PRINT RETURN STR SUBASSIGN TRANSPOSE WHILE ZEROS\n        start : statements\n    \n        statements : statements_list \n    \n        statements_list : statements_list statement\n    \n        statements_list : statement\n    \n        statement : assignment ';'\n                  | print ';'\n                  | continue ';'\n                  | break ';'\n                  | return ';'\n                  | if\n                  | for\n                  | while\n                  | nested_statements\n    \n        for : FOR ID ASSIGN expression ':' expression nested\n    \n        while : WHILE condition nested\n    \n        break : BREAK\n    \n        return : RETURN expression\n    \n        continue : CONTINUE\n    \n        print : PRINT coma_separated\n    \n        coma_separated : coma_separated ',' expression\n    \n        coma_separated : expression\n    \n        assignment : ID assign_symbol expression\n    \n        assignment : ID slice assign_symbol expression\n    \n        assign_symbol : ASSIGN\n                      | SUBASSIGN\n                      | ADDASSIGN\n                      | DIVASSIGN\n                      | MULTASSIGN\n    \n        expression : built_in_function '(' expression_list ')'\n    \n        expression_list : expression_list ',' expression\n    \n        expression_list : expression\n    \n        expression : term\n    \n        expression : expression '+' term\n                   | expression '-' term\n                   | expression '/' term\n                   | expression '*' term\n    \n        expression : expression EQL term\n                   | expression NEQ term\n                   | expression GT term\n                   | expression GTE term\n                   | expression LT term\n                   | expression LTE term\n    \n        expression : '-' term %prec UMINUS\n    \n        expression : expression TRANSPOSE\n    \n        expression : ID dot_operation term\n    \n        expression : vector dot_operation term\n    \n         dot_operation : DOTADD\n                       | DOTSUB\n                       | DOTMUL\n                       | DOTDIV\n    \n        vector : '[' vector_contents ']'\n    \n        vector : '[' ']'\n    \n        vector_contents : vector_contents ',' vector_element\n    \n        vector_contents : vector_element\n    \n        vector_element : term\n    \n        slice : '[' slice_contents ']'\n    \n        slice_contents : slice_contents ',' range\n    \n        slice_contents : range\n    \n        range : expression ':' expression\n    \n        range : expression ':'\n    \n        range : ':' expression\n    \n        range : expression\n    \n        if : IF condition nested %prec IFx\n    \n        if : IF condition nested ELSE nested\n    \n        condition : '(' expression ')'\n    \n        nested : nested_single\n    \n        nested_single : statement\n    \n        nested_statements : '{' statements_list '}'\n    \n        term : '(' expression ')'\n    \n        term : vector\n    \n        term : INTNUM\n    \n        term : FLOATNUM\n    \n        term : STR\n    \n        term : ID\n    \n        built_in_function : EYE\n                          | ONES\n                          | ZEROS\n    "
    
_lr_action_items = {'ID':([0,3,4,10,11,12,13,15,18,20,22,23,24,25,26,27,28,29,31,32,33,34,35,36,40,41,42,43,44,48,49,50,51,53,54,56,57,59,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,79,80,81,82,83,84,85,86,88,91,92,93,95,96,97,100,101,104,105,106,107,108,109,110,111,112,113,116,117,118,119,120,121,122,126,127,129,130,132,133,],[14,14,-4,-10,-11,-12,-13,43,43,55,14,-3,-5,-6,-7,-8,-9,43,-24,-25,-26,-27,-28,43,43,-32,80,-74,-70,-71,-72,-73,80,14,43,14,14,43,43,43,80,80,80,80,80,80,80,80,80,80,-44,43,-43,-70,-74,80,-47,-48,-49,-50,80,-52,-63,-66,-67,43,-15,-68,43,43,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-69,-45,-46,-51,80,14,-65,-29,43,-64,43,14,-14,]),'PRINT':([0,3,4,10,11,12,13,22,23,24,25,26,27,28,41,43,44,48,49,50,53,56,57,75,78,79,80,88,91,92,93,96,97,104,105,106,107,108,109,110,111,112,113,116,117,118,119,121,122,126,129,132,133,],[15,15,-4,-10,-11,-12,-13,15,-3,-5,-6,-7,-8,-9,-32,-74,-70,-71,-72,-73,15,15,15,-44,-43,-70,-74,-52,-63,-66,-67,-15,-68,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-69,-45,-46,-51,15,-65,-29,-64,15,-14,]),'CONTINUE':([0,3,4,10,11,12,13,22,23,24,25,26,27,28,41,43,44,48,49,50,53,56,57,75,78,79,80,88,91,92,93,96,97,104,105,106,107,108,109,110,111,112,113,116,117,118,119,121,122,126,129,132,133,],[16,16,-4,-10,-11,-12,-13,16,-3,-5,-6,-7,-8,-9,-32,-74,-70,-71,-72,-73,16,16,16,-44,-43,-70,-74,-52,-63,-66,-67,-15,-68,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-69,-45,-46,-51,16,-65,-29,-64,16,-14,]),'BREAK':([0,3,4,10,11,12,13,22,23,24,25,26,27,28,41,43,44,48,49,50,53,56,57,75,78,79,80,88,91,92,93,96,97,104,105,106,107,108,109,110,111,112,113,116,117,118,119,121,122,126,129,132,133,],[17,17,-4,-10,-11,-12,-13,17,-3,-5,-6,-7,-8,-9,-32,-74,-70,-71,-72,-73,17,17,17,-44,-43,-70,-74,-52,-63,-66,-67,-15,-68,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-69,-45,-46,-51,17,-65,-29,-64,17,-14,]),'RETURN':([0,3,4,10,11,12,13,22,23,24,25,26,27,28,41,43,44,48,49,50,53,56,57,75,78,79,80,88,91,92,93,96,97,104,105,106,107,108,109,110,111,112,113,116,117,118,119,121,122,126,129,132,133,],[18,18,-4,-10,-11,-12,-13,18,-3,-5,-6,-7,-8,-9,-32,-74,-70,-71,-72,-73,18,18,18,-44,-43,-70,-74,-52,-63,-66,-67,-15,-68,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-69,-45,-46,-51,18,-65,-29,-64,18,-14,]),'IF':([0,3,4,10,11,12,13,22,23,24,25,26,27,28,41,43,44,48,49,50,53,56,57,75,78,79,80,88,91,92,93,96,97,104,105,106,107,108,109,110,111,112,113,116,117,118,119,121,122,126,129,132,133,],[19,19,-4,-10,-11,-12,-13,19,-3,-5,-6,-7,-8,-9,-32,-74,-70,-71,-72,-73,19,19,19,-44,-43,-70,-74,-52,-63,-66,-67,-15,-68,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-69,-45,-46,-51,19,-65,-29,-64,19,-14,]),'FOR':([0,3,4,10,11,12,13,22,23,24,25,26,27,28,41,43,44,48,49,50,53,56,57,75,78,79,80,88,91,92,93,96,97,104,105,106,107,108,109,110,111,112,113,116,117,118,119,121,122,126,129,132,133,],[20,20,-4,-10,-11,-12,-13,20,-3,-5,-6,-7,-8,-9,-32,-74,-70,-71,-72,-73,20,20,20,-44,-43,-70,-74,-52,-63,-66,-67,-15,-68,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-69,-45,-46,-51,20,-65,-29,-64,20,-14,]),'WHILE':([0,3,4,10,11,12,13,22,23,24,25,26,27,28,41,43,44,48,49,50,53,56,57,75,78,79,80,88,91,92,93,96,97,104,105,106,107,108,109,110,111,112,113,116,117,118,119,121,122,126,129,132,133,],[21,21,-4,-10,-11,-12,-13,21,-3,-5,-6,-7,-8,-9,-32,-74,-70,-71,-72,-73,21,21,21,-44,-43,-70,-74,-52,-63,-66,-67,-15,-68,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-69,-45,-46,-51,21,-65,-29,-64,21,-14,]),'{':([0,3,4,10,11,12,13,22,23,24,25,26,27,28,41,43,44,48,49,50,53,56,57,75,78,79,80,88,91,92,93,96,97,104,105,106,107,108,109,110,111,112,113,116,117,118,119,121,122,126,129,132,133,],[22,22,-4,-10,-11,-12,-13,22,-3,-5,-6,-7,-8,-9,-32,-74,-70,-71,-72,-73,22,22,22,-44,-43,-70,-74,-52,-63,-66,-67,-15,-68,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-69,-45,-46,-51,22,-65,-29,-64,22,-14,]),'$end':([1,2,3,4,10,11,12,13,23,24,25,26,27,28,91,92,93,96,97,129,133,],[0,-1,-2,-4,-10,-11,-12,-13,-3,-5,-6,-7,-8,-9,-63,-66,-67,-15,-68,-64,-14,]),'}':([4,10,11,12,13,23,24,25,26,27,28,57,91,92,93,96,97,129,133,],[-4,-10,-11,-12,-13,-3,-5,-6,-7,-8,-9,97,-63,-66,-67,-15,-68,-64,-14,]),';':([5,6,7,8,9,16,17,37,38,41,43,44,48,49,50,52,58,75,78,79,80,88,98,103,104,105,106,107,108,109,110,111,112,113,116,117,118,119,126,],[24,25,26,27,28,-18,-16,-19,-21,-32,-74,-70,-71,-72,-73,-17,-22,-44,-43,-70,-74,-52,-23,-20,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-69,-45,-46,-51,-29,]),'ELSE':([10,11,12,13,24,25,26,27,28,91,92,93,96,97,129,133,],[-10,-11,-12,-13,-5,-6,-7,-8,-9,121,-66,-67,-15,-68,-64,-14,]),'ASSIGN':([14,30,55,99,],[31,31,95,-56,]),'SUBASSIGN':([14,30,99,],[32,32,-56,]),'ADDASSIGN':([14,30,99,],[33,33,-56,]),'DIVASSIGN':([14,30,99,],[34,34,-56,]),'MULTASSIGN':([14,30,99,],[35,35,-56,]),'[':([14,15,18,29,31,32,33,34,35,36,40,42,51,54,59,63,64,65,66,67,68,69,70,71,72,73,74,76,81,82,83,84,85,86,95,100,101,120,127,130,],[36,51,51,51,-24,-25,-26,-27,-28,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-47,-48,-49,-50,51,51,51,51,51,51,51,]),'-':([15,18,29,31,32,33,34,35,36,38,40,41,43,44,48,49,50,52,54,58,59,62,63,64,75,76,77,78,79,80,88,94,95,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,123,125,126,127,130,131,132,],[42,42,42,-24,-25,-26,-27,-28,42,66,42,-32,-74,-70,-71,-72,-73,66,42,66,42,66,42,42,-44,42,66,-43,-70,-74,-52,66,42,66,42,42,66,66,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,66,-69,-45,-46,-51,66,66,-29,42,42,66,66,]),'EYE':([15,18,29,31,32,33,34,35,36,40,54,59,63,64,76,95,100,101,127,130,],[45,45,45,-24,-25,-26,-27,-28,45,45,45,45,45,45,45,45,45,45,45,45,]),'ONES':([15,18,29,31,32,33,34,35,36,40,54,59,63,64,76,95,100,101,127,130,],[46,46,46,-24,-25,-26,-27,-28,46,46,46,46,46,46,46,46,46,46,46,46,]),'ZEROS':([15,18,29,31,32,33,34,35,36,40,54,59,63,64,76,95,100,101,127,130,],[47,47,47,-24,-25,-26,-27,-28,47,47,47,47,47,47,47,47,47,47,47,47,]),'(':([15,18,19,21,29,31,32,33,34,35,36,39,40,42,45,46,47,51,54,59,63,64,65,66,67,68,69,70,71,72,73,74,76,81,82,83,84,85,86,95,100,101,120,127,130,],[40,40,54,54,40,-24,-25,-26,-27,-28,40,76,40,40,-75,-76,-77,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-47,-48,-49,-50,40,40,40,40,40,40,40,]),'INTNUM':([15,18,29,31,32,33,34,35,36,40,42,51,54,59,63,64,65,66,67,68,69,70,71,72,73,74,76,81,82,83,84,85,86,95,100,101,120,127,130,],[48,48,48,-24,-25,-26,-27,-28,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-47,-48,-49,-50,48,48,48,48,48,48,48,]),'FLOATNUM':([15,18,29,31,32,33,34,35,36,40,42,51,54,59,63,64,65,66,67,68,69,70,71,72,73,74,76,81,82,83,84,85,86,95,100,101,120,127,130,],[49,49,49,-24,-25,-26,-27,-28,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-47,-48,-49,-50,49,49,49,49,49,49,49,]),'STR':([15,18,29,31,32,33,34,35,36,40,42,51,54,59,63,64,65,66,67,68,69,70,71,72,73,74,76,81,82,83,84,85,86,95,100,101,120,127,130,],[50,50,50,-24,-25,-26,-27,-28,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-47,-48,-49,-50,50,50,50,50,50,50,50,]),':':([36,41,43,44,48,49,50,62,75,78,79,80,88,100,104,105,106,107,108,109,110,111,112,113,116,117,118,119,123,126,],[63,-32,-74,-70,-71,-72,-73,101,-44,-43,-70,-74,-52,63,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-69,-45,-46,-51,130,-29,]),',':([37,38,41,43,44,48,49,50,60,61,62,75,78,79,80,87,88,89,90,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,124,125,126,128,131,],[64,-21,-32,-74,-70,-71,-72,-73,100,-58,-62,-44,-43,-70,-74,120,-52,-54,-55,-60,-61,-20,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,127,-31,-69,-45,-46,-51,-57,-59,-29,-53,-30,]),'+':([38,41,43,44,48,49,50,52,58,62,75,77,78,79,80,88,94,98,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,123,125,126,131,132,],[65,-32,-74,-70,-71,-72,-73,65,65,65,-44,65,-43,-70,-74,-52,65,65,65,65,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,65,-69,-45,-46,-51,65,65,-29,65,65,]),'/':([38,41,43,44,48,49,50,52,58,62,75,77,78,79,80,88,94,98,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,123,125,126,131,132,],[67,-32,-74,-70,-71,-72,-73,67,67,67,-44,67,-43,-70,-74,-52,67,67,67,67,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,67,-69,-45,-46,-51,67,67,-29,67,67,]),'*':([38,41,43,44,48,49,50,52,58,62,75,77,78,79,80,88,94,98,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,123,125,126,131,132,],[68,-32,-74,-70,-71,-72,-73,68,68,68,-44,68,-43,-70,-74,-52,68,68,68,68,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,68,-69,-45,-46,-51,68,68,-29,68,68,]),'EQL':([38,41,43,44,48,49,50,52,58,62,75,77,78,79,80,88,94,98,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,123,125,126,131,132,],[69,-32,-74,-70,-71,-72,-73,69,69,69,-44,69,-43,-70,-74,-52,69,69,69,69,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,69,-69,-45,-46,-51,69,69,-29,69,69,]),'NEQ':([38,41,43,44,48,49,50,52,58,62,75,77,78,79,80,88,94,98,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,123,125,126,131,132,],[70,-32,-74,-70,-71,-72,-73,70,70,70,-44,70,-43,-70,-74,-52,70,70,70,70,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,70,-69,-45,-46,-51,70,70,-29,70,70,]),'GT':([38,41,43,44,48,49,50,52,58,62,75,77,78,79,80,88,94,98,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,123,125,126,131,132,],[71,-32,-74,-70,-71,-72,-73,71,71,71,-44,71,-43,-70,-74,-52,71,71,71,71,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,71,-69,-45,-46,-51,71,71,-29,71,71,]),'GTE':([38,41,43,44,48,49,50,52,58,62,75,77,78,79,80,88,94,98,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,123,125,126,131,132,],[72,-32,-74,-70,-71,-72,-73,72,72,72,-44,72,-43,-70,-74,-52,72,72,72,72,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,72,-69,-45,-46,-51,72,72,-29,72,72,]),'LT':([38,41,43,44,48,49,50,52,58,62,75,77,78,79,80,88,94,98,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,123,125,126,131,132,],[73,-32,-74,-70,-71,-72,-73,73,73,73,-44,73,-43,-70,-74,-52,73,73,73,73,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,73,-69,-45,-46,-51,73,73,-29,73,73,]),'LTE':([38,41,43,44,48,49,50,52,58,62,75,77,78,79,80,88,94,98,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,123,125,126,131,132,],[74,-32,-74,-70,-71,-72,-73,74,74,74,-44,74,-43,-70,-74,-52,74,74,74,74,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,74,-69,-45,-46,-51,74,74,-29,74,74,]),'TRANSPOSE':([38,41,43,44,48,49,50,52,58,62,75,77,78,79,80,88,94,98,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,119,123,125,126,131,132,],[75,-32,-74,-70,-71,-72,-73,75,75,75,-44,75,-43,-70,-74,-52,75,75,75,75,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,75,-69,-45,-46,-51,75,75,-29,75,75,]),']':([41,43,44,48,49,50,51,60,61,62,75,78,79,80,87,88,89,90,101,102,104,105,106,107,108,109,110,111,112,113,116,117,118,119,124,125,126,128,],[-32,-74,-70,-71,-72,-73,88,99,-58,-62,-44,-43,-70,-74,119,-52,-54,-55,-60,-61,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-69,-45,-46,-51,-57,-59,-29,-53,]),')':([41,43,44,48,49,50,75,77,78,79,80,88,94,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,126,131,],[-32,-74,-70,-71,-72,-73,-44,116,-43,-70,-74,-52,122,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,126,-31,-69,-45,-46,-51,-29,-30,]),'DOTADD':([43,44,88,119,],[82,82,-52,-51,]),'DOTSUB':([43,44,88,119,],[83,83,-52,-51,]),'DOTMUL':([43,44,88,119,],[84,84,-52,-51,]),'DOTDIV':([43,44,88,119,],[85,85,-52,-51,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'statements':([0,],[2,]),'statements_list':([0,22,],[3,57,]),'statement':([0,3,22,53,56,57,121,132,],[4,23,4,93,93,23,93,93,]),'assignment':([0,3,22,53,56,57,121,132,],[5,5,5,5,5,5,5,5,]),'print':([0,3,22,53,56,57,121,132,],[6,6,6,6,6,6,6,6,]),'continue':([0,3,22,53,56,57,121,132,],[7,7,7,7,7,7,7,7,]),'break':([0,3,22,53,56,57,121,132,],[8,8,8,8,8,8,8,8,]),'return':([0,3,22,53,56,57,121,132,],[9,9,9,9,9,9,9,9,]),'if':([0,3,22,53,56,57,121,132,],[10,10,10,10,10,10,10,10,]),'for':([0,3,22,53,56,57,121,132,],[11,11,11,11,11,11,11,11,]),'while':([0,3,22,53,56,57,121,132,],[12,12,12,12,12,12,12,12,]),'nested_statements':([0,3,22,53,56,57,121,132,],[13,13,13,13,13,13,13,13,]),'assign_symbol':([14,30,],[29,59,]),'slice':([14,],[30,]),'coma_separated':([15,],[37,]),'expression':([15,18,29,36,40,54,59,63,64,76,95,100,101,127,130,],[38,52,58,62,77,94,98,102,103,115,123,62,125,131,132,]),'built_in_function':([15,18,29,36,40,54,59,63,64,76,95,100,101,127,130,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'term':([15,18,29,36,40,42,51,54,59,63,64,65,66,67,68,69,70,71,72,73,74,76,81,86,95,100,101,120,127,130,],[41,41,41,41,41,78,90,41,41,41,41,104,105,106,107,108,109,110,111,112,113,41,117,118,41,41,41,90,41,41,]),'vector':([15,18,29,36,40,42,51,54,59,63,64,65,66,67,68,69,70,71,72,73,74,76,81,86,95,100,101,120,127,130,],[44,44,44,44,44,79,79,44,44,44,44,79,79,79,79,79,79,79,79,79,79,44,79,79,44,44,44,79,44,44,]),'condition':([19,21,],[53,56,]),'slice_contents':([36,],[60,]),'range':([36,100,],[61,124,]),'dot_operation':([43,44,],[81,86,]),'vector_contents':([51,],[87,]),'vector_element':([51,120,],[89,128,]),'nested':([53,56,121,132,],[91,96,129,133,]),'nested_single':([53,56,121,132,],[92,92,92,92,]),'expression_list':([76,],[114,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> statements','start',1,'p_start','Parser.py',34),
  ('statements -> statements_list','statements',1,'p_statements','Parser.py',41),
  ('statements_list -> statements_list statement','statements_list',2,'p_statements_list','Parser.py',48),
  ('statements_list -> statement','statements_list',1,'p_statements_list_single','Parser.py',56),
  ('statement -> assignment ;','statement',2,'p_statement','Parser.py',63),
  ('statement -> print ;','statement',2,'p_statement','Parser.py',64),
  ('statement -> continue ;','statement',2,'p_statement','Parser.py',65),
  ('statement -> break ;','statement',2,'p_statement','Parser.py',66),
  ('statement -> return ;','statement',2,'p_statement','Parser.py',67),
  ('statement -> if','statement',1,'p_statement','Parser.py',68),
  ('statement -> for','statement',1,'p_statement','Parser.py',69),
  ('statement -> while','statement',1,'p_statement','Parser.py',70),
  ('statement -> nested_statements','statement',1,'p_statement','Parser.py',71),
  ('for -> FOR ID ASSIGN expression : expression nested','for',7,'p_for','Parser.py',78),
  ('while -> WHILE condition nested','while',3,'p_while','Parser.py',85),
  ('break -> BREAK','break',1,'p_break','Parser.py',92),
  ('return -> RETURN expression','return',2,'p_return','Parser.py',99),
  ('continue -> CONTINUE','continue',1,'p_continue','Parser.py',106),
  ('print -> PRINT coma_separated','print',2,'p_print','Parser.py',113),
  ('coma_separated -> coma_separated , expression','coma_separated',3,'p_coma_separated','Parser.py',120),
  ('coma_separated -> expression','coma_separated',1,'p_coma_separated_single','Parser.py',128),
  ('assignment -> ID assign_symbol expression','assignment',3,'p_assignment','Parser.py',135),
  ('assignment -> ID slice assign_symbol expression','assignment',4,'p_slice_assignment','Parser.py',142),
  ('assign_symbol -> ASSIGN','assign_symbol',1,'p_assign','Parser.py',149),
  ('assign_symbol -> SUBASSIGN','assign_symbol',1,'p_assign','Parser.py',150),
  ('assign_symbol -> ADDASSIGN','assign_symbol',1,'p_assign','Parser.py',151),
  ('assign_symbol -> DIVASSIGN','assign_symbol',1,'p_assign','Parser.py',152),
  ('assign_symbol -> MULTASSIGN','assign_symbol',1,'p_assign','Parser.py',153),
  ('expression -> built_in_function ( expression_list )','expression',4,'p_expression_function_call','Parser.py',160),
  ('expression_list -> expression_list , expression','expression_list',3,'p_expression_list','Parser.py',167),
  ('expression_list -> expression','expression_list',1,'p_expression_list_single','Parser.py',174),
  ('expression -> term','expression',1,'p_expression_term','Parser.py',181),
  ('expression -> expression + term','expression',3,'p_expression_binary_ops','Parser.py',188),
  ('expression -> expression - term','expression',3,'p_expression_binary_ops','Parser.py',189),
  ('expression -> expression / term','expression',3,'p_expression_binary_ops','Parser.py',190),
  ('expression -> expression * term','expression',3,'p_expression_binary_ops','Parser.py',191),
  ('expression -> expression EQL term','expression',3,'p_expression_relational_ops','Parser.py',198),
  ('expression -> expression NEQ term','expression',3,'p_expression_relational_ops','Parser.py',199),
  ('expression -> expression GT term','expression',3,'p_expression_relational_ops','Parser.py',200),
  ('expression -> expression GTE term','expression',3,'p_expression_relational_ops','Parser.py',201),
  ('expression -> expression LT term','expression',3,'p_expression_relational_ops','Parser.py',202),
  ('expression -> expression LTE term','expression',3,'p_expression_relational_ops','Parser.py',203),
  ('expression -> - term','expression',2,'p_expression_unary','Parser.py',210),
  ('expression -> expression TRANSPOSE','expression',2,'p_vector_transpose','Parser.py',217),
  ('expression -> ID dot_operation term','expression',3,'p_expression_id_func_call','Parser.py',224),
  ('expression -> vector dot_operation term','expression',3,'p_expression_vector_func_call','Parser.py',232),
  ('dot_operation -> DOTADD','dot_operation',1,'p_dot_operation','Parser.py',239),
  ('dot_operation -> DOTSUB','dot_operation',1,'p_dot_operation','Parser.py',240),
  ('dot_operation -> DOTMUL','dot_operation',1,'p_dot_operation','Parser.py',241),
  ('dot_operation -> DOTDIV','dot_operation',1,'p_dot_operation','Parser.py',242),
  ('vector -> [ vector_contents ]','vector',3,'p_vector','Parser.py',249),
  ('vector -> [ ]','vector',2,'p_vector_empty','Parser.py',256),
  ('vector_contents -> vector_contents , vector_element','vector_contents',3,'p_vector_contents_list','Parser.py',263),
  ('vector_contents -> vector_element','vector_contents',1,'p_vector_contents_single','Parser.py',271),
  ('vector_element -> term','vector_element',1,'p_vector_element','Parser.py',278),
  ('slice -> [ slice_contents ]','slice',3,'p_slice','Parser.py',285),
  ('slice_contents -> slice_contents , range','slice_contents',3,'p_slice_contents','Parser.py',292),
  ('slice_contents -> range','slice_contents',1,'p_slice_contents_single','Parser.py',300),
  ('range -> expression : expression','range',3,'p_range','Parser.py',307),
  ('range -> expression :','range',2,'p_range_startless','Parser.py',314),
  ('range -> : expression','range',2,'p_range_endless','Parser.py',321),
  ('range -> expression','range',1,'p_range_simple','Parser.py',328),
  ('if -> IF condition nested','if',3,'p_if','Parser.py',335),
  ('if -> IF condition nested ELSE nested','if',5,'p_if_else','Parser.py',342),
  ('condition -> ( expression )','condition',3,'p_condition','Parser.py',349),
  ('nested -> nested_single','nested',1,'p_nested','Parser.py',356),
  ('nested_single -> statement','nested_single',1,'p_nested_single','Parser.py',363),
  ('nested_statements -> { statements_list }','nested_statements',3,'p_nested_statements','Parser.py',371),
  ('term -> ( expression )','term',3,'p_term','Parser.py',379),
  ('term -> vector','term',1,'p_term_vector','Parser.py',386),
  ('term -> INTNUM','term',1,'p_term_primitive_int','Parser.py',393),
  ('term -> FLOATNUM','term',1,'p_term_primitive_float','Parser.py',400),
  ('term -> STR','term',1,'p_term_primitive_str','Parser.py',407),
  ('term -> ID','term',1,'p_term_id','Parser.py',414),
  ('built_in_function -> EYE','built_in_function',1,'p_built_in_function','Parser.py',421),
  ('built_in_function -> ONES','built_in_function',1,'p_built_in_function','Parser.py',422),
  ('built_in_function -> ZEROS','built_in_function',1,'p_built_in_function','Parser.py',423),
]
