Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> statements
Rule 2     statements -> statement
Rule 3     statements -> statements statement
Rule 4     statement -> assignment ;
Rule 5     statement -> print ;
Rule 6     statement -> continue ;
Rule 7     statement -> break ;
Rule 8     statement -> return ;
Rule 9     statement -> if
Rule 10    statement -> for
Rule 11    statement -> while
Rule 12    for -> FOR ID ASSIGN expression : expression nested
Rule 13    while -> WHILE condition nested
Rule 14    break -> BREAK
Rule 15    return -> RETURN expression
Rule 16    continue -> CONTINUE
Rule 17    print -> PRINT coma_separated
Rule 18    coma_separated -> expression
Rule 19    coma_separated -> coma_separated , expression
Rule 20    assignment -> ID assign_symbol expression
Rule 21    assignment -> ID slice assign_symbol expression
Rule 22    assign_symbol -> ASSIGN
Rule 23    assign_symbol -> SUBASSIGN
Rule 24    assign_symbol -> ADDASSIGN
Rule 25    assign_symbol -> DIVASSIGN
Rule 26    assign_symbol -> MULTASSIGN
Rule 27    expression -> built_in_function ( term_list )
Rule 28    term_list -> term
Rule 29    term_list -> term_list , term
Rule 30    expression -> term
Rule 31    expression -> expression + term
Rule 32    expression -> expression - term
Rule 33    expression -> expression / term
Rule 34    expression -> expression * term
Rule 35    expression -> expression EQL term
Rule 36    expression -> expression NEQ term
Rule 37    expression -> expression GT term
Rule 38    expression -> expression GTE term
Rule 39    expression -> expression LT term
Rule 40    expression -> expression LTE term
Rule 41    expression -> - term
Rule 42    vector -> ID TRANSPOSE
Rule 43    vector -> vector TRANSPOSE
Rule 44    expression -> ID dot_operation term
Rule 45    expression -> vector dot_operation term
Rule 46    dot_operation -> DOTADD
Rule 47    dot_operation -> DOTSUB
Rule 48    dot_operation -> DOTMUL
Rule 49    dot_operation -> DOTDIV
Rule 50    vector -> [ vector_contents ]
Rule 51    vector -> [ ]
Rule 52    vector_contents -> vector_contents , vector_element
Rule 53    vector_contents -> vector_element
Rule 54    vector_element -> term
Rule 55    slice -> [ slice_contents ]
Rule 56    slice_contents -> range
Rule 57    slice_contents -> slice_contents , range
Rule 58    range -> term : term
Rule 59    range -> term :
Rule 60    range -> : term
Rule 61    range -> term
Rule 62    if -> IF condition nested
Rule 63    if -> IF condition nested ELSE nested
Rule 64    condition -> ( expression )
Rule 65    nested -> { statements }
Rule 66    nested -> statement
Rule 67    term -> ( expression )
Rule 68    term -> vector
Rule 69    term -> INTNUM
Rule 70    term -> FLOATNUM
Rule 71    term -> STR
Rule 72    term -> ID
Rule 73    built_in_function -> EYE
Rule 74    built_in_function -> ONES
Rule 75    built_in_function -> ZEROS

Terminals, with rules where they appear

(                    : 27 64 67
)                    : 27 64 67
*                    : 34
+                    : 31
,                    : 19 29 52 57
-                    : 32 41
/                    : 33
:                    : 12 58 59 60
;                    : 4 5 6 7 8
ADDASSIGN            : 24
ASSIGN               : 12 22
BREAK                : 14
CONTINUE             : 16
DIVASSIGN            : 25
DOTADD               : 46
DOTDIV               : 49
DOTMUL               : 48
DOTSUB               : 47
ELSE                 : 63
EQL                  : 35
EYE                  : 73
FLOATNUM             : 70
FOR                  : 12
GT                   : 37
GTE                  : 38
ID                   : 12 20 21 42 44 72
IF                   : 62 63
INTNUM               : 69
LT                   : 39
LTE                  : 40
MULTASSIGN           : 26
NEQ                  : 36
ONES                 : 74
PRINT                : 17
RETURN               : 15
STR                  : 71
SUBASSIGN            : 23
TRANSPOSE            : 42 43
WHILE                : 13
ZEROS                : 75
[                    : 50 51 55
]                    : 50 51 55
error                : 
{                    : 65
}                    : 65

Nonterminals, with rules where they appear

assign_symbol        : 20 21
assignment           : 4
break                : 7
built_in_function    : 27
coma_separated       : 17 19
condition            : 13 62 63
continue             : 6
dot_operation        : 44 45
expression           : 12 12 15 18 19 20 21 31 32 33 34 35 36 37 38 39 40 64 67
for                  : 10
if                   : 9
nested               : 12 13 62 63 63
print                : 5
range                : 56 57
return               : 8
slice                : 21
slice_contents       : 55 57
start                : 0
statement            : 2 3 66
statements           : 1 3 65
term                 : 28 29 30 31 32 33 34 35 36 37 38 39 40 41 44 45 54 58 58 59 60 61
term_list            : 27 29
vector               : 43 45 68
vector_contents      : 50 52
vector_element       : 52 53
while                : 11

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . statements
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if
    (10) statement -> . for
    (11) statement -> . while
    (20) assignment -> . ID assign_symbol expression
    (21) assignment -> . ID slice assign_symbol expression
    (17) print -> . PRINT coma_separated
    (16) continue -> . CONTINUE
    (14) break -> . BREAK
    (15) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (12) for -> . FOR ID ASSIGN expression : expression nested
    (13) while -> . WHILE condition nested

    ID              shift and go to state 12
    PRINT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    RETURN          shift and go to state 16
    IF              shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19

    start                          shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if                             shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11

state 1

    (0) S' -> start .



state 2

    (1) start -> statements .
    (3) statements -> statements . statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if
    (10) statement -> . for
    (11) statement -> . while
    (20) assignment -> . ID assign_symbol expression
    (21) assignment -> . ID slice assign_symbol expression
    (17) print -> . PRINT coma_separated
    (16) continue -> . CONTINUE
    (14) break -> . BREAK
    (15) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (12) for -> . FOR ID ASSIGN expression : expression nested
    (13) while -> . WHILE condition nested

    $end            reduce using rule 1 (start -> statements .)
    ID              shift and go to state 12
    PRINT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    RETURN          shift and go to state 16
    IF              shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19

    statement                      shift and go to state 20
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if                             shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11

state 3

    (2) statements -> statement .

    ID              reduce using rule 2 (statements -> statement .)
    PRINT           reduce using rule 2 (statements -> statement .)
    CONTINUE        reduce using rule 2 (statements -> statement .)
    BREAK           reduce using rule 2 (statements -> statement .)
    RETURN          reduce using rule 2 (statements -> statement .)
    IF              reduce using rule 2 (statements -> statement .)
    FOR             reduce using rule 2 (statements -> statement .)
    WHILE           reduce using rule 2 (statements -> statement .)
    $end            reduce using rule 2 (statements -> statement .)
    }               reduce using rule 2 (statements -> statement .)


state 4

    (4) statement -> assignment . ;

    ;               shift and go to state 21


state 5

    (5) statement -> print . ;

    ;               shift and go to state 22


state 6

    (6) statement -> continue . ;

    ;               shift and go to state 23


state 7

    (7) statement -> break . ;

    ;               shift and go to state 24


state 8

    (8) statement -> return . ;

    ;               shift and go to state 25


state 9

    (9) statement -> if .

    ID              reduce using rule 9 (statement -> if .)
    PRINT           reduce using rule 9 (statement -> if .)
    CONTINUE        reduce using rule 9 (statement -> if .)
    BREAK           reduce using rule 9 (statement -> if .)
    RETURN          reduce using rule 9 (statement -> if .)
    IF              reduce using rule 9 (statement -> if .)
    FOR             reduce using rule 9 (statement -> if .)
    WHILE           reduce using rule 9 (statement -> if .)
    $end            reduce using rule 9 (statement -> if .)
    ELSE            reduce using rule 9 (statement -> if .)
    }               reduce using rule 9 (statement -> if .)


state 10

    (10) statement -> for .

    ID              reduce using rule 10 (statement -> for .)
    PRINT           reduce using rule 10 (statement -> for .)
    CONTINUE        reduce using rule 10 (statement -> for .)
    BREAK           reduce using rule 10 (statement -> for .)
    RETURN          reduce using rule 10 (statement -> for .)
    IF              reduce using rule 10 (statement -> for .)
    FOR             reduce using rule 10 (statement -> for .)
    WHILE           reduce using rule 10 (statement -> for .)
    $end            reduce using rule 10 (statement -> for .)
    ELSE            reduce using rule 10 (statement -> for .)
    }               reduce using rule 10 (statement -> for .)


state 11

    (11) statement -> while .

    ID              reduce using rule 11 (statement -> while .)
    PRINT           reduce using rule 11 (statement -> while .)
    CONTINUE        reduce using rule 11 (statement -> while .)
    BREAK           reduce using rule 11 (statement -> while .)
    RETURN          reduce using rule 11 (statement -> while .)
    IF              reduce using rule 11 (statement -> while .)
    FOR             reduce using rule 11 (statement -> while .)
    WHILE           reduce using rule 11 (statement -> while .)
    $end            reduce using rule 11 (statement -> while .)
    ELSE            reduce using rule 11 (statement -> while .)
    }               reduce using rule 11 (statement -> while .)


state 12

    (20) assignment -> ID . assign_symbol expression
    (21) assignment -> ID . slice assign_symbol expression
    (22) assign_symbol -> . ASSIGN
    (23) assign_symbol -> . SUBASSIGN
    (24) assign_symbol -> . ADDASSIGN
    (25) assign_symbol -> . DIVASSIGN
    (26) assign_symbol -> . MULTASSIGN
    (55) slice -> . [ slice_contents ]

    ASSIGN          shift and go to state 28
    SUBASSIGN       shift and go to state 29
    ADDASSIGN       shift and go to state 30
    DIVASSIGN       shift and go to state 31
    MULTASSIGN      shift and go to state 32
    [               shift and go to state 33

    assign_symbol                  shift and go to state 26
    slice                          shift and go to state 27

state 13

    (17) print -> PRINT . coma_separated
    (18) coma_separated -> . expression
    (19) coma_separated -> . coma_separated , expression
    (27) expression -> . built_in_function ( term_list )
    (30) expression -> . term
    (31) expression -> . expression + term
    (32) expression -> . expression - term
    (33) expression -> . expression / term
    (34) expression -> . expression * term
    (35) expression -> . expression EQL term
    (36) expression -> . expression NEQ term
    (37) expression -> . expression GT term
    (38) expression -> . expression GTE term
    (39) expression -> . expression LT term
    (40) expression -> . expression LTE term
    (41) expression -> . - term
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 39
    ID              shift and go to state 40
    EYE             shift and go to state 42
    ONES            shift and go to state 43
    ZEROS           shift and go to state 44
    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    [               shift and go to state 48

    coma_separated                 shift and go to state 34
    expression                     shift and go to state 35
    built_in_function              shift and go to state 36
    term                           shift and go to state 38
    vector                         shift and go to state 41

state 14

    (16) continue -> CONTINUE .

    ;               reduce using rule 16 (continue -> CONTINUE .)


state 15

    (14) break -> BREAK .

    ;               reduce using rule 14 (break -> BREAK .)


state 16

    (15) return -> RETURN . expression
    (27) expression -> . built_in_function ( term_list )
    (30) expression -> . term
    (31) expression -> . expression + term
    (32) expression -> . expression - term
    (33) expression -> . expression / term
    (34) expression -> . expression * term
    (35) expression -> . expression EQL term
    (36) expression -> . expression NEQ term
    (37) expression -> . expression GT term
    (38) expression -> . expression GTE term
    (39) expression -> . expression LT term
    (40) expression -> . expression LTE term
    (41) expression -> . - term
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 39
    ID              shift and go to state 40
    EYE             shift and go to state 42
    ONES            shift and go to state 43
    ZEROS           shift and go to state 44
    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    [               shift and go to state 48

    expression                     shift and go to state 49
    built_in_function              shift and go to state 36
    term                           shift and go to state 38
    vector                         shift and go to state 41

state 17

    (62) if -> IF . condition nested
    (63) if -> IF . condition nested ELSE nested
    (64) condition -> . ( expression )

    (               shift and go to state 51

    condition                      shift and go to state 50

state 18

    (12) for -> FOR . ID ASSIGN expression : expression nested

    ID              shift and go to state 52


state 19

    (13) while -> WHILE . condition nested
    (64) condition -> . ( expression )

    (               shift and go to state 51

    condition                      shift and go to state 53

state 20

    (3) statements -> statements statement .

    ID              reduce using rule 3 (statements -> statements statement .)
    PRINT           reduce using rule 3 (statements -> statements statement .)
    CONTINUE        reduce using rule 3 (statements -> statements statement .)
    BREAK           reduce using rule 3 (statements -> statements statement .)
    RETURN          reduce using rule 3 (statements -> statements statement .)
    IF              reduce using rule 3 (statements -> statements statement .)
    FOR             reduce using rule 3 (statements -> statements statement .)
    WHILE           reduce using rule 3 (statements -> statements statement .)
    $end            reduce using rule 3 (statements -> statements statement .)
    }               reduce using rule 3 (statements -> statements statement .)


state 21

    (4) statement -> assignment ; .

    ID              reduce using rule 4 (statement -> assignment ; .)
    PRINT           reduce using rule 4 (statement -> assignment ; .)
    CONTINUE        reduce using rule 4 (statement -> assignment ; .)
    BREAK           reduce using rule 4 (statement -> assignment ; .)
    RETURN          reduce using rule 4 (statement -> assignment ; .)
    IF              reduce using rule 4 (statement -> assignment ; .)
    FOR             reduce using rule 4 (statement -> assignment ; .)
    WHILE           reduce using rule 4 (statement -> assignment ; .)
    $end            reduce using rule 4 (statement -> assignment ; .)
    ELSE            reduce using rule 4 (statement -> assignment ; .)
    }               reduce using rule 4 (statement -> assignment ; .)


state 22

    (5) statement -> print ; .

    ID              reduce using rule 5 (statement -> print ; .)
    PRINT           reduce using rule 5 (statement -> print ; .)
    CONTINUE        reduce using rule 5 (statement -> print ; .)
    BREAK           reduce using rule 5 (statement -> print ; .)
    RETURN          reduce using rule 5 (statement -> print ; .)
    IF              reduce using rule 5 (statement -> print ; .)
    FOR             reduce using rule 5 (statement -> print ; .)
    WHILE           reduce using rule 5 (statement -> print ; .)
    $end            reduce using rule 5 (statement -> print ; .)
    ELSE            reduce using rule 5 (statement -> print ; .)
    }               reduce using rule 5 (statement -> print ; .)


state 23

    (6) statement -> continue ; .

    ID              reduce using rule 6 (statement -> continue ; .)
    PRINT           reduce using rule 6 (statement -> continue ; .)
    CONTINUE        reduce using rule 6 (statement -> continue ; .)
    BREAK           reduce using rule 6 (statement -> continue ; .)
    RETURN          reduce using rule 6 (statement -> continue ; .)
    IF              reduce using rule 6 (statement -> continue ; .)
    FOR             reduce using rule 6 (statement -> continue ; .)
    WHILE           reduce using rule 6 (statement -> continue ; .)
    $end            reduce using rule 6 (statement -> continue ; .)
    ELSE            reduce using rule 6 (statement -> continue ; .)
    }               reduce using rule 6 (statement -> continue ; .)


state 24

    (7) statement -> break ; .

    ID              reduce using rule 7 (statement -> break ; .)
    PRINT           reduce using rule 7 (statement -> break ; .)
    CONTINUE        reduce using rule 7 (statement -> break ; .)
    BREAK           reduce using rule 7 (statement -> break ; .)
    RETURN          reduce using rule 7 (statement -> break ; .)
    IF              reduce using rule 7 (statement -> break ; .)
    FOR             reduce using rule 7 (statement -> break ; .)
    WHILE           reduce using rule 7 (statement -> break ; .)
    $end            reduce using rule 7 (statement -> break ; .)
    ELSE            reduce using rule 7 (statement -> break ; .)
    }               reduce using rule 7 (statement -> break ; .)


state 25

    (8) statement -> return ; .

    ID              reduce using rule 8 (statement -> return ; .)
    PRINT           reduce using rule 8 (statement -> return ; .)
    CONTINUE        reduce using rule 8 (statement -> return ; .)
    BREAK           reduce using rule 8 (statement -> return ; .)
    RETURN          reduce using rule 8 (statement -> return ; .)
    IF              reduce using rule 8 (statement -> return ; .)
    FOR             reduce using rule 8 (statement -> return ; .)
    WHILE           reduce using rule 8 (statement -> return ; .)
    $end            reduce using rule 8 (statement -> return ; .)
    ELSE            reduce using rule 8 (statement -> return ; .)
    }               reduce using rule 8 (statement -> return ; .)


state 26

    (20) assignment -> ID assign_symbol . expression
    (27) expression -> . built_in_function ( term_list )
    (30) expression -> . term
    (31) expression -> . expression + term
    (32) expression -> . expression - term
    (33) expression -> . expression / term
    (34) expression -> . expression * term
    (35) expression -> . expression EQL term
    (36) expression -> . expression NEQ term
    (37) expression -> . expression GT term
    (38) expression -> . expression GTE term
    (39) expression -> . expression LT term
    (40) expression -> . expression LTE term
    (41) expression -> . - term
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 39
    ID              shift and go to state 40
    EYE             shift and go to state 42
    ONES            shift and go to state 43
    ZEROS           shift and go to state 44
    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    [               shift and go to state 48

    expression                     shift and go to state 54
    built_in_function              shift and go to state 36
    term                           shift and go to state 38
    vector                         shift and go to state 41

state 27

    (21) assignment -> ID slice . assign_symbol expression
    (22) assign_symbol -> . ASSIGN
    (23) assign_symbol -> . SUBASSIGN
    (24) assign_symbol -> . ADDASSIGN
    (25) assign_symbol -> . DIVASSIGN
    (26) assign_symbol -> . MULTASSIGN

    ASSIGN          shift and go to state 28
    SUBASSIGN       shift and go to state 29
    ADDASSIGN       shift and go to state 30
    DIVASSIGN       shift and go to state 31
    MULTASSIGN      shift and go to state 32

    assign_symbol                  shift and go to state 55

state 28

    (22) assign_symbol -> ASSIGN .

    -               reduce using rule 22 (assign_symbol -> ASSIGN .)
    ID              reduce using rule 22 (assign_symbol -> ASSIGN .)
    EYE             reduce using rule 22 (assign_symbol -> ASSIGN .)
    ONES            reduce using rule 22 (assign_symbol -> ASSIGN .)
    ZEROS           reduce using rule 22 (assign_symbol -> ASSIGN .)
    (               reduce using rule 22 (assign_symbol -> ASSIGN .)
    INTNUM          reduce using rule 22 (assign_symbol -> ASSIGN .)
    FLOATNUM        reduce using rule 22 (assign_symbol -> ASSIGN .)
    STR             reduce using rule 22 (assign_symbol -> ASSIGN .)
    [               reduce using rule 22 (assign_symbol -> ASSIGN .)


state 29

    (23) assign_symbol -> SUBASSIGN .

    -               reduce using rule 23 (assign_symbol -> SUBASSIGN .)
    ID              reduce using rule 23 (assign_symbol -> SUBASSIGN .)
    EYE             reduce using rule 23 (assign_symbol -> SUBASSIGN .)
    ONES            reduce using rule 23 (assign_symbol -> SUBASSIGN .)
    ZEROS           reduce using rule 23 (assign_symbol -> SUBASSIGN .)
    (               reduce using rule 23 (assign_symbol -> SUBASSIGN .)
    INTNUM          reduce using rule 23 (assign_symbol -> SUBASSIGN .)
    FLOATNUM        reduce using rule 23 (assign_symbol -> SUBASSIGN .)
    STR             reduce using rule 23 (assign_symbol -> SUBASSIGN .)
    [               reduce using rule 23 (assign_symbol -> SUBASSIGN .)


state 30

    (24) assign_symbol -> ADDASSIGN .

    -               reduce using rule 24 (assign_symbol -> ADDASSIGN .)
    ID              reduce using rule 24 (assign_symbol -> ADDASSIGN .)
    EYE             reduce using rule 24 (assign_symbol -> ADDASSIGN .)
    ONES            reduce using rule 24 (assign_symbol -> ADDASSIGN .)
    ZEROS           reduce using rule 24 (assign_symbol -> ADDASSIGN .)
    (               reduce using rule 24 (assign_symbol -> ADDASSIGN .)
    INTNUM          reduce using rule 24 (assign_symbol -> ADDASSIGN .)
    FLOATNUM        reduce using rule 24 (assign_symbol -> ADDASSIGN .)
    STR             reduce using rule 24 (assign_symbol -> ADDASSIGN .)
    [               reduce using rule 24 (assign_symbol -> ADDASSIGN .)


state 31

    (25) assign_symbol -> DIVASSIGN .

    -               reduce using rule 25 (assign_symbol -> DIVASSIGN .)
    ID              reduce using rule 25 (assign_symbol -> DIVASSIGN .)
    EYE             reduce using rule 25 (assign_symbol -> DIVASSIGN .)
    ONES            reduce using rule 25 (assign_symbol -> DIVASSIGN .)
    ZEROS           reduce using rule 25 (assign_symbol -> DIVASSIGN .)
    (               reduce using rule 25 (assign_symbol -> DIVASSIGN .)
    INTNUM          reduce using rule 25 (assign_symbol -> DIVASSIGN .)
    FLOATNUM        reduce using rule 25 (assign_symbol -> DIVASSIGN .)
    STR             reduce using rule 25 (assign_symbol -> DIVASSIGN .)
    [               reduce using rule 25 (assign_symbol -> DIVASSIGN .)


state 32

    (26) assign_symbol -> MULTASSIGN .

    -               reduce using rule 26 (assign_symbol -> MULTASSIGN .)
    ID              reduce using rule 26 (assign_symbol -> MULTASSIGN .)
    EYE             reduce using rule 26 (assign_symbol -> MULTASSIGN .)
    ONES            reduce using rule 26 (assign_symbol -> MULTASSIGN .)
    ZEROS           reduce using rule 26 (assign_symbol -> MULTASSIGN .)
    (               reduce using rule 26 (assign_symbol -> MULTASSIGN .)
    INTNUM          reduce using rule 26 (assign_symbol -> MULTASSIGN .)
    FLOATNUM        reduce using rule 26 (assign_symbol -> MULTASSIGN .)
    STR             reduce using rule 26 (assign_symbol -> MULTASSIGN .)
    [               reduce using rule 26 (assign_symbol -> MULTASSIGN .)


state 33

    (55) slice -> [ . slice_contents ]
    (56) slice_contents -> . range
    (57) slice_contents -> . slice_contents , range
    (58) range -> . term : term
    (59) range -> . term :
    (60) range -> . : term
    (61) range -> . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    :               shift and go to state 59
    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    ID              shift and go to state 61
    [               shift and go to state 48

    slice_contents                 shift and go to state 56
    range                          shift and go to state 57
    term                           shift and go to state 58
    vector                         shift and go to state 60

state 34

    (17) print -> PRINT coma_separated .
    (19) coma_separated -> coma_separated . , expression

    ;               reduce using rule 17 (print -> PRINT coma_separated .)
    ,               shift and go to state 62


state 35

    (18) coma_separated -> expression .
    (31) expression -> expression . + term
    (32) expression -> expression . - term
    (33) expression -> expression . / term
    (34) expression -> expression . * term
    (35) expression -> expression . EQL term
    (36) expression -> expression . NEQ term
    (37) expression -> expression . GT term
    (38) expression -> expression . GTE term
    (39) expression -> expression . LT term
    (40) expression -> expression . LTE term

    ,               reduce using rule 18 (coma_separated -> expression .)
    ;               reduce using rule 18 (coma_separated -> expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    EQL             shift and go to state 67
    NEQ             shift and go to state 68
    GT              shift and go to state 69
    GTE             shift and go to state 70
    LT              shift and go to state 71
    LTE             shift and go to state 72


state 36

    (27) expression -> built_in_function . ( term_list )

    (               shift and go to state 73


state 37

    (67) term -> ( . expression )
    (27) expression -> . built_in_function ( term_list )
    (30) expression -> . term
    (31) expression -> . expression + term
    (32) expression -> . expression - term
    (33) expression -> . expression / term
    (34) expression -> . expression * term
    (35) expression -> . expression EQL term
    (36) expression -> . expression NEQ term
    (37) expression -> . expression GT term
    (38) expression -> . expression GTE term
    (39) expression -> . expression LT term
    (40) expression -> . expression LTE term
    (41) expression -> . - term
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 39
    ID              shift and go to state 40
    EYE             shift and go to state 42
    ONES            shift and go to state 43
    ZEROS           shift and go to state 44
    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    [               shift and go to state 48

    expression                     shift and go to state 74
    built_in_function              shift and go to state 36
    term                           shift and go to state 38
    vector                         shift and go to state 41

state 38

    (30) expression -> term .

    +               reduce using rule 30 (expression -> term .)
    -               reduce using rule 30 (expression -> term .)
    /               reduce using rule 30 (expression -> term .)
    *               reduce using rule 30 (expression -> term .)
    EQL             reduce using rule 30 (expression -> term .)
    NEQ             reduce using rule 30 (expression -> term .)
    GT              reduce using rule 30 (expression -> term .)
    GTE             reduce using rule 30 (expression -> term .)
    LT              reduce using rule 30 (expression -> term .)
    LTE             reduce using rule 30 (expression -> term .)
    ,               reduce using rule 30 (expression -> term .)
    ;               reduce using rule 30 (expression -> term .)
    )               reduce using rule 30 (expression -> term .)
    :               reduce using rule 30 (expression -> term .)
    {               reduce using rule 30 (expression -> term .)
    ID              reduce using rule 30 (expression -> term .)
    PRINT           reduce using rule 30 (expression -> term .)
    CONTINUE        reduce using rule 30 (expression -> term .)
    BREAK           reduce using rule 30 (expression -> term .)
    RETURN          reduce using rule 30 (expression -> term .)
    IF              reduce using rule 30 (expression -> term .)
    FOR             reduce using rule 30 (expression -> term .)
    WHILE           reduce using rule 30 (expression -> term .)


state 39

    (41) expression -> - . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    ID              shift and go to state 61
    [               shift and go to state 48

    term                           shift and go to state 75
    vector                         shift and go to state 60

state 40

    (44) expression -> ID . dot_operation term
    (72) term -> ID .
    (42) vector -> ID . TRANSPOSE
    (46) dot_operation -> . DOTADD
    (47) dot_operation -> . DOTSUB
    (48) dot_operation -> . DOTMUL
    (49) dot_operation -> . DOTDIV

    +               reduce using rule 72 (term -> ID .)
    -               reduce using rule 72 (term -> ID .)
    /               reduce using rule 72 (term -> ID .)
    *               reduce using rule 72 (term -> ID .)
    EQL             reduce using rule 72 (term -> ID .)
    NEQ             reduce using rule 72 (term -> ID .)
    GT              reduce using rule 72 (term -> ID .)
    GTE             reduce using rule 72 (term -> ID .)
    LT              reduce using rule 72 (term -> ID .)
    LTE             reduce using rule 72 (term -> ID .)
    ,               reduce using rule 72 (term -> ID .)
    ;               reduce using rule 72 (term -> ID .)
    )               reduce using rule 72 (term -> ID .)
    :               reduce using rule 72 (term -> ID .)
    {               reduce using rule 72 (term -> ID .)
    ID              reduce using rule 72 (term -> ID .)
    PRINT           reduce using rule 72 (term -> ID .)
    CONTINUE        reduce using rule 72 (term -> ID .)
    BREAK           reduce using rule 72 (term -> ID .)
    RETURN          reduce using rule 72 (term -> ID .)
    IF              reduce using rule 72 (term -> ID .)
    FOR             reduce using rule 72 (term -> ID .)
    WHILE           reduce using rule 72 (term -> ID .)
    TRANSPOSE       shift and go to state 77
    DOTADD          shift and go to state 78
    DOTSUB          shift and go to state 79
    DOTMUL          shift and go to state 80
    DOTDIV          shift and go to state 81

    dot_operation                  shift and go to state 76

state 41

    (45) expression -> vector . dot_operation term
    (68) term -> vector .
    (43) vector -> vector . TRANSPOSE
    (46) dot_operation -> . DOTADD
    (47) dot_operation -> . DOTSUB
    (48) dot_operation -> . DOTMUL
    (49) dot_operation -> . DOTDIV

    +               reduce using rule 68 (term -> vector .)
    -               reduce using rule 68 (term -> vector .)
    /               reduce using rule 68 (term -> vector .)
    *               reduce using rule 68 (term -> vector .)
    EQL             reduce using rule 68 (term -> vector .)
    NEQ             reduce using rule 68 (term -> vector .)
    GT              reduce using rule 68 (term -> vector .)
    GTE             reduce using rule 68 (term -> vector .)
    LT              reduce using rule 68 (term -> vector .)
    LTE             reduce using rule 68 (term -> vector .)
    ,               reduce using rule 68 (term -> vector .)
    ;               reduce using rule 68 (term -> vector .)
    )               reduce using rule 68 (term -> vector .)
    :               reduce using rule 68 (term -> vector .)
    {               reduce using rule 68 (term -> vector .)
    ID              reduce using rule 68 (term -> vector .)
    PRINT           reduce using rule 68 (term -> vector .)
    CONTINUE        reduce using rule 68 (term -> vector .)
    BREAK           reduce using rule 68 (term -> vector .)
    RETURN          reduce using rule 68 (term -> vector .)
    IF              reduce using rule 68 (term -> vector .)
    FOR             reduce using rule 68 (term -> vector .)
    WHILE           reduce using rule 68 (term -> vector .)
    TRANSPOSE       shift and go to state 83
    DOTADD          shift and go to state 78
    DOTSUB          shift and go to state 79
    DOTMUL          shift and go to state 80
    DOTDIV          shift and go to state 81

    dot_operation                  shift and go to state 82

state 42

    (73) built_in_function -> EYE .

    (               reduce using rule 73 (built_in_function -> EYE .)


state 43

    (74) built_in_function -> ONES .

    (               reduce using rule 74 (built_in_function -> ONES .)


state 44

    (75) built_in_function -> ZEROS .

    (               reduce using rule 75 (built_in_function -> ZEROS .)


state 45

    (69) term -> INTNUM .

    +               reduce using rule 69 (term -> INTNUM .)
    -               reduce using rule 69 (term -> INTNUM .)
    /               reduce using rule 69 (term -> INTNUM .)
    *               reduce using rule 69 (term -> INTNUM .)
    EQL             reduce using rule 69 (term -> INTNUM .)
    NEQ             reduce using rule 69 (term -> INTNUM .)
    GT              reduce using rule 69 (term -> INTNUM .)
    GTE             reduce using rule 69 (term -> INTNUM .)
    LT              reduce using rule 69 (term -> INTNUM .)
    LTE             reduce using rule 69 (term -> INTNUM .)
    ,               reduce using rule 69 (term -> INTNUM .)
    ;               reduce using rule 69 (term -> INTNUM .)
    :               reduce using rule 69 (term -> INTNUM .)
    ]               reduce using rule 69 (term -> INTNUM .)
    )               reduce using rule 69 (term -> INTNUM .)
    {               reduce using rule 69 (term -> INTNUM .)
    ID              reduce using rule 69 (term -> INTNUM .)
    PRINT           reduce using rule 69 (term -> INTNUM .)
    CONTINUE        reduce using rule 69 (term -> INTNUM .)
    BREAK           reduce using rule 69 (term -> INTNUM .)
    RETURN          reduce using rule 69 (term -> INTNUM .)
    IF              reduce using rule 69 (term -> INTNUM .)
    FOR             reduce using rule 69 (term -> INTNUM .)
    WHILE           reduce using rule 69 (term -> INTNUM .)


state 46

    (70) term -> FLOATNUM .

    +               reduce using rule 70 (term -> FLOATNUM .)
    -               reduce using rule 70 (term -> FLOATNUM .)
    /               reduce using rule 70 (term -> FLOATNUM .)
    *               reduce using rule 70 (term -> FLOATNUM .)
    EQL             reduce using rule 70 (term -> FLOATNUM .)
    NEQ             reduce using rule 70 (term -> FLOATNUM .)
    GT              reduce using rule 70 (term -> FLOATNUM .)
    GTE             reduce using rule 70 (term -> FLOATNUM .)
    LT              reduce using rule 70 (term -> FLOATNUM .)
    LTE             reduce using rule 70 (term -> FLOATNUM .)
    ,               reduce using rule 70 (term -> FLOATNUM .)
    ;               reduce using rule 70 (term -> FLOATNUM .)
    :               reduce using rule 70 (term -> FLOATNUM .)
    ]               reduce using rule 70 (term -> FLOATNUM .)
    )               reduce using rule 70 (term -> FLOATNUM .)
    {               reduce using rule 70 (term -> FLOATNUM .)
    ID              reduce using rule 70 (term -> FLOATNUM .)
    PRINT           reduce using rule 70 (term -> FLOATNUM .)
    CONTINUE        reduce using rule 70 (term -> FLOATNUM .)
    BREAK           reduce using rule 70 (term -> FLOATNUM .)
    RETURN          reduce using rule 70 (term -> FLOATNUM .)
    IF              reduce using rule 70 (term -> FLOATNUM .)
    FOR             reduce using rule 70 (term -> FLOATNUM .)
    WHILE           reduce using rule 70 (term -> FLOATNUM .)


state 47

    (71) term -> STR .

    +               reduce using rule 71 (term -> STR .)
    -               reduce using rule 71 (term -> STR .)
    /               reduce using rule 71 (term -> STR .)
    *               reduce using rule 71 (term -> STR .)
    EQL             reduce using rule 71 (term -> STR .)
    NEQ             reduce using rule 71 (term -> STR .)
    GT              reduce using rule 71 (term -> STR .)
    GTE             reduce using rule 71 (term -> STR .)
    LT              reduce using rule 71 (term -> STR .)
    LTE             reduce using rule 71 (term -> STR .)
    ,               reduce using rule 71 (term -> STR .)
    ;               reduce using rule 71 (term -> STR .)
    :               reduce using rule 71 (term -> STR .)
    ]               reduce using rule 71 (term -> STR .)
    )               reduce using rule 71 (term -> STR .)
    {               reduce using rule 71 (term -> STR .)
    ID              reduce using rule 71 (term -> STR .)
    PRINT           reduce using rule 71 (term -> STR .)
    CONTINUE        reduce using rule 71 (term -> STR .)
    BREAK           reduce using rule 71 (term -> STR .)
    RETURN          reduce using rule 71 (term -> STR .)
    IF              reduce using rule 71 (term -> STR .)
    FOR             reduce using rule 71 (term -> STR .)
    WHILE           reduce using rule 71 (term -> STR .)


state 48

    (50) vector -> [ . vector_contents ]
    (51) vector -> [ . ]
    (52) vector_contents -> . vector_contents , vector_element
    (53) vector_contents -> . vector_element
    (54) vector_element -> . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    ]               shift and go to state 85
    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    ID              shift and go to state 61
    [               shift and go to state 48

    vector_contents                shift and go to state 84
    vector_element                 shift and go to state 86
    term                           shift and go to state 87
    vector                         shift and go to state 60

state 49

    (15) return -> RETURN expression .
    (31) expression -> expression . + term
    (32) expression -> expression . - term
    (33) expression -> expression . / term
    (34) expression -> expression . * term
    (35) expression -> expression . EQL term
    (36) expression -> expression . NEQ term
    (37) expression -> expression . GT term
    (38) expression -> expression . GTE term
    (39) expression -> expression . LT term
    (40) expression -> expression . LTE term

    ;               reduce using rule 15 (return -> RETURN expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    EQL             shift and go to state 67
    NEQ             shift and go to state 68
    GT              shift and go to state 69
    GTE             shift and go to state 70
    LT              shift and go to state 71
    LTE             shift and go to state 72


state 50

    (62) if -> IF condition . nested
    (63) if -> IF condition . nested ELSE nested
    (65) nested -> . { statements }
    (66) nested -> . statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if
    (10) statement -> . for
    (11) statement -> . while
    (20) assignment -> . ID assign_symbol expression
    (21) assignment -> . ID slice assign_symbol expression
    (17) print -> . PRINT coma_separated
    (16) continue -> . CONTINUE
    (14) break -> . BREAK
    (15) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (12) for -> . FOR ID ASSIGN expression : expression nested
    (13) while -> . WHILE condition nested

    {               shift and go to state 89
    ID              shift and go to state 12
    PRINT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    RETURN          shift and go to state 16
    IF              shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19

    nested                         shift and go to state 88
    statement                      shift and go to state 90
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if                             shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11

state 51

    (64) condition -> ( . expression )
    (27) expression -> . built_in_function ( term_list )
    (30) expression -> . term
    (31) expression -> . expression + term
    (32) expression -> . expression - term
    (33) expression -> . expression / term
    (34) expression -> . expression * term
    (35) expression -> . expression EQL term
    (36) expression -> . expression NEQ term
    (37) expression -> . expression GT term
    (38) expression -> . expression GTE term
    (39) expression -> . expression LT term
    (40) expression -> . expression LTE term
    (41) expression -> . - term
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 39
    ID              shift and go to state 40
    EYE             shift and go to state 42
    ONES            shift and go to state 43
    ZEROS           shift and go to state 44
    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    [               shift and go to state 48

    expression                     shift and go to state 91
    built_in_function              shift and go to state 36
    term                           shift and go to state 38
    vector                         shift and go to state 41

state 52

    (12) for -> FOR ID . ASSIGN expression : expression nested

    ASSIGN          shift and go to state 92


state 53

    (13) while -> WHILE condition . nested
    (65) nested -> . { statements }
    (66) nested -> . statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if
    (10) statement -> . for
    (11) statement -> . while
    (20) assignment -> . ID assign_symbol expression
    (21) assignment -> . ID slice assign_symbol expression
    (17) print -> . PRINT coma_separated
    (16) continue -> . CONTINUE
    (14) break -> . BREAK
    (15) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (12) for -> . FOR ID ASSIGN expression : expression nested
    (13) while -> . WHILE condition nested

    {               shift and go to state 89
    ID              shift and go to state 12
    PRINT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    RETURN          shift and go to state 16
    IF              shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19

    nested                         shift and go to state 93
    statement                      shift and go to state 90
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if                             shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11

state 54

    (20) assignment -> ID assign_symbol expression .
    (31) expression -> expression . + term
    (32) expression -> expression . - term
    (33) expression -> expression . / term
    (34) expression -> expression . * term
    (35) expression -> expression . EQL term
    (36) expression -> expression . NEQ term
    (37) expression -> expression . GT term
    (38) expression -> expression . GTE term
    (39) expression -> expression . LT term
    (40) expression -> expression . LTE term

    ;               reduce using rule 20 (assignment -> ID assign_symbol expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    EQL             shift and go to state 67
    NEQ             shift and go to state 68
    GT              shift and go to state 69
    GTE             shift and go to state 70
    LT              shift and go to state 71
    LTE             shift and go to state 72


state 55

    (21) assignment -> ID slice assign_symbol . expression
    (27) expression -> . built_in_function ( term_list )
    (30) expression -> . term
    (31) expression -> . expression + term
    (32) expression -> . expression - term
    (33) expression -> . expression / term
    (34) expression -> . expression * term
    (35) expression -> . expression EQL term
    (36) expression -> . expression NEQ term
    (37) expression -> . expression GT term
    (38) expression -> . expression GTE term
    (39) expression -> . expression LT term
    (40) expression -> . expression LTE term
    (41) expression -> . - term
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 39
    ID              shift and go to state 40
    EYE             shift and go to state 42
    ONES            shift and go to state 43
    ZEROS           shift and go to state 44
    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    [               shift and go to state 48

    expression                     shift and go to state 94
    built_in_function              shift and go to state 36
    term                           shift and go to state 38
    vector                         shift and go to state 41

state 56

    (55) slice -> [ slice_contents . ]
    (57) slice_contents -> slice_contents . , range

    ]               shift and go to state 95
    ,               shift and go to state 96


state 57

    (56) slice_contents -> range .

    ]               reduce using rule 56 (slice_contents -> range .)
    ,               reduce using rule 56 (slice_contents -> range .)


state 58

    (58) range -> term . : term
    (59) range -> term . :
    (61) range -> term .

    :               shift and go to state 97
    ]               reduce using rule 61 (range -> term .)
    ,               reduce using rule 61 (range -> term .)


state 59

    (60) range -> : . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    ID              shift and go to state 61
    [               shift and go to state 48

    term                           shift and go to state 98
    vector                         shift and go to state 60

state 60

    (68) term -> vector .
    (43) vector -> vector . TRANSPOSE

    :               reduce using rule 68 (term -> vector .)
    ]               reduce using rule 68 (term -> vector .)
    ,               reduce using rule 68 (term -> vector .)
    +               reduce using rule 68 (term -> vector .)
    -               reduce using rule 68 (term -> vector .)
    /               reduce using rule 68 (term -> vector .)
    *               reduce using rule 68 (term -> vector .)
    EQL             reduce using rule 68 (term -> vector .)
    NEQ             reduce using rule 68 (term -> vector .)
    GT              reduce using rule 68 (term -> vector .)
    GTE             reduce using rule 68 (term -> vector .)
    LT              reduce using rule 68 (term -> vector .)
    LTE             reduce using rule 68 (term -> vector .)
    ;               reduce using rule 68 (term -> vector .)
    )               reduce using rule 68 (term -> vector .)
    {               reduce using rule 68 (term -> vector .)
    ID              reduce using rule 68 (term -> vector .)
    PRINT           reduce using rule 68 (term -> vector .)
    CONTINUE        reduce using rule 68 (term -> vector .)
    BREAK           reduce using rule 68 (term -> vector .)
    RETURN          reduce using rule 68 (term -> vector .)
    IF              reduce using rule 68 (term -> vector .)
    FOR             reduce using rule 68 (term -> vector .)
    WHILE           reduce using rule 68 (term -> vector .)
    TRANSPOSE       shift and go to state 83


state 61

    (72) term -> ID .
    (42) vector -> ID . TRANSPOSE

    :               reduce using rule 72 (term -> ID .)
    ]               reduce using rule 72 (term -> ID .)
    ,               reduce using rule 72 (term -> ID .)
    +               reduce using rule 72 (term -> ID .)
    -               reduce using rule 72 (term -> ID .)
    /               reduce using rule 72 (term -> ID .)
    *               reduce using rule 72 (term -> ID .)
    EQL             reduce using rule 72 (term -> ID .)
    NEQ             reduce using rule 72 (term -> ID .)
    GT              reduce using rule 72 (term -> ID .)
    GTE             reduce using rule 72 (term -> ID .)
    LT              reduce using rule 72 (term -> ID .)
    LTE             reduce using rule 72 (term -> ID .)
    ;               reduce using rule 72 (term -> ID .)
    )               reduce using rule 72 (term -> ID .)
    {               reduce using rule 72 (term -> ID .)
    ID              reduce using rule 72 (term -> ID .)
    PRINT           reduce using rule 72 (term -> ID .)
    CONTINUE        reduce using rule 72 (term -> ID .)
    BREAK           reduce using rule 72 (term -> ID .)
    RETURN          reduce using rule 72 (term -> ID .)
    IF              reduce using rule 72 (term -> ID .)
    FOR             reduce using rule 72 (term -> ID .)
    WHILE           reduce using rule 72 (term -> ID .)
    TRANSPOSE       shift and go to state 77


state 62

    (19) coma_separated -> coma_separated , . expression
    (27) expression -> . built_in_function ( term_list )
    (30) expression -> . term
    (31) expression -> . expression + term
    (32) expression -> . expression - term
    (33) expression -> . expression / term
    (34) expression -> . expression * term
    (35) expression -> . expression EQL term
    (36) expression -> . expression NEQ term
    (37) expression -> . expression GT term
    (38) expression -> . expression GTE term
    (39) expression -> . expression LT term
    (40) expression -> . expression LTE term
    (41) expression -> . - term
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 39
    ID              shift and go to state 40
    EYE             shift and go to state 42
    ONES            shift and go to state 43
    ZEROS           shift and go to state 44
    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    [               shift and go to state 48

    expression                     shift and go to state 99
    built_in_function              shift and go to state 36
    term                           shift and go to state 38
    vector                         shift and go to state 41

state 63

    (31) expression -> expression + . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    ID              shift and go to state 61
    [               shift and go to state 48

    term                           shift and go to state 100
    vector                         shift and go to state 60

state 64

    (32) expression -> expression - . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    ID              shift and go to state 61
    [               shift and go to state 48

    term                           shift and go to state 101
    vector                         shift and go to state 60

state 65

    (33) expression -> expression / . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    ID              shift and go to state 61
    [               shift and go to state 48

    term                           shift and go to state 102
    vector                         shift and go to state 60

state 66

    (34) expression -> expression * . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    ID              shift and go to state 61
    [               shift and go to state 48

    term                           shift and go to state 103
    vector                         shift and go to state 60

state 67

    (35) expression -> expression EQL . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    ID              shift and go to state 61
    [               shift and go to state 48

    term                           shift and go to state 104
    vector                         shift and go to state 60

state 68

    (36) expression -> expression NEQ . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    ID              shift and go to state 61
    [               shift and go to state 48

    term                           shift and go to state 105
    vector                         shift and go to state 60

state 69

    (37) expression -> expression GT . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    ID              shift and go to state 61
    [               shift and go to state 48

    term                           shift and go to state 106
    vector                         shift and go to state 60

state 70

    (38) expression -> expression GTE . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    ID              shift and go to state 61
    [               shift and go to state 48

    term                           shift and go to state 107
    vector                         shift and go to state 60

state 71

    (39) expression -> expression LT . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    ID              shift and go to state 61
    [               shift and go to state 48

    term                           shift and go to state 108
    vector                         shift and go to state 60

state 72

    (40) expression -> expression LTE . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    ID              shift and go to state 61
    [               shift and go to state 48

    term                           shift and go to state 109
    vector                         shift and go to state 60

state 73

    (27) expression -> built_in_function ( . term_list )
    (28) term_list -> . term
    (29) term_list -> . term_list , term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    ID              shift and go to state 61
    [               shift and go to state 48

    term_list                      shift and go to state 110
    term                           shift and go to state 111
    vector                         shift and go to state 60

state 74

    (67) term -> ( expression . )
    (31) expression -> expression . + term
    (32) expression -> expression . - term
    (33) expression -> expression . / term
    (34) expression -> expression . * term
    (35) expression -> expression . EQL term
    (36) expression -> expression . NEQ term
    (37) expression -> expression . GT term
    (38) expression -> expression . GTE term
    (39) expression -> expression . LT term
    (40) expression -> expression . LTE term

    )               shift and go to state 112
    +               shift and go to state 63
    -               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    EQL             shift and go to state 67
    NEQ             shift and go to state 68
    GT              shift and go to state 69
    GTE             shift and go to state 70
    LT              shift and go to state 71
    LTE             shift and go to state 72


state 75

    (41) expression -> - term .

    +               reduce using rule 41 (expression -> - term .)
    -               reduce using rule 41 (expression -> - term .)
    /               reduce using rule 41 (expression -> - term .)
    *               reduce using rule 41 (expression -> - term .)
    EQL             reduce using rule 41 (expression -> - term .)
    NEQ             reduce using rule 41 (expression -> - term .)
    GT              reduce using rule 41 (expression -> - term .)
    GTE             reduce using rule 41 (expression -> - term .)
    LT              reduce using rule 41 (expression -> - term .)
    LTE             reduce using rule 41 (expression -> - term .)
    ,               reduce using rule 41 (expression -> - term .)
    ;               reduce using rule 41 (expression -> - term .)
    )               reduce using rule 41 (expression -> - term .)
    :               reduce using rule 41 (expression -> - term .)
    {               reduce using rule 41 (expression -> - term .)
    ID              reduce using rule 41 (expression -> - term .)
    PRINT           reduce using rule 41 (expression -> - term .)
    CONTINUE        reduce using rule 41 (expression -> - term .)
    BREAK           reduce using rule 41 (expression -> - term .)
    RETURN          reduce using rule 41 (expression -> - term .)
    IF              reduce using rule 41 (expression -> - term .)
    FOR             reduce using rule 41 (expression -> - term .)
    WHILE           reduce using rule 41 (expression -> - term .)


state 76

    (44) expression -> ID dot_operation . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    ID              shift and go to state 61
    [               shift and go to state 48

    term                           shift and go to state 113
    vector                         shift and go to state 60

state 77

    (42) vector -> ID TRANSPOSE .

    TRANSPOSE       reduce using rule 42 (vector -> ID TRANSPOSE .)
    DOTADD          reduce using rule 42 (vector -> ID TRANSPOSE .)
    DOTSUB          reduce using rule 42 (vector -> ID TRANSPOSE .)
    DOTMUL          reduce using rule 42 (vector -> ID TRANSPOSE .)
    DOTDIV          reduce using rule 42 (vector -> ID TRANSPOSE .)
    +               reduce using rule 42 (vector -> ID TRANSPOSE .)
    -               reduce using rule 42 (vector -> ID TRANSPOSE .)
    /               reduce using rule 42 (vector -> ID TRANSPOSE .)
    *               reduce using rule 42 (vector -> ID TRANSPOSE .)
    EQL             reduce using rule 42 (vector -> ID TRANSPOSE .)
    NEQ             reduce using rule 42 (vector -> ID TRANSPOSE .)
    GT              reduce using rule 42 (vector -> ID TRANSPOSE .)
    GTE             reduce using rule 42 (vector -> ID TRANSPOSE .)
    LT              reduce using rule 42 (vector -> ID TRANSPOSE .)
    LTE             reduce using rule 42 (vector -> ID TRANSPOSE .)
    ,               reduce using rule 42 (vector -> ID TRANSPOSE .)
    ;               reduce using rule 42 (vector -> ID TRANSPOSE .)
    :               reduce using rule 42 (vector -> ID TRANSPOSE .)
    ]               reduce using rule 42 (vector -> ID TRANSPOSE .)
    )               reduce using rule 42 (vector -> ID TRANSPOSE .)
    {               reduce using rule 42 (vector -> ID TRANSPOSE .)
    ID              reduce using rule 42 (vector -> ID TRANSPOSE .)
    PRINT           reduce using rule 42 (vector -> ID TRANSPOSE .)
    CONTINUE        reduce using rule 42 (vector -> ID TRANSPOSE .)
    BREAK           reduce using rule 42 (vector -> ID TRANSPOSE .)
    RETURN          reduce using rule 42 (vector -> ID TRANSPOSE .)
    IF              reduce using rule 42 (vector -> ID TRANSPOSE .)
    FOR             reduce using rule 42 (vector -> ID TRANSPOSE .)
    WHILE           reduce using rule 42 (vector -> ID TRANSPOSE .)


state 78

    (46) dot_operation -> DOTADD .

    (               reduce using rule 46 (dot_operation -> DOTADD .)
    INTNUM          reduce using rule 46 (dot_operation -> DOTADD .)
    FLOATNUM        reduce using rule 46 (dot_operation -> DOTADD .)
    STR             reduce using rule 46 (dot_operation -> DOTADD .)
    ID              reduce using rule 46 (dot_operation -> DOTADD .)
    [               reduce using rule 46 (dot_operation -> DOTADD .)


state 79

    (47) dot_operation -> DOTSUB .

    (               reduce using rule 47 (dot_operation -> DOTSUB .)
    INTNUM          reduce using rule 47 (dot_operation -> DOTSUB .)
    FLOATNUM        reduce using rule 47 (dot_operation -> DOTSUB .)
    STR             reduce using rule 47 (dot_operation -> DOTSUB .)
    ID              reduce using rule 47 (dot_operation -> DOTSUB .)
    [               reduce using rule 47 (dot_operation -> DOTSUB .)


state 80

    (48) dot_operation -> DOTMUL .

    (               reduce using rule 48 (dot_operation -> DOTMUL .)
    INTNUM          reduce using rule 48 (dot_operation -> DOTMUL .)
    FLOATNUM        reduce using rule 48 (dot_operation -> DOTMUL .)
    STR             reduce using rule 48 (dot_operation -> DOTMUL .)
    ID              reduce using rule 48 (dot_operation -> DOTMUL .)
    [               reduce using rule 48 (dot_operation -> DOTMUL .)


state 81

    (49) dot_operation -> DOTDIV .

    (               reduce using rule 49 (dot_operation -> DOTDIV .)
    INTNUM          reduce using rule 49 (dot_operation -> DOTDIV .)
    FLOATNUM        reduce using rule 49 (dot_operation -> DOTDIV .)
    STR             reduce using rule 49 (dot_operation -> DOTDIV .)
    ID              reduce using rule 49 (dot_operation -> DOTDIV .)
    [               reduce using rule 49 (dot_operation -> DOTDIV .)


state 82

    (45) expression -> vector dot_operation . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    ID              shift and go to state 61
    [               shift and go to state 48

    vector                         shift and go to state 60
    term                           shift and go to state 114

state 83

    (43) vector -> vector TRANSPOSE .

    TRANSPOSE       reduce using rule 43 (vector -> vector TRANSPOSE .)
    DOTADD          reduce using rule 43 (vector -> vector TRANSPOSE .)
    DOTSUB          reduce using rule 43 (vector -> vector TRANSPOSE .)
    DOTMUL          reduce using rule 43 (vector -> vector TRANSPOSE .)
    DOTDIV          reduce using rule 43 (vector -> vector TRANSPOSE .)
    +               reduce using rule 43 (vector -> vector TRANSPOSE .)
    -               reduce using rule 43 (vector -> vector TRANSPOSE .)
    /               reduce using rule 43 (vector -> vector TRANSPOSE .)
    *               reduce using rule 43 (vector -> vector TRANSPOSE .)
    EQL             reduce using rule 43 (vector -> vector TRANSPOSE .)
    NEQ             reduce using rule 43 (vector -> vector TRANSPOSE .)
    GT              reduce using rule 43 (vector -> vector TRANSPOSE .)
    GTE             reduce using rule 43 (vector -> vector TRANSPOSE .)
    LT              reduce using rule 43 (vector -> vector TRANSPOSE .)
    LTE             reduce using rule 43 (vector -> vector TRANSPOSE .)
    ,               reduce using rule 43 (vector -> vector TRANSPOSE .)
    ;               reduce using rule 43 (vector -> vector TRANSPOSE .)
    :               reduce using rule 43 (vector -> vector TRANSPOSE .)
    ]               reduce using rule 43 (vector -> vector TRANSPOSE .)
    )               reduce using rule 43 (vector -> vector TRANSPOSE .)
    {               reduce using rule 43 (vector -> vector TRANSPOSE .)
    ID              reduce using rule 43 (vector -> vector TRANSPOSE .)
    PRINT           reduce using rule 43 (vector -> vector TRANSPOSE .)
    CONTINUE        reduce using rule 43 (vector -> vector TRANSPOSE .)
    BREAK           reduce using rule 43 (vector -> vector TRANSPOSE .)
    RETURN          reduce using rule 43 (vector -> vector TRANSPOSE .)
    IF              reduce using rule 43 (vector -> vector TRANSPOSE .)
    FOR             reduce using rule 43 (vector -> vector TRANSPOSE .)
    WHILE           reduce using rule 43 (vector -> vector TRANSPOSE .)


state 84

    (50) vector -> [ vector_contents . ]
    (52) vector_contents -> vector_contents . , vector_element

    ]               shift and go to state 115
    ,               shift and go to state 116


state 85

    (51) vector -> [ ] .

    TRANSPOSE       reduce using rule 51 (vector -> [ ] .)
    DOTADD          reduce using rule 51 (vector -> [ ] .)
    DOTSUB          reduce using rule 51 (vector -> [ ] .)
    DOTMUL          reduce using rule 51 (vector -> [ ] .)
    DOTDIV          reduce using rule 51 (vector -> [ ] .)
    +               reduce using rule 51 (vector -> [ ] .)
    -               reduce using rule 51 (vector -> [ ] .)
    /               reduce using rule 51 (vector -> [ ] .)
    *               reduce using rule 51 (vector -> [ ] .)
    EQL             reduce using rule 51 (vector -> [ ] .)
    NEQ             reduce using rule 51 (vector -> [ ] .)
    GT              reduce using rule 51 (vector -> [ ] .)
    GTE             reduce using rule 51 (vector -> [ ] .)
    LT              reduce using rule 51 (vector -> [ ] .)
    LTE             reduce using rule 51 (vector -> [ ] .)
    ,               reduce using rule 51 (vector -> [ ] .)
    ;               reduce using rule 51 (vector -> [ ] .)
    :               reduce using rule 51 (vector -> [ ] .)
    ]               reduce using rule 51 (vector -> [ ] .)
    )               reduce using rule 51 (vector -> [ ] .)
    {               reduce using rule 51 (vector -> [ ] .)
    ID              reduce using rule 51 (vector -> [ ] .)
    PRINT           reduce using rule 51 (vector -> [ ] .)
    CONTINUE        reduce using rule 51 (vector -> [ ] .)
    BREAK           reduce using rule 51 (vector -> [ ] .)
    RETURN          reduce using rule 51 (vector -> [ ] .)
    IF              reduce using rule 51 (vector -> [ ] .)
    FOR             reduce using rule 51 (vector -> [ ] .)
    WHILE           reduce using rule 51 (vector -> [ ] .)


state 86

    (53) vector_contents -> vector_element .

    ]               reduce using rule 53 (vector_contents -> vector_element .)
    ,               reduce using rule 53 (vector_contents -> vector_element .)


state 87

    (54) vector_element -> term .

    ]               reduce using rule 54 (vector_element -> term .)
    ,               reduce using rule 54 (vector_element -> term .)


state 88

    (62) if -> IF condition nested .
    (63) if -> IF condition nested . ELSE nested

    ID              reduce using rule 62 (if -> IF condition nested .)
    PRINT           reduce using rule 62 (if -> IF condition nested .)
    CONTINUE        reduce using rule 62 (if -> IF condition nested .)
    BREAK           reduce using rule 62 (if -> IF condition nested .)
    RETURN          reduce using rule 62 (if -> IF condition nested .)
    IF              reduce using rule 62 (if -> IF condition nested .)
    FOR             reduce using rule 62 (if -> IF condition nested .)
    WHILE           reduce using rule 62 (if -> IF condition nested .)
    $end            reduce using rule 62 (if -> IF condition nested .)
    }               reduce using rule 62 (if -> IF condition nested .)
    ELSE            shift and go to state 117

  ! ELSE            [ reduce using rule 62 (if -> IF condition nested .) ]


state 89

    (65) nested -> { . statements }
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if
    (10) statement -> . for
    (11) statement -> . while
    (20) assignment -> . ID assign_symbol expression
    (21) assignment -> . ID slice assign_symbol expression
    (17) print -> . PRINT coma_separated
    (16) continue -> . CONTINUE
    (14) break -> . BREAK
    (15) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (12) for -> . FOR ID ASSIGN expression : expression nested
    (13) while -> . WHILE condition nested

    ID              shift and go to state 12
    PRINT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    RETURN          shift and go to state 16
    IF              shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19

    statements                     shift and go to state 118
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if                             shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11

state 90

    (66) nested -> statement .

    ELSE            reduce using rule 66 (nested -> statement .)
    ID              reduce using rule 66 (nested -> statement .)
    PRINT           reduce using rule 66 (nested -> statement .)
    CONTINUE        reduce using rule 66 (nested -> statement .)
    BREAK           reduce using rule 66 (nested -> statement .)
    RETURN          reduce using rule 66 (nested -> statement .)
    IF              reduce using rule 66 (nested -> statement .)
    FOR             reduce using rule 66 (nested -> statement .)
    WHILE           reduce using rule 66 (nested -> statement .)
    $end            reduce using rule 66 (nested -> statement .)
    }               reduce using rule 66 (nested -> statement .)


state 91

    (64) condition -> ( expression . )
    (31) expression -> expression . + term
    (32) expression -> expression . - term
    (33) expression -> expression . / term
    (34) expression -> expression . * term
    (35) expression -> expression . EQL term
    (36) expression -> expression . NEQ term
    (37) expression -> expression . GT term
    (38) expression -> expression . GTE term
    (39) expression -> expression . LT term
    (40) expression -> expression . LTE term

    )               shift and go to state 119
    +               shift and go to state 63
    -               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    EQL             shift and go to state 67
    NEQ             shift and go to state 68
    GT              shift and go to state 69
    GTE             shift and go to state 70
    LT              shift and go to state 71
    LTE             shift and go to state 72


state 92

    (12) for -> FOR ID ASSIGN . expression : expression nested
    (27) expression -> . built_in_function ( term_list )
    (30) expression -> . term
    (31) expression -> . expression + term
    (32) expression -> . expression - term
    (33) expression -> . expression / term
    (34) expression -> . expression * term
    (35) expression -> . expression EQL term
    (36) expression -> . expression NEQ term
    (37) expression -> . expression GT term
    (38) expression -> . expression GTE term
    (39) expression -> . expression LT term
    (40) expression -> . expression LTE term
    (41) expression -> . - term
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 39
    ID              shift and go to state 40
    EYE             shift and go to state 42
    ONES            shift and go to state 43
    ZEROS           shift and go to state 44
    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    [               shift and go to state 48

    expression                     shift and go to state 120
    built_in_function              shift and go to state 36
    term                           shift and go to state 38
    vector                         shift and go to state 41

state 93

    (13) while -> WHILE condition nested .

    ID              reduce using rule 13 (while -> WHILE condition nested .)
    PRINT           reduce using rule 13 (while -> WHILE condition nested .)
    CONTINUE        reduce using rule 13 (while -> WHILE condition nested .)
    BREAK           reduce using rule 13 (while -> WHILE condition nested .)
    RETURN          reduce using rule 13 (while -> WHILE condition nested .)
    IF              reduce using rule 13 (while -> WHILE condition nested .)
    FOR             reduce using rule 13 (while -> WHILE condition nested .)
    WHILE           reduce using rule 13 (while -> WHILE condition nested .)
    $end            reduce using rule 13 (while -> WHILE condition nested .)
    ELSE            reduce using rule 13 (while -> WHILE condition nested .)
    }               reduce using rule 13 (while -> WHILE condition nested .)


state 94

    (21) assignment -> ID slice assign_symbol expression .
    (31) expression -> expression . + term
    (32) expression -> expression . - term
    (33) expression -> expression . / term
    (34) expression -> expression . * term
    (35) expression -> expression . EQL term
    (36) expression -> expression . NEQ term
    (37) expression -> expression . GT term
    (38) expression -> expression . GTE term
    (39) expression -> expression . LT term
    (40) expression -> expression . LTE term

    ;               reduce using rule 21 (assignment -> ID slice assign_symbol expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    EQL             shift and go to state 67
    NEQ             shift and go to state 68
    GT              shift and go to state 69
    GTE             shift and go to state 70
    LT              shift and go to state 71
    LTE             shift and go to state 72


state 95

    (55) slice -> [ slice_contents ] .

    ASSIGN          reduce using rule 55 (slice -> [ slice_contents ] .)
    SUBASSIGN       reduce using rule 55 (slice -> [ slice_contents ] .)
    ADDASSIGN       reduce using rule 55 (slice -> [ slice_contents ] .)
    DIVASSIGN       reduce using rule 55 (slice -> [ slice_contents ] .)
    MULTASSIGN      reduce using rule 55 (slice -> [ slice_contents ] .)


state 96

    (57) slice_contents -> slice_contents , . range
    (58) range -> . term : term
    (59) range -> . term :
    (60) range -> . : term
    (61) range -> . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    :               shift and go to state 59
    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    ID              shift and go to state 61
    [               shift and go to state 48

    range                          shift and go to state 121
    term                           shift and go to state 58
    vector                         shift and go to state 60

state 97

    (58) range -> term : . term
    (59) range -> term : .
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    ]               reduce using rule 59 (range -> term : .)
    ,               reduce using rule 59 (range -> term : .)
    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    ID              shift and go to state 61
    [               shift and go to state 48

    term                           shift and go to state 122
    vector                         shift and go to state 60

state 98

    (60) range -> : term .

    ]               reduce using rule 60 (range -> : term .)
    ,               reduce using rule 60 (range -> : term .)


state 99

    (19) coma_separated -> coma_separated , expression .
    (31) expression -> expression . + term
    (32) expression -> expression . - term
    (33) expression -> expression . / term
    (34) expression -> expression . * term
    (35) expression -> expression . EQL term
    (36) expression -> expression . NEQ term
    (37) expression -> expression . GT term
    (38) expression -> expression . GTE term
    (39) expression -> expression . LT term
    (40) expression -> expression . LTE term

    ,               reduce using rule 19 (coma_separated -> coma_separated , expression .)
    ;               reduce using rule 19 (coma_separated -> coma_separated , expression .)
    +               shift and go to state 63
    -               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    EQL             shift and go to state 67
    NEQ             shift and go to state 68
    GT              shift and go to state 69
    GTE             shift and go to state 70
    LT              shift and go to state 71
    LTE             shift and go to state 72


state 100

    (31) expression -> expression + term .

    +               reduce using rule 31 (expression -> expression + term .)
    -               reduce using rule 31 (expression -> expression + term .)
    /               reduce using rule 31 (expression -> expression + term .)
    *               reduce using rule 31 (expression -> expression + term .)
    EQL             reduce using rule 31 (expression -> expression + term .)
    NEQ             reduce using rule 31 (expression -> expression + term .)
    GT              reduce using rule 31 (expression -> expression + term .)
    GTE             reduce using rule 31 (expression -> expression + term .)
    LT              reduce using rule 31 (expression -> expression + term .)
    LTE             reduce using rule 31 (expression -> expression + term .)
    ,               reduce using rule 31 (expression -> expression + term .)
    ;               reduce using rule 31 (expression -> expression + term .)
    )               reduce using rule 31 (expression -> expression + term .)
    :               reduce using rule 31 (expression -> expression + term .)
    {               reduce using rule 31 (expression -> expression + term .)
    ID              reduce using rule 31 (expression -> expression + term .)
    PRINT           reduce using rule 31 (expression -> expression + term .)
    CONTINUE        reduce using rule 31 (expression -> expression + term .)
    BREAK           reduce using rule 31 (expression -> expression + term .)
    RETURN          reduce using rule 31 (expression -> expression + term .)
    IF              reduce using rule 31 (expression -> expression + term .)
    FOR             reduce using rule 31 (expression -> expression + term .)
    WHILE           reduce using rule 31 (expression -> expression + term .)


state 101

    (32) expression -> expression - term .

    +               reduce using rule 32 (expression -> expression - term .)
    -               reduce using rule 32 (expression -> expression - term .)
    /               reduce using rule 32 (expression -> expression - term .)
    *               reduce using rule 32 (expression -> expression - term .)
    EQL             reduce using rule 32 (expression -> expression - term .)
    NEQ             reduce using rule 32 (expression -> expression - term .)
    GT              reduce using rule 32 (expression -> expression - term .)
    GTE             reduce using rule 32 (expression -> expression - term .)
    LT              reduce using rule 32 (expression -> expression - term .)
    LTE             reduce using rule 32 (expression -> expression - term .)
    ,               reduce using rule 32 (expression -> expression - term .)
    ;               reduce using rule 32 (expression -> expression - term .)
    )               reduce using rule 32 (expression -> expression - term .)
    :               reduce using rule 32 (expression -> expression - term .)
    {               reduce using rule 32 (expression -> expression - term .)
    ID              reduce using rule 32 (expression -> expression - term .)
    PRINT           reduce using rule 32 (expression -> expression - term .)
    CONTINUE        reduce using rule 32 (expression -> expression - term .)
    BREAK           reduce using rule 32 (expression -> expression - term .)
    RETURN          reduce using rule 32 (expression -> expression - term .)
    IF              reduce using rule 32 (expression -> expression - term .)
    FOR             reduce using rule 32 (expression -> expression - term .)
    WHILE           reduce using rule 32 (expression -> expression - term .)


state 102

    (33) expression -> expression / term .

    +               reduce using rule 33 (expression -> expression / term .)
    -               reduce using rule 33 (expression -> expression / term .)
    /               reduce using rule 33 (expression -> expression / term .)
    *               reduce using rule 33 (expression -> expression / term .)
    EQL             reduce using rule 33 (expression -> expression / term .)
    NEQ             reduce using rule 33 (expression -> expression / term .)
    GT              reduce using rule 33 (expression -> expression / term .)
    GTE             reduce using rule 33 (expression -> expression / term .)
    LT              reduce using rule 33 (expression -> expression / term .)
    LTE             reduce using rule 33 (expression -> expression / term .)
    ,               reduce using rule 33 (expression -> expression / term .)
    ;               reduce using rule 33 (expression -> expression / term .)
    )               reduce using rule 33 (expression -> expression / term .)
    :               reduce using rule 33 (expression -> expression / term .)
    {               reduce using rule 33 (expression -> expression / term .)
    ID              reduce using rule 33 (expression -> expression / term .)
    PRINT           reduce using rule 33 (expression -> expression / term .)
    CONTINUE        reduce using rule 33 (expression -> expression / term .)
    BREAK           reduce using rule 33 (expression -> expression / term .)
    RETURN          reduce using rule 33 (expression -> expression / term .)
    IF              reduce using rule 33 (expression -> expression / term .)
    FOR             reduce using rule 33 (expression -> expression / term .)
    WHILE           reduce using rule 33 (expression -> expression / term .)


state 103

    (34) expression -> expression * term .

    +               reduce using rule 34 (expression -> expression * term .)
    -               reduce using rule 34 (expression -> expression * term .)
    /               reduce using rule 34 (expression -> expression * term .)
    *               reduce using rule 34 (expression -> expression * term .)
    EQL             reduce using rule 34 (expression -> expression * term .)
    NEQ             reduce using rule 34 (expression -> expression * term .)
    GT              reduce using rule 34 (expression -> expression * term .)
    GTE             reduce using rule 34 (expression -> expression * term .)
    LT              reduce using rule 34 (expression -> expression * term .)
    LTE             reduce using rule 34 (expression -> expression * term .)
    ,               reduce using rule 34 (expression -> expression * term .)
    ;               reduce using rule 34 (expression -> expression * term .)
    )               reduce using rule 34 (expression -> expression * term .)
    :               reduce using rule 34 (expression -> expression * term .)
    {               reduce using rule 34 (expression -> expression * term .)
    ID              reduce using rule 34 (expression -> expression * term .)
    PRINT           reduce using rule 34 (expression -> expression * term .)
    CONTINUE        reduce using rule 34 (expression -> expression * term .)
    BREAK           reduce using rule 34 (expression -> expression * term .)
    RETURN          reduce using rule 34 (expression -> expression * term .)
    IF              reduce using rule 34 (expression -> expression * term .)
    FOR             reduce using rule 34 (expression -> expression * term .)
    WHILE           reduce using rule 34 (expression -> expression * term .)


state 104

    (35) expression -> expression EQL term .

    +               reduce using rule 35 (expression -> expression EQL term .)
    -               reduce using rule 35 (expression -> expression EQL term .)
    /               reduce using rule 35 (expression -> expression EQL term .)
    *               reduce using rule 35 (expression -> expression EQL term .)
    EQL             reduce using rule 35 (expression -> expression EQL term .)
    NEQ             reduce using rule 35 (expression -> expression EQL term .)
    GT              reduce using rule 35 (expression -> expression EQL term .)
    GTE             reduce using rule 35 (expression -> expression EQL term .)
    LT              reduce using rule 35 (expression -> expression EQL term .)
    LTE             reduce using rule 35 (expression -> expression EQL term .)
    ,               reduce using rule 35 (expression -> expression EQL term .)
    ;               reduce using rule 35 (expression -> expression EQL term .)
    )               reduce using rule 35 (expression -> expression EQL term .)
    :               reduce using rule 35 (expression -> expression EQL term .)
    {               reduce using rule 35 (expression -> expression EQL term .)
    ID              reduce using rule 35 (expression -> expression EQL term .)
    PRINT           reduce using rule 35 (expression -> expression EQL term .)
    CONTINUE        reduce using rule 35 (expression -> expression EQL term .)
    BREAK           reduce using rule 35 (expression -> expression EQL term .)
    RETURN          reduce using rule 35 (expression -> expression EQL term .)
    IF              reduce using rule 35 (expression -> expression EQL term .)
    FOR             reduce using rule 35 (expression -> expression EQL term .)
    WHILE           reduce using rule 35 (expression -> expression EQL term .)


state 105

    (36) expression -> expression NEQ term .

    +               reduce using rule 36 (expression -> expression NEQ term .)
    -               reduce using rule 36 (expression -> expression NEQ term .)
    /               reduce using rule 36 (expression -> expression NEQ term .)
    *               reduce using rule 36 (expression -> expression NEQ term .)
    EQL             reduce using rule 36 (expression -> expression NEQ term .)
    NEQ             reduce using rule 36 (expression -> expression NEQ term .)
    GT              reduce using rule 36 (expression -> expression NEQ term .)
    GTE             reduce using rule 36 (expression -> expression NEQ term .)
    LT              reduce using rule 36 (expression -> expression NEQ term .)
    LTE             reduce using rule 36 (expression -> expression NEQ term .)
    ,               reduce using rule 36 (expression -> expression NEQ term .)
    ;               reduce using rule 36 (expression -> expression NEQ term .)
    )               reduce using rule 36 (expression -> expression NEQ term .)
    :               reduce using rule 36 (expression -> expression NEQ term .)
    {               reduce using rule 36 (expression -> expression NEQ term .)
    ID              reduce using rule 36 (expression -> expression NEQ term .)
    PRINT           reduce using rule 36 (expression -> expression NEQ term .)
    CONTINUE        reduce using rule 36 (expression -> expression NEQ term .)
    BREAK           reduce using rule 36 (expression -> expression NEQ term .)
    RETURN          reduce using rule 36 (expression -> expression NEQ term .)
    IF              reduce using rule 36 (expression -> expression NEQ term .)
    FOR             reduce using rule 36 (expression -> expression NEQ term .)
    WHILE           reduce using rule 36 (expression -> expression NEQ term .)


state 106

    (37) expression -> expression GT term .

    +               reduce using rule 37 (expression -> expression GT term .)
    -               reduce using rule 37 (expression -> expression GT term .)
    /               reduce using rule 37 (expression -> expression GT term .)
    *               reduce using rule 37 (expression -> expression GT term .)
    EQL             reduce using rule 37 (expression -> expression GT term .)
    NEQ             reduce using rule 37 (expression -> expression GT term .)
    GT              reduce using rule 37 (expression -> expression GT term .)
    GTE             reduce using rule 37 (expression -> expression GT term .)
    LT              reduce using rule 37 (expression -> expression GT term .)
    LTE             reduce using rule 37 (expression -> expression GT term .)
    ,               reduce using rule 37 (expression -> expression GT term .)
    ;               reduce using rule 37 (expression -> expression GT term .)
    )               reduce using rule 37 (expression -> expression GT term .)
    :               reduce using rule 37 (expression -> expression GT term .)
    {               reduce using rule 37 (expression -> expression GT term .)
    ID              reduce using rule 37 (expression -> expression GT term .)
    PRINT           reduce using rule 37 (expression -> expression GT term .)
    CONTINUE        reduce using rule 37 (expression -> expression GT term .)
    BREAK           reduce using rule 37 (expression -> expression GT term .)
    RETURN          reduce using rule 37 (expression -> expression GT term .)
    IF              reduce using rule 37 (expression -> expression GT term .)
    FOR             reduce using rule 37 (expression -> expression GT term .)
    WHILE           reduce using rule 37 (expression -> expression GT term .)


state 107

    (38) expression -> expression GTE term .

    +               reduce using rule 38 (expression -> expression GTE term .)
    -               reduce using rule 38 (expression -> expression GTE term .)
    /               reduce using rule 38 (expression -> expression GTE term .)
    *               reduce using rule 38 (expression -> expression GTE term .)
    EQL             reduce using rule 38 (expression -> expression GTE term .)
    NEQ             reduce using rule 38 (expression -> expression GTE term .)
    GT              reduce using rule 38 (expression -> expression GTE term .)
    GTE             reduce using rule 38 (expression -> expression GTE term .)
    LT              reduce using rule 38 (expression -> expression GTE term .)
    LTE             reduce using rule 38 (expression -> expression GTE term .)
    ,               reduce using rule 38 (expression -> expression GTE term .)
    ;               reduce using rule 38 (expression -> expression GTE term .)
    )               reduce using rule 38 (expression -> expression GTE term .)
    :               reduce using rule 38 (expression -> expression GTE term .)
    {               reduce using rule 38 (expression -> expression GTE term .)
    ID              reduce using rule 38 (expression -> expression GTE term .)
    PRINT           reduce using rule 38 (expression -> expression GTE term .)
    CONTINUE        reduce using rule 38 (expression -> expression GTE term .)
    BREAK           reduce using rule 38 (expression -> expression GTE term .)
    RETURN          reduce using rule 38 (expression -> expression GTE term .)
    IF              reduce using rule 38 (expression -> expression GTE term .)
    FOR             reduce using rule 38 (expression -> expression GTE term .)
    WHILE           reduce using rule 38 (expression -> expression GTE term .)


state 108

    (39) expression -> expression LT term .

    +               reduce using rule 39 (expression -> expression LT term .)
    -               reduce using rule 39 (expression -> expression LT term .)
    /               reduce using rule 39 (expression -> expression LT term .)
    *               reduce using rule 39 (expression -> expression LT term .)
    EQL             reduce using rule 39 (expression -> expression LT term .)
    NEQ             reduce using rule 39 (expression -> expression LT term .)
    GT              reduce using rule 39 (expression -> expression LT term .)
    GTE             reduce using rule 39 (expression -> expression LT term .)
    LT              reduce using rule 39 (expression -> expression LT term .)
    LTE             reduce using rule 39 (expression -> expression LT term .)
    ,               reduce using rule 39 (expression -> expression LT term .)
    ;               reduce using rule 39 (expression -> expression LT term .)
    )               reduce using rule 39 (expression -> expression LT term .)
    :               reduce using rule 39 (expression -> expression LT term .)
    {               reduce using rule 39 (expression -> expression LT term .)
    ID              reduce using rule 39 (expression -> expression LT term .)
    PRINT           reduce using rule 39 (expression -> expression LT term .)
    CONTINUE        reduce using rule 39 (expression -> expression LT term .)
    BREAK           reduce using rule 39 (expression -> expression LT term .)
    RETURN          reduce using rule 39 (expression -> expression LT term .)
    IF              reduce using rule 39 (expression -> expression LT term .)
    FOR             reduce using rule 39 (expression -> expression LT term .)
    WHILE           reduce using rule 39 (expression -> expression LT term .)


state 109

    (40) expression -> expression LTE term .

    +               reduce using rule 40 (expression -> expression LTE term .)
    -               reduce using rule 40 (expression -> expression LTE term .)
    /               reduce using rule 40 (expression -> expression LTE term .)
    *               reduce using rule 40 (expression -> expression LTE term .)
    EQL             reduce using rule 40 (expression -> expression LTE term .)
    NEQ             reduce using rule 40 (expression -> expression LTE term .)
    GT              reduce using rule 40 (expression -> expression LTE term .)
    GTE             reduce using rule 40 (expression -> expression LTE term .)
    LT              reduce using rule 40 (expression -> expression LTE term .)
    LTE             reduce using rule 40 (expression -> expression LTE term .)
    ,               reduce using rule 40 (expression -> expression LTE term .)
    ;               reduce using rule 40 (expression -> expression LTE term .)
    )               reduce using rule 40 (expression -> expression LTE term .)
    :               reduce using rule 40 (expression -> expression LTE term .)
    {               reduce using rule 40 (expression -> expression LTE term .)
    ID              reduce using rule 40 (expression -> expression LTE term .)
    PRINT           reduce using rule 40 (expression -> expression LTE term .)
    CONTINUE        reduce using rule 40 (expression -> expression LTE term .)
    BREAK           reduce using rule 40 (expression -> expression LTE term .)
    RETURN          reduce using rule 40 (expression -> expression LTE term .)
    IF              reduce using rule 40 (expression -> expression LTE term .)
    FOR             reduce using rule 40 (expression -> expression LTE term .)
    WHILE           reduce using rule 40 (expression -> expression LTE term .)


state 110

    (27) expression -> built_in_function ( term_list . )
    (29) term_list -> term_list . , term

    )               shift and go to state 123
    ,               shift and go to state 124


state 111

    (28) term_list -> term .

    )               reduce using rule 28 (term_list -> term .)
    ,               reduce using rule 28 (term_list -> term .)


state 112

    (67) term -> ( expression ) .

    +               reduce using rule 67 (term -> ( expression ) .)
    -               reduce using rule 67 (term -> ( expression ) .)
    /               reduce using rule 67 (term -> ( expression ) .)
    *               reduce using rule 67 (term -> ( expression ) .)
    EQL             reduce using rule 67 (term -> ( expression ) .)
    NEQ             reduce using rule 67 (term -> ( expression ) .)
    GT              reduce using rule 67 (term -> ( expression ) .)
    GTE             reduce using rule 67 (term -> ( expression ) .)
    LT              reduce using rule 67 (term -> ( expression ) .)
    LTE             reduce using rule 67 (term -> ( expression ) .)
    ,               reduce using rule 67 (term -> ( expression ) .)
    ;               reduce using rule 67 (term -> ( expression ) .)
    :               reduce using rule 67 (term -> ( expression ) .)
    ]               reduce using rule 67 (term -> ( expression ) .)
    )               reduce using rule 67 (term -> ( expression ) .)
    {               reduce using rule 67 (term -> ( expression ) .)
    ID              reduce using rule 67 (term -> ( expression ) .)
    PRINT           reduce using rule 67 (term -> ( expression ) .)
    CONTINUE        reduce using rule 67 (term -> ( expression ) .)
    BREAK           reduce using rule 67 (term -> ( expression ) .)
    RETURN          reduce using rule 67 (term -> ( expression ) .)
    IF              reduce using rule 67 (term -> ( expression ) .)
    FOR             reduce using rule 67 (term -> ( expression ) .)
    WHILE           reduce using rule 67 (term -> ( expression ) .)


state 113

    (44) expression -> ID dot_operation term .

    +               reduce using rule 44 (expression -> ID dot_operation term .)
    -               reduce using rule 44 (expression -> ID dot_operation term .)
    /               reduce using rule 44 (expression -> ID dot_operation term .)
    *               reduce using rule 44 (expression -> ID dot_operation term .)
    EQL             reduce using rule 44 (expression -> ID dot_operation term .)
    NEQ             reduce using rule 44 (expression -> ID dot_operation term .)
    GT              reduce using rule 44 (expression -> ID dot_operation term .)
    GTE             reduce using rule 44 (expression -> ID dot_operation term .)
    LT              reduce using rule 44 (expression -> ID dot_operation term .)
    LTE             reduce using rule 44 (expression -> ID dot_operation term .)
    ,               reduce using rule 44 (expression -> ID dot_operation term .)
    ;               reduce using rule 44 (expression -> ID dot_operation term .)
    )               reduce using rule 44 (expression -> ID dot_operation term .)
    :               reduce using rule 44 (expression -> ID dot_operation term .)
    {               reduce using rule 44 (expression -> ID dot_operation term .)
    ID              reduce using rule 44 (expression -> ID dot_operation term .)
    PRINT           reduce using rule 44 (expression -> ID dot_operation term .)
    CONTINUE        reduce using rule 44 (expression -> ID dot_operation term .)
    BREAK           reduce using rule 44 (expression -> ID dot_operation term .)
    RETURN          reduce using rule 44 (expression -> ID dot_operation term .)
    IF              reduce using rule 44 (expression -> ID dot_operation term .)
    FOR             reduce using rule 44 (expression -> ID dot_operation term .)
    WHILE           reduce using rule 44 (expression -> ID dot_operation term .)


state 114

    (45) expression -> vector dot_operation term .

    +               reduce using rule 45 (expression -> vector dot_operation term .)
    -               reduce using rule 45 (expression -> vector dot_operation term .)
    /               reduce using rule 45 (expression -> vector dot_operation term .)
    *               reduce using rule 45 (expression -> vector dot_operation term .)
    EQL             reduce using rule 45 (expression -> vector dot_operation term .)
    NEQ             reduce using rule 45 (expression -> vector dot_operation term .)
    GT              reduce using rule 45 (expression -> vector dot_operation term .)
    GTE             reduce using rule 45 (expression -> vector dot_operation term .)
    LT              reduce using rule 45 (expression -> vector dot_operation term .)
    LTE             reduce using rule 45 (expression -> vector dot_operation term .)
    ,               reduce using rule 45 (expression -> vector dot_operation term .)
    ;               reduce using rule 45 (expression -> vector dot_operation term .)
    )               reduce using rule 45 (expression -> vector dot_operation term .)
    :               reduce using rule 45 (expression -> vector dot_operation term .)
    {               reduce using rule 45 (expression -> vector dot_operation term .)
    ID              reduce using rule 45 (expression -> vector dot_operation term .)
    PRINT           reduce using rule 45 (expression -> vector dot_operation term .)
    CONTINUE        reduce using rule 45 (expression -> vector dot_operation term .)
    BREAK           reduce using rule 45 (expression -> vector dot_operation term .)
    RETURN          reduce using rule 45 (expression -> vector dot_operation term .)
    IF              reduce using rule 45 (expression -> vector dot_operation term .)
    FOR             reduce using rule 45 (expression -> vector dot_operation term .)
    WHILE           reduce using rule 45 (expression -> vector dot_operation term .)


state 115

    (50) vector -> [ vector_contents ] .

    TRANSPOSE       reduce using rule 50 (vector -> [ vector_contents ] .)
    DOTADD          reduce using rule 50 (vector -> [ vector_contents ] .)
    DOTSUB          reduce using rule 50 (vector -> [ vector_contents ] .)
    DOTMUL          reduce using rule 50 (vector -> [ vector_contents ] .)
    DOTDIV          reduce using rule 50 (vector -> [ vector_contents ] .)
    +               reduce using rule 50 (vector -> [ vector_contents ] .)
    -               reduce using rule 50 (vector -> [ vector_contents ] .)
    /               reduce using rule 50 (vector -> [ vector_contents ] .)
    *               reduce using rule 50 (vector -> [ vector_contents ] .)
    EQL             reduce using rule 50 (vector -> [ vector_contents ] .)
    NEQ             reduce using rule 50 (vector -> [ vector_contents ] .)
    GT              reduce using rule 50 (vector -> [ vector_contents ] .)
    GTE             reduce using rule 50 (vector -> [ vector_contents ] .)
    LT              reduce using rule 50 (vector -> [ vector_contents ] .)
    LTE             reduce using rule 50 (vector -> [ vector_contents ] .)
    ,               reduce using rule 50 (vector -> [ vector_contents ] .)
    ;               reduce using rule 50 (vector -> [ vector_contents ] .)
    :               reduce using rule 50 (vector -> [ vector_contents ] .)
    ]               reduce using rule 50 (vector -> [ vector_contents ] .)
    )               reduce using rule 50 (vector -> [ vector_contents ] .)
    {               reduce using rule 50 (vector -> [ vector_contents ] .)
    ID              reduce using rule 50 (vector -> [ vector_contents ] .)
    PRINT           reduce using rule 50 (vector -> [ vector_contents ] .)
    CONTINUE        reduce using rule 50 (vector -> [ vector_contents ] .)
    BREAK           reduce using rule 50 (vector -> [ vector_contents ] .)
    RETURN          reduce using rule 50 (vector -> [ vector_contents ] .)
    IF              reduce using rule 50 (vector -> [ vector_contents ] .)
    FOR             reduce using rule 50 (vector -> [ vector_contents ] .)
    WHILE           reduce using rule 50 (vector -> [ vector_contents ] .)


state 116

    (52) vector_contents -> vector_contents , . vector_element
    (54) vector_element -> . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    ID              shift and go to state 61
    [               shift and go to state 48

    vector_element                 shift and go to state 125
    term                           shift and go to state 87
    vector                         shift and go to state 60

state 117

    (63) if -> IF condition nested ELSE . nested
    (65) nested -> . { statements }
    (66) nested -> . statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if
    (10) statement -> . for
    (11) statement -> . while
    (20) assignment -> . ID assign_symbol expression
    (21) assignment -> . ID slice assign_symbol expression
    (17) print -> . PRINT coma_separated
    (16) continue -> . CONTINUE
    (14) break -> . BREAK
    (15) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (12) for -> . FOR ID ASSIGN expression : expression nested
    (13) while -> . WHILE condition nested

    {               shift and go to state 89
    ID              shift and go to state 12
    PRINT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    RETURN          shift and go to state 16
    IF              shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19

    nested                         shift and go to state 126
    statement                      shift and go to state 90
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if                             shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11

state 118

    (65) nested -> { statements . }
    (3) statements -> statements . statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if
    (10) statement -> . for
    (11) statement -> . while
    (20) assignment -> . ID assign_symbol expression
    (21) assignment -> . ID slice assign_symbol expression
    (17) print -> . PRINT coma_separated
    (16) continue -> . CONTINUE
    (14) break -> . BREAK
    (15) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (12) for -> . FOR ID ASSIGN expression : expression nested
    (13) while -> . WHILE condition nested

    }               shift and go to state 127
    ID              shift and go to state 12
    PRINT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    RETURN          shift and go to state 16
    IF              shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19

    statement                      shift and go to state 20
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if                             shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11

state 119

    (64) condition -> ( expression ) .

    {               reduce using rule 64 (condition -> ( expression ) .)
    ID              reduce using rule 64 (condition -> ( expression ) .)
    PRINT           reduce using rule 64 (condition -> ( expression ) .)
    CONTINUE        reduce using rule 64 (condition -> ( expression ) .)
    BREAK           reduce using rule 64 (condition -> ( expression ) .)
    RETURN          reduce using rule 64 (condition -> ( expression ) .)
    IF              reduce using rule 64 (condition -> ( expression ) .)
    FOR             reduce using rule 64 (condition -> ( expression ) .)
    WHILE           reduce using rule 64 (condition -> ( expression ) .)


state 120

    (12) for -> FOR ID ASSIGN expression . : expression nested
    (31) expression -> expression . + term
    (32) expression -> expression . - term
    (33) expression -> expression . / term
    (34) expression -> expression . * term
    (35) expression -> expression . EQL term
    (36) expression -> expression . NEQ term
    (37) expression -> expression . GT term
    (38) expression -> expression . GTE term
    (39) expression -> expression . LT term
    (40) expression -> expression . LTE term

    :               shift and go to state 128
    +               shift and go to state 63
    -               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    EQL             shift and go to state 67
    NEQ             shift and go to state 68
    GT              shift and go to state 69
    GTE             shift and go to state 70
    LT              shift and go to state 71
    LTE             shift and go to state 72


state 121

    (57) slice_contents -> slice_contents , range .

    ]               reduce using rule 57 (slice_contents -> slice_contents , range .)
    ,               reduce using rule 57 (slice_contents -> slice_contents , range .)


state 122

    (58) range -> term : term .

    ]               reduce using rule 58 (range -> term : term .)
    ,               reduce using rule 58 (range -> term : term .)


state 123

    (27) expression -> built_in_function ( term_list ) .

    +               reduce using rule 27 (expression -> built_in_function ( term_list ) .)
    -               reduce using rule 27 (expression -> built_in_function ( term_list ) .)
    /               reduce using rule 27 (expression -> built_in_function ( term_list ) .)
    *               reduce using rule 27 (expression -> built_in_function ( term_list ) .)
    EQL             reduce using rule 27 (expression -> built_in_function ( term_list ) .)
    NEQ             reduce using rule 27 (expression -> built_in_function ( term_list ) .)
    GT              reduce using rule 27 (expression -> built_in_function ( term_list ) .)
    GTE             reduce using rule 27 (expression -> built_in_function ( term_list ) .)
    LT              reduce using rule 27 (expression -> built_in_function ( term_list ) .)
    LTE             reduce using rule 27 (expression -> built_in_function ( term_list ) .)
    ,               reduce using rule 27 (expression -> built_in_function ( term_list ) .)
    ;               reduce using rule 27 (expression -> built_in_function ( term_list ) .)
    )               reduce using rule 27 (expression -> built_in_function ( term_list ) .)
    :               reduce using rule 27 (expression -> built_in_function ( term_list ) .)
    {               reduce using rule 27 (expression -> built_in_function ( term_list ) .)
    ID              reduce using rule 27 (expression -> built_in_function ( term_list ) .)
    PRINT           reduce using rule 27 (expression -> built_in_function ( term_list ) .)
    CONTINUE        reduce using rule 27 (expression -> built_in_function ( term_list ) .)
    BREAK           reduce using rule 27 (expression -> built_in_function ( term_list ) .)
    RETURN          reduce using rule 27 (expression -> built_in_function ( term_list ) .)
    IF              reduce using rule 27 (expression -> built_in_function ( term_list ) .)
    FOR             reduce using rule 27 (expression -> built_in_function ( term_list ) .)
    WHILE           reduce using rule 27 (expression -> built_in_function ( term_list ) .)


state 124

    (29) term_list -> term_list , . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    ID              shift and go to state 61
    [               shift and go to state 48

    term                           shift and go to state 129
    vector                         shift and go to state 60

state 125

    (52) vector_contents -> vector_contents , vector_element .

    ]               reduce using rule 52 (vector_contents -> vector_contents , vector_element .)
    ,               reduce using rule 52 (vector_contents -> vector_contents , vector_element .)


state 126

    (63) if -> IF condition nested ELSE nested .

    ID              reduce using rule 63 (if -> IF condition nested ELSE nested .)
    PRINT           reduce using rule 63 (if -> IF condition nested ELSE nested .)
    CONTINUE        reduce using rule 63 (if -> IF condition nested ELSE nested .)
    BREAK           reduce using rule 63 (if -> IF condition nested ELSE nested .)
    RETURN          reduce using rule 63 (if -> IF condition nested ELSE nested .)
    IF              reduce using rule 63 (if -> IF condition nested ELSE nested .)
    FOR             reduce using rule 63 (if -> IF condition nested ELSE nested .)
    WHILE           reduce using rule 63 (if -> IF condition nested ELSE nested .)
    $end            reduce using rule 63 (if -> IF condition nested ELSE nested .)
    ELSE            reduce using rule 63 (if -> IF condition nested ELSE nested .)
    }               reduce using rule 63 (if -> IF condition nested ELSE nested .)


state 127

    (65) nested -> { statements } .

    ELSE            reduce using rule 65 (nested -> { statements } .)
    ID              reduce using rule 65 (nested -> { statements } .)
    PRINT           reduce using rule 65 (nested -> { statements } .)
    CONTINUE        reduce using rule 65 (nested -> { statements } .)
    BREAK           reduce using rule 65 (nested -> { statements } .)
    RETURN          reduce using rule 65 (nested -> { statements } .)
    IF              reduce using rule 65 (nested -> { statements } .)
    FOR             reduce using rule 65 (nested -> { statements } .)
    WHILE           reduce using rule 65 (nested -> { statements } .)
    $end            reduce using rule 65 (nested -> { statements } .)
    }               reduce using rule 65 (nested -> { statements } .)


state 128

    (12) for -> FOR ID ASSIGN expression : . expression nested
    (27) expression -> . built_in_function ( term_list )
    (30) expression -> . term
    (31) expression -> . expression + term
    (32) expression -> . expression - term
    (33) expression -> . expression / term
    (34) expression -> . expression * term
    (35) expression -> . expression EQL term
    (36) expression -> . expression NEQ term
    (37) expression -> . expression GT term
    (38) expression -> . expression GTE term
    (39) expression -> . expression LT term
    (40) expression -> . expression LTE term
    (41) expression -> . - term
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (42) vector -> . ID TRANSPOSE
    (43) vector -> . vector TRANSPOSE
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 39
    ID              shift and go to state 40
    EYE             shift and go to state 42
    ONES            shift and go to state 43
    ZEROS           shift and go to state 44
    (               shift and go to state 37
    INTNUM          shift and go to state 45
    FLOATNUM        shift and go to state 46
    STR             shift and go to state 47
    [               shift and go to state 48

    expression                     shift and go to state 130
    built_in_function              shift and go to state 36
    term                           shift and go to state 38
    vector                         shift and go to state 41

state 129

    (29) term_list -> term_list , term .

    )               reduce using rule 29 (term_list -> term_list , term .)
    ,               reduce using rule 29 (term_list -> term_list , term .)


state 130

    (12) for -> FOR ID ASSIGN expression : expression . nested
    (31) expression -> expression . + term
    (32) expression -> expression . - term
    (33) expression -> expression . / term
    (34) expression -> expression . * term
    (35) expression -> expression . EQL term
    (36) expression -> expression . NEQ term
    (37) expression -> expression . GT term
    (38) expression -> expression . GTE term
    (39) expression -> expression . LT term
    (40) expression -> expression . LTE term
    (65) nested -> . { statements }
    (66) nested -> . statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if
    (10) statement -> . for
    (11) statement -> . while
    (20) assignment -> . ID assign_symbol expression
    (21) assignment -> . ID slice assign_symbol expression
    (17) print -> . PRINT coma_separated
    (16) continue -> . CONTINUE
    (14) break -> . BREAK
    (15) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (12) for -> . FOR ID ASSIGN expression : expression nested
    (13) while -> . WHILE condition nested

    +               shift and go to state 63
    -               shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    EQL             shift and go to state 67
    NEQ             shift and go to state 68
    GT              shift and go to state 69
    GTE             shift and go to state 70
    LT              shift and go to state 71
    LTE             shift and go to state 72
    {               shift and go to state 89
    ID              shift and go to state 12
    PRINT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    RETURN          shift and go to state 16
    IF              shift and go to state 17
    FOR             shift and go to state 18
    WHILE           shift and go to state 19

    nested                         shift and go to state 131
    statement                      shift and go to state 90
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if                             shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11

state 131

    (12) for -> FOR ID ASSIGN expression : expression nested .

    ID              reduce using rule 12 (for -> FOR ID ASSIGN expression : expression nested .)
    PRINT           reduce using rule 12 (for -> FOR ID ASSIGN expression : expression nested .)
    CONTINUE        reduce using rule 12 (for -> FOR ID ASSIGN expression : expression nested .)
    BREAK           reduce using rule 12 (for -> FOR ID ASSIGN expression : expression nested .)
    RETURN          reduce using rule 12 (for -> FOR ID ASSIGN expression : expression nested .)
    IF              reduce using rule 12 (for -> FOR ID ASSIGN expression : expression nested .)
    FOR             reduce using rule 12 (for -> FOR ID ASSIGN expression : expression nested .)
    WHILE           reduce using rule 12 (for -> FOR ID ASSIGN expression : expression nested .)
    $end            reduce using rule 12 (for -> FOR ID ASSIGN expression : expression nested .)
    ELSE            reduce using rule 12 (for -> FOR ID ASSIGN expression : expression nested .)
    }               reduce using rule 12 (for -> FOR ID ASSIGN expression : expression nested .)

