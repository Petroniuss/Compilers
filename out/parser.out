Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> statements
Rule 2     statements -> statements_list
Rule 3     statements_list -> statements_list statement
Rule 4     statements_list -> statement
Rule 5     statement -> assignment ;
Rule 6     statement -> print ;
Rule 7     statement -> continue ;
Rule 8     statement -> break ;
Rule 9     statement -> return ;
Rule 10    statement -> if
Rule 11    statement -> for
Rule 12    statement -> while
Rule 13    statement -> nested_statements
Rule 14    for -> FOR ID ASSIGN expression : expression nested
Rule 15    while -> WHILE condition nested
Rule 16    break -> BREAK
Rule 17    return -> RETURN expression
Rule 18    continue -> CONTINUE
Rule 19    print -> PRINT coma_separated
Rule 20    coma_separated -> coma_separated , expression
Rule 21    coma_separated -> expression
Rule 22    assignment -> ID assign_symbol expression
Rule 23    assignment -> ID slice assign_symbol expression
Rule 24    assign_symbol -> ASSIGN
Rule 25    assign_symbol -> SUBASSIGN
Rule 26    assign_symbol -> ADDASSIGN
Rule 27    assign_symbol -> DIVASSIGN
Rule 28    assign_symbol -> MULTASSIGN
Rule 29    expression -> built_in_function ( expression_list )
Rule 30    expression_list -> expression_list , expression
Rule 31    expression_list -> expression
Rule 32    expression -> term
Rule 33    expression -> expression + term
Rule 34    expression -> expression - term
Rule 35    expression -> expression / term
Rule 36    expression -> expression * term
Rule 37    expression -> expression EQL term
Rule 38    expression -> expression NEQ term
Rule 39    expression -> expression GT term
Rule 40    expression -> expression GTE term
Rule 41    expression -> expression LT term
Rule 42    expression -> expression LTE term
Rule 43    expression -> - term
Rule 44    expression -> expression TRANSPOSE
Rule 45    expression -> ID dot_operation term
Rule 46    expression -> vector dot_operation term
Rule 47    dot_operation -> DOTADD
Rule 48    dot_operation -> DOTSUB
Rule 49    dot_operation -> DOTMUL
Rule 50    dot_operation -> DOTDIV
Rule 51    vector -> [ vector_contents ]
Rule 52    vector -> [ ]
Rule 53    vector_contents -> vector_contents , vector_element
Rule 54    vector_contents -> vector_element
Rule 55    vector_element -> term
Rule 56    slice -> [ slice_contents ]
Rule 57    slice_contents -> slice_contents , range
Rule 58    slice_contents -> range
Rule 59    range -> expression : expression
Rule 60    range -> expression :
Rule 61    range -> : expression
Rule 62    range -> expression
Rule 63    if -> IF condition nested
Rule 64    if -> IF condition nested ELSE nested
Rule 65    condition -> ( expression )
Rule 66    nested -> statement
Rule 67    nested_statements -> nested_empty
Rule 68    nested_statements -> nested_statements_list
Rule 69    nested_statements_list -> { statements_list }
Rule 70    nested_empty -> { }
Rule 71    term -> ( expression )
Rule 72    term -> vector
Rule 73    term -> INTNUM
Rule 74    term -> FLOATNUM
Rule 75    term -> STR
Rule 76    term -> ID
Rule 77    built_in_function -> EYE
Rule 78    built_in_function -> ONES
Rule 79    built_in_function -> ZEROS

Terminals, with rules where they appear

(                    : 29 65 71
)                    : 29 65 71
*                    : 36
+                    : 33
,                    : 20 30 53 57
-                    : 34 43
/                    : 35
:                    : 14 59 60 61
;                    : 5 6 7 8 9
ADDASSIGN            : 26
ASSIGN               : 14 24
BREAK                : 16
CONTINUE             : 18
DIVASSIGN            : 27
DOTADD               : 47
DOTDIV               : 50
DOTMUL               : 49
DOTSUB               : 48
ELSE                 : 64
EQL                  : 37
EYE                  : 77
FLOATNUM             : 74
FOR                  : 14
GT                   : 39
GTE                  : 40
ID                   : 14 22 23 45 76
IF                   : 63 64
INTNUM               : 73
LT                   : 41
LTE                  : 42
MULTASSIGN           : 28
NEQ                  : 38
ONES                 : 78
PRINT                : 19
RETURN               : 17
STR                  : 75
SUBASSIGN            : 25
TRANSPOSE            : 44
WHILE                : 15
ZEROS                : 79
[                    : 51 52 56
]                    : 51 52 56
error                : 
{                    : 69 70
}                    : 69 70

Nonterminals, with rules where they appear

assign_symbol        : 22 23
assignment           : 5
break                : 8
built_in_function    : 29
coma_separated       : 19 20
condition            : 15 63 64
continue             : 7
dot_operation        : 45 46
expression           : 14 14 17 20 21 22 23 30 31 33 34 35 36 37 38 39 40 41 42 44 59 59 60 61 62 65 71
expression_list      : 29 30
for                  : 11
if                   : 10
nested               : 14 15 63 64 64
nested_empty         : 67
nested_statements    : 13
nested_statements_list : 68
print                : 6
range                : 57 58
return               : 9
slice                : 23
slice_contents       : 56 57
start                : 0
statement            : 3 4 66
statements           : 1
statements_list      : 2 3 69
term                 : 32 33 34 35 36 37 38 39 40 41 42 43 45 46 55
vector               : 46 72
vector_contents      : 51 53
vector_element       : 53 54
while                : 12

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . statements
    (2) statements -> . statements_list
    (3) statements_list -> . statements_list statement
    (4) statements_list -> . statement
    (5) statement -> . assignment ;
    (6) statement -> . print ;
    (7) statement -> . continue ;
    (8) statement -> . break ;
    (9) statement -> . return ;
    (10) statement -> . if
    (11) statement -> . for
    (12) statement -> . while
    (13) statement -> . nested_statements
    (22) assignment -> . ID assign_symbol expression
    (23) assignment -> . ID slice assign_symbol expression
    (19) print -> . PRINT coma_separated
    (18) continue -> . CONTINUE
    (16) break -> . BREAK
    (17) return -> . RETURN expression
    (63) if -> . IF condition nested
    (64) if -> . IF condition nested ELSE nested
    (14) for -> . FOR ID ASSIGN expression : expression nested
    (15) while -> . WHILE condition nested
    (67) nested_statements -> . nested_empty
    (68) nested_statements -> . nested_statements_list
    (70) nested_empty -> . { }
    (69) nested_statements_list -> . { statements_list }

    ID              shift and go to state 14
    PRINT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    RETURN          shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    {               shift and go to state 24

    start                          shift and go to state 1
    statements                     shift and go to state 2
    statements_list                shift and go to state 3
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print                          shift and go to state 6
    continue                       shift and go to state 7
    break                          shift and go to state 8
    return                         shift and go to state 9
    if                             shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12
    nested_statements              shift and go to state 13
    nested_empty                   shift and go to state 22
    nested_statements_list         shift and go to state 23

state 1

    (0) S' -> start .



state 2

    (1) start -> statements .

    $end            reduce using rule 1 (start -> statements .)


state 3

    (2) statements -> statements_list .
    (3) statements_list -> statements_list . statement
    (5) statement -> . assignment ;
    (6) statement -> . print ;
    (7) statement -> . continue ;
    (8) statement -> . break ;
    (9) statement -> . return ;
    (10) statement -> . if
    (11) statement -> . for
    (12) statement -> . while
    (13) statement -> . nested_statements
    (22) assignment -> . ID assign_symbol expression
    (23) assignment -> . ID slice assign_symbol expression
    (19) print -> . PRINT coma_separated
    (18) continue -> . CONTINUE
    (16) break -> . BREAK
    (17) return -> . RETURN expression
    (63) if -> . IF condition nested
    (64) if -> . IF condition nested ELSE nested
    (14) for -> . FOR ID ASSIGN expression : expression nested
    (15) while -> . WHILE condition nested
    (67) nested_statements -> . nested_empty
    (68) nested_statements -> . nested_statements_list
    (70) nested_empty -> . { }
    (69) nested_statements_list -> . { statements_list }

    $end            reduce using rule 2 (statements -> statements_list .)
    ID              shift and go to state 14
    PRINT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    RETURN          shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    {               shift and go to state 24

    statement                      shift and go to state 25
    assignment                     shift and go to state 5
    print                          shift and go to state 6
    continue                       shift and go to state 7
    break                          shift and go to state 8
    return                         shift and go to state 9
    if                             shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12
    nested_statements              shift and go to state 13
    nested_empty                   shift and go to state 22
    nested_statements_list         shift and go to state 23

state 4

    (4) statements_list -> statement .

    ID              reduce using rule 4 (statements_list -> statement .)
    PRINT           reduce using rule 4 (statements_list -> statement .)
    CONTINUE        reduce using rule 4 (statements_list -> statement .)
    BREAK           reduce using rule 4 (statements_list -> statement .)
    RETURN          reduce using rule 4 (statements_list -> statement .)
    IF              reduce using rule 4 (statements_list -> statement .)
    FOR             reduce using rule 4 (statements_list -> statement .)
    WHILE           reduce using rule 4 (statements_list -> statement .)
    {               reduce using rule 4 (statements_list -> statement .)
    $end            reduce using rule 4 (statements_list -> statement .)
    }               reduce using rule 4 (statements_list -> statement .)


state 5

    (5) statement -> assignment . ;

    ;               shift and go to state 26


state 6

    (6) statement -> print . ;

    ;               shift and go to state 27


state 7

    (7) statement -> continue . ;

    ;               shift and go to state 28


state 8

    (8) statement -> break . ;

    ;               shift and go to state 29


state 9

    (9) statement -> return . ;

    ;               shift and go to state 30


state 10

    (10) statement -> if .

    ID              reduce using rule 10 (statement -> if .)
    PRINT           reduce using rule 10 (statement -> if .)
    CONTINUE        reduce using rule 10 (statement -> if .)
    BREAK           reduce using rule 10 (statement -> if .)
    RETURN          reduce using rule 10 (statement -> if .)
    IF              reduce using rule 10 (statement -> if .)
    FOR             reduce using rule 10 (statement -> if .)
    WHILE           reduce using rule 10 (statement -> if .)
    {               reduce using rule 10 (statement -> if .)
    $end            reduce using rule 10 (statement -> if .)
    }               reduce using rule 10 (statement -> if .)
    ELSE            reduce using rule 10 (statement -> if .)


state 11

    (11) statement -> for .

    ID              reduce using rule 11 (statement -> for .)
    PRINT           reduce using rule 11 (statement -> for .)
    CONTINUE        reduce using rule 11 (statement -> for .)
    BREAK           reduce using rule 11 (statement -> for .)
    RETURN          reduce using rule 11 (statement -> for .)
    IF              reduce using rule 11 (statement -> for .)
    FOR             reduce using rule 11 (statement -> for .)
    WHILE           reduce using rule 11 (statement -> for .)
    {               reduce using rule 11 (statement -> for .)
    $end            reduce using rule 11 (statement -> for .)
    }               reduce using rule 11 (statement -> for .)
    ELSE            reduce using rule 11 (statement -> for .)


state 12

    (12) statement -> while .

    ID              reduce using rule 12 (statement -> while .)
    PRINT           reduce using rule 12 (statement -> while .)
    CONTINUE        reduce using rule 12 (statement -> while .)
    BREAK           reduce using rule 12 (statement -> while .)
    RETURN          reduce using rule 12 (statement -> while .)
    IF              reduce using rule 12 (statement -> while .)
    FOR             reduce using rule 12 (statement -> while .)
    WHILE           reduce using rule 12 (statement -> while .)
    {               reduce using rule 12 (statement -> while .)
    $end            reduce using rule 12 (statement -> while .)
    }               reduce using rule 12 (statement -> while .)
    ELSE            reduce using rule 12 (statement -> while .)


state 13

    (13) statement -> nested_statements .

    ID              reduce using rule 13 (statement -> nested_statements .)
    PRINT           reduce using rule 13 (statement -> nested_statements .)
    CONTINUE        reduce using rule 13 (statement -> nested_statements .)
    BREAK           reduce using rule 13 (statement -> nested_statements .)
    RETURN          reduce using rule 13 (statement -> nested_statements .)
    IF              reduce using rule 13 (statement -> nested_statements .)
    FOR             reduce using rule 13 (statement -> nested_statements .)
    WHILE           reduce using rule 13 (statement -> nested_statements .)
    {               reduce using rule 13 (statement -> nested_statements .)
    $end            reduce using rule 13 (statement -> nested_statements .)
    }               reduce using rule 13 (statement -> nested_statements .)
    ELSE            reduce using rule 13 (statement -> nested_statements .)


state 14

    (22) assignment -> ID . assign_symbol expression
    (23) assignment -> ID . slice assign_symbol expression
    (24) assign_symbol -> . ASSIGN
    (25) assign_symbol -> . SUBASSIGN
    (26) assign_symbol -> . ADDASSIGN
    (27) assign_symbol -> . DIVASSIGN
    (28) assign_symbol -> . MULTASSIGN
    (56) slice -> . [ slice_contents ]

    ASSIGN          shift and go to state 33
    SUBASSIGN       shift and go to state 34
    ADDASSIGN       shift and go to state 35
    DIVASSIGN       shift and go to state 36
    MULTASSIGN      shift and go to state 37
    [               shift and go to state 38

    assign_symbol                  shift and go to state 31
    slice                          shift and go to state 32

state 15

    (19) print -> PRINT . coma_separated
    (20) coma_separated -> . coma_separated , expression
    (21) coma_separated -> . expression
    (29) expression -> . built_in_function ( expression_list )
    (32) expression -> . term
    (33) expression -> . expression + term
    (34) expression -> . expression - term
    (35) expression -> . expression / term
    (36) expression -> . expression * term
    (37) expression -> . expression EQL term
    (38) expression -> . expression NEQ term
    (39) expression -> . expression GT term
    (40) expression -> . expression GTE term
    (41) expression -> . expression LT term
    (42) expression -> . expression LTE term
    (43) expression -> . - term
    (44) expression -> . expression TRANSPOSE
    (45) expression -> . ID dot_operation term
    (46) expression -> . vector dot_operation term
    (77) built_in_function -> . EYE
    (78) built_in_function -> . ONES
    (79) built_in_function -> . ZEROS
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    -               shift and go to state 44
    ID              shift and go to state 45
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49
    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    [               shift and go to state 53

    coma_separated                 shift and go to state 39
    expression                     shift and go to state 40
    built_in_function              shift and go to state 41
    term                           shift and go to state 43
    vector                         shift and go to state 46

state 16

    (18) continue -> CONTINUE .

    ;               reduce using rule 18 (continue -> CONTINUE .)


state 17

    (16) break -> BREAK .

    ;               reduce using rule 16 (break -> BREAK .)


state 18

    (17) return -> RETURN . expression
    (29) expression -> . built_in_function ( expression_list )
    (32) expression -> . term
    (33) expression -> . expression + term
    (34) expression -> . expression - term
    (35) expression -> . expression / term
    (36) expression -> . expression * term
    (37) expression -> . expression EQL term
    (38) expression -> . expression NEQ term
    (39) expression -> . expression GT term
    (40) expression -> . expression GTE term
    (41) expression -> . expression LT term
    (42) expression -> . expression LTE term
    (43) expression -> . - term
    (44) expression -> . expression TRANSPOSE
    (45) expression -> . ID dot_operation term
    (46) expression -> . vector dot_operation term
    (77) built_in_function -> . EYE
    (78) built_in_function -> . ONES
    (79) built_in_function -> . ZEROS
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    -               shift and go to state 44
    ID              shift and go to state 45
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49
    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    [               shift and go to state 53

    expression                     shift and go to state 54
    built_in_function              shift and go to state 41
    term                           shift and go to state 43
    vector                         shift and go to state 46

state 19

    (63) if -> IF . condition nested
    (64) if -> IF . condition nested ELSE nested
    (65) condition -> . ( expression )

    (               shift and go to state 56

    condition                      shift and go to state 55

state 20

    (14) for -> FOR . ID ASSIGN expression : expression nested

    ID              shift and go to state 57


state 21

    (15) while -> WHILE . condition nested
    (65) condition -> . ( expression )

    (               shift and go to state 56

    condition                      shift and go to state 58

state 22

    (67) nested_statements -> nested_empty .

    ID              reduce using rule 67 (nested_statements -> nested_empty .)
    PRINT           reduce using rule 67 (nested_statements -> nested_empty .)
    CONTINUE        reduce using rule 67 (nested_statements -> nested_empty .)
    BREAK           reduce using rule 67 (nested_statements -> nested_empty .)
    RETURN          reduce using rule 67 (nested_statements -> nested_empty .)
    IF              reduce using rule 67 (nested_statements -> nested_empty .)
    FOR             reduce using rule 67 (nested_statements -> nested_empty .)
    WHILE           reduce using rule 67 (nested_statements -> nested_empty .)
    {               reduce using rule 67 (nested_statements -> nested_empty .)
    $end            reduce using rule 67 (nested_statements -> nested_empty .)
    }               reduce using rule 67 (nested_statements -> nested_empty .)
    ELSE            reduce using rule 67 (nested_statements -> nested_empty .)


state 23

    (68) nested_statements -> nested_statements_list .

    ID              reduce using rule 68 (nested_statements -> nested_statements_list .)
    PRINT           reduce using rule 68 (nested_statements -> nested_statements_list .)
    CONTINUE        reduce using rule 68 (nested_statements -> nested_statements_list .)
    BREAK           reduce using rule 68 (nested_statements -> nested_statements_list .)
    RETURN          reduce using rule 68 (nested_statements -> nested_statements_list .)
    IF              reduce using rule 68 (nested_statements -> nested_statements_list .)
    FOR             reduce using rule 68 (nested_statements -> nested_statements_list .)
    WHILE           reduce using rule 68 (nested_statements -> nested_statements_list .)
    {               reduce using rule 68 (nested_statements -> nested_statements_list .)
    $end            reduce using rule 68 (nested_statements -> nested_statements_list .)
    }               reduce using rule 68 (nested_statements -> nested_statements_list .)
    ELSE            reduce using rule 68 (nested_statements -> nested_statements_list .)


state 24

    (70) nested_empty -> { . }
    (69) nested_statements_list -> { . statements_list }
    (3) statements_list -> . statements_list statement
    (4) statements_list -> . statement
    (5) statement -> . assignment ;
    (6) statement -> . print ;
    (7) statement -> . continue ;
    (8) statement -> . break ;
    (9) statement -> . return ;
    (10) statement -> . if
    (11) statement -> . for
    (12) statement -> . while
    (13) statement -> . nested_statements
    (22) assignment -> . ID assign_symbol expression
    (23) assignment -> . ID slice assign_symbol expression
    (19) print -> . PRINT coma_separated
    (18) continue -> . CONTINUE
    (16) break -> . BREAK
    (17) return -> . RETURN expression
    (63) if -> . IF condition nested
    (64) if -> . IF condition nested ELSE nested
    (14) for -> . FOR ID ASSIGN expression : expression nested
    (15) while -> . WHILE condition nested
    (67) nested_statements -> . nested_empty
    (68) nested_statements -> . nested_statements_list
    (70) nested_empty -> . { }
    (69) nested_statements_list -> . { statements_list }

    }               shift and go to state 59
    ID              shift and go to state 14
    PRINT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    RETURN          shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    {               shift and go to state 24

    statements_list                shift and go to state 60
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print                          shift and go to state 6
    continue                       shift and go to state 7
    break                          shift and go to state 8
    return                         shift and go to state 9
    if                             shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12
    nested_statements              shift and go to state 13
    nested_empty                   shift and go to state 22
    nested_statements_list         shift and go to state 23

state 25

    (3) statements_list -> statements_list statement .

    ID              reduce using rule 3 (statements_list -> statements_list statement .)
    PRINT           reduce using rule 3 (statements_list -> statements_list statement .)
    CONTINUE        reduce using rule 3 (statements_list -> statements_list statement .)
    BREAK           reduce using rule 3 (statements_list -> statements_list statement .)
    RETURN          reduce using rule 3 (statements_list -> statements_list statement .)
    IF              reduce using rule 3 (statements_list -> statements_list statement .)
    FOR             reduce using rule 3 (statements_list -> statements_list statement .)
    WHILE           reduce using rule 3 (statements_list -> statements_list statement .)
    {               reduce using rule 3 (statements_list -> statements_list statement .)
    $end            reduce using rule 3 (statements_list -> statements_list statement .)
    }               reduce using rule 3 (statements_list -> statements_list statement .)


state 26

    (5) statement -> assignment ; .

    ID              reduce using rule 5 (statement -> assignment ; .)
    PRINT           reduce using rule 5 (statement -> assignment ; .)
    CONTINUE        reduce using rule 5 (statement -> assignment ; .)
    BREAK           reduce using rule 5 (statement -> assignment ; .)
    RETURN          reduce using rule 5 (statement -> assignment ; .)
    IF              reduce using rule 5 (statement -> assignment ; .)
    FOR             reduce using rule 5 (statement -> assignment ; .)
    WHILE           reduce using rule 5 (statement -> assignment ; .)
    {               reduce using rule 5 (statement -> assignment ; .)
    $end            reduce using rule 5 (statement -> assignment ; .)
    }               reduce using rule 5 (statement -> assignment ; .)
    ELSE            reduce using rule 5 (statement -> assignment ; .)


state 27

    (6) statement -> print ; .

    ID              reduce using rule 6 (statement -> print ; .)
    PRINT           reduce using rule 6 (statement -> print ; .)
    CONTINUE        reduce using rule 6 (statement -> print ; .)
    BREAK           reduce using rule 6 (statement -> print ; .)
    RETURN          reduce using rule 6 (statement -> print ; .)
    IF              reduce using rule 6 (statement -> print ; .)
    FOR             reduce using rule 6 (statement -> print ; .)
    WHILE           reduce using rule 6 (statement -> print ; .)
    {               reduce using rule 6 (statement -> print ; .)
    $end            reduce using rule 6 (statement -> print ; .)
    }               reduce using rule 6 (statement -> print ; .)
    ELSE            reduce using rule 6 (statement -> print ; .)


state 28

    (7) statement -> continue ; .

    ID              reduce using rule 7 (statement -> continue ; .)
    PRINT           reduce using rule 7 (statement -> continue ; .)
    CONTINUE        reduce using rule 7 (statement -> continue ; .)
    BREAK           reduce using rule 7 (statement -> continue ; .)
    RETURN          reduce using rule 7 (statement -> continue ; .)
    IF              reduce using rule 7 (statement -> continue ; .)
    FOR             reduce using rule 7 (statement -> continue ; .)
    WHILE           reduce using rule 7 (statement -> continue ; .)
    {               reduce using rule 7 (statement -> continue ; .)
    $end            reduce using rule 7 (statement -> continue ; .)
    }               reduce using rule 7 (statement -> continue ; .)
    ELSE            reduce using rule 7 (statement -> continue ; .)


state 29

    (8) statement -> break ; .

    ID              reduce using rule 8 (statement -> break ; .)
    PRINT           reduce using rule 8 (statement -> break ; .)
    CONTINUE        reduce using rule 8 (statement -> break ; .)
    BREAK           reduce using rule 8 (statement -> break ; .)
    RETURN          reduce using rule 8 (statement -> break ; .)
    IF              reduce using rule 8 (statement -> break ; .)
    FOR             reduce using rule 8 (statement -> break ; .)
    WHILE           reduce using rule 8 (statement -> break ; .)
    {               reduce using rule 8 (statement -> break ; .)
    $end            reduce using rule 8 (statement -> break ; .)
    }               reduce using rule 8 (statement -> break ; .)
    ELSE            reduce using rule 8 (statement -> break ; .)


state 30

    (9) statement -> return ; .

    ID              reduce using rule 9 (statement -> return ; .)
    PRINT           reduce using rule 9 (statement -> return ; .)
    CONTINUE        reduce using rule 9 (statement -> return ; .)
    BREAK           reduce using rule 9 (statement -> return ; .)
    RETURN          reduce using rule 9 (statement -> return ; .)
    IF              reduce using rule 9 (statement -> return ; .)
    FOR             reduce using rule 9 (statement -> return ; .)
    WHILE           reduce using rule 9 (statement -> return ; .)
    {               reduce using rule 9 (statement -> return ; .)
    $end            reduce using rule 9 (statement -> return ; .)
    }               reduce using rule 9 (statement -> return ; .)
    ELSE            reduce using rule 9 (statement -> return ; .)


state 31

    (22) assignment -> ID assign_symbol . expression
    (29) expression -> . built_in_function ( expression_list )
    (32) expression -> . term
    (33) expression -> . expression + term
    (34) expression -> . expression - term
    (35) expression -> . expression / term
    (36) expression -> . expression * term
    (37) expression -> . expression EQL term
    (38) expression -> . expression NEQ term
    (39) expression -> . expression GT term
    (40) expression -> . expression GTE term
    (41) expression -> . expression LT term
    (42) expression -> . expression LTE term
    (43) expression -> . - term
    (44) expression -> . expression TRANSPOSE
    (45) expression -> . ID dot_operation term
    (46) expression -> . vector dot_operation term
    (77) built_in_function -> . EYE
    (78) built_in_function -> . ONES
    (79) built_in_function -> . ZEROS
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    -               shift and go to state 44
    ID              shift and go to state 45
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49
    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    [               shift and go to state 53

    expression                     shift and go to state 61
    built_in_function              shift and go to state 41
    term                           shift and go to state 43
    vector                         shift and go to state 46

state 32

    (23) assignment -> ID slice . assign_symbol expression
    (24) assign_symbol -> . ASSIGN
    (25) assign_symbol -> . SUBASSIGN
    (26) assign_symbol -> . ADDASSIGN
    (27) assign_symbol -> . DIVASSIGN
    (28) assign_symbol -> . MULTASSIGN

    ASSIGN          shift and go to state 33
    SUBASSIGN       shift and go to state 34
    ADDASSIGN       shift and go to state 35
    DIVASSIGN       shift and go to state 36
    MULTASSIGN      shift and go to state 37

    assign_symbol                  shift and go to state 62

state 33

    (24) assign_symbol -> ASSIGN .

    -               reduce using rule 24 (assign_symbol -> ASSIGN .)
    ID              reduce using rule 24 (assign_symbol -> ASSIGN .)
    EYE             reduce using rule 24 (assign_symbol -> ASSIGN .)
    ONES            reduce using rule 24 (assign_symbol -> ASSIGN .)
    ZEROS           reduce using rule 24 (assign_symbol -> ASSIGN .)
    (               reduce using rule 24 (assign_symbol -> ASSIGN .)
    INTNUM          reduce using rule 24 (assign_symbol -> ASSIGN .)
    FLOATNUM        reduce using rule 24 (assign_symbol -> ASSIGN .)
    STR             reduce using rule 24 (assign_symbol -> ASSIGN .)
    [               reduce using rule 24 (assign_symbol -> ASSIGN .)


state 34

    (25) assign_symbol -> SUBASSIGN .

    -               reduce using rule 25 (assign_symbol -> SUBASSIGN .)
    ID              reduce using rule 25 (assign_symbol -> SUBASSIGN .)
    EYE             reduce using rule 25 (assign_symbol -> SUBASSIGN .)
    ONES            reduce using rule 25 (assign_symbol -> SUBASSIGN .)
    ZEROS           reduce using rule 25 (assign_symbol -> SUBASSIGN .)
    (               reduce using rule 25 (assign_symbol -> SUBASSIGN .)
    INTNUM          reduce using rule 25 (assign_symbol -> SUBASSIGN .)
    FLOATNUM        reduce using rule 25 (assign_symbol -> SUBASSIGN .)
    STR             reduce using rule 25 (assign_symbol -> SUBASSIGN .)
    [               reduce using rule 25 (assign_symbol -> SUBASSIGN .)


state 35

    (26) assign_symbol -> ADDASSIGN .

    -               reduce using rule 26 (assign_symbol -> ADDASSIGN .)
    ID              reduce using rule 26 (assign_symbol -> ADDASSIGN .)
    EYE             reduce using rule 26 (assign_symbol -> ADDASSIGN .)
    ONES            reduce using rule 26 (assign_symbol -> ADDASSIGN .)
    ZEROS           reduce using rule 26 (assign_symbol -> ADDASSIGN .)
    (               reduce using rule 26 (assign_symbol -> ADDASSIGN .)
    INTNUM          reduce using rule 26 (assign_symbol -> ADDASSIGN .)
    FLOATNUM        reduce using rule 26 (assign_symbol -> ADDASSIGN .)
    STR             reduce using rule 26 (assign_symbol -> ADDASSIGN .)
    [               reduce using rule 26 (assign_symbol -> ADDASSIGN .)


state 36

    (27) assign_symbol -> DIVASSIGN .

    -               reduce using rule 27 (assign_symbol -> DIVASSIGN .)
    ID              reduce using rule 27 (assign_symbol -> DIVASSIGN .)
    EYE             reduce using rule 27 (assign_symbol -> DIVASSIGN .)
    ONES            reduce using rule 27 (assign_symbol -> DIVASSIGN .)
    ZEROS           reduce using rule 27 (assign_symbol -> DIVASSIGN .)
    (               reduce using rule 27 (assign_symbol -> DIVASSIGN .)
    INTNUM          reduce using rule 27 (assign_symbol -> DIVASSIGN .)
    FLOATNUM        reduce using rule 27 (assign_symbol -> DIVASSIGN .)
    STR             reduce using rule 27 (assign_symbol -> DIVASSIGN .)
    [               reduce using rule 27 (assign_symbol -> DIVASSIGN .)


state 37

    (28) assign_symbol -> MULTASSIGN .

    -               reduce using rule 28 (assign_symbol -> MULTASSIGN .)
    ID              reduce using rule 28 (assign_symbol -> MULTASSIGN .)
    EYE             reduce using rule 28 (assign_symbol -> MULTASSIGN .)
    ONES            reduce using rule 28 (assign_symbol -> MULTASSIGN .)
    ZEROS           reduce using rule 28 (assign_symbol -> MULTASSIGN .)
    (               reduce using rule 28 (assign_symbol -> MULTASSIGN .)
    INTNUM          reduce using rule 28 (assign_symbol -> MULTASSIGN .)
    FLOATNUM        reduce using rule 28 (assign_symbol -> MULTASSIGN .)
    STR             reduce using rule 28 (assign_symbol -> MULTASSIGN .)
    [               reduce using rule 28 (assign_symbol -> MULTASSIGN .)


state 38

    (56) slice -> [ . slice_contents ]
    (57) slice_contents -> . slice_contents , range
    (58) slice_contents -> . range
    (59) range -> . expression : expression
    (60) range -> . expression :
    (61) range -> . : expression
    (62) range -> . expression
    (29) expression -> . built_in_function ( expression_list )
    (32) expression -> . term
    (33) expression -> . expression + term
    (34) expression -> . expression - term
    (35) expression -> . expression / term
    (36) expression -> . expression * term
    (37) expression -> . expression EQL term
    (38) expression -> . expression NEQ term
    (39) expression -> . expression GT term
    (40) expression -> . expression GTE term
    (41) expression -> . expression LT term
    (42) expression -> . expression LTE term
    (43) expression -> . - term
    (44) expression -> . expression TRANSPOSE
    (45) expression -> . ID dot_operation term
    (46) expression -> . vector dot_operation term
    (77) built_in_function -> . EYE
    (78) built_in_function -> . ONES
    (79) built_in_function -> . ZEROS
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    :               shift and go to state 66
    -               shift and go to state 44
    ID              shift and go to state 45
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49
    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    [               shift and go to state 53

    slice_contents                 shift and go to state 63
    range                          shift and go to state 64
    expression                     shift and go to state 65
    built_in_function              shift and go to state 41
    term                           shift and go to state 43
    vector                         shift and go to state 46

state 39

    (19) print -> PRINT coma_separated .
    (20) coma_separated -> coma_separated . , expression

    ;               reduce using rule 19 (print -> PRINT coma_separated .)
    ,               shift and go to state 67


state 40

    (21) coma_separated -> expression .
    (33) expression -> expression . + term
    (34) expression -> expression . - term
    (35) expression -> expression . / term
    (36) expression -> expression . * term
    (37) expression -> expression . EQL term
    (38) expression -> expression . NEQ term
    (39) expression -> expression . GT term
    (40) expression -> expression . GTE term
    (41) expression -> expression . LT term
    (42) expression -> expression . LTE term
    (44) expression -> expression . TRANSPOSE

    ,               reduce using rule 21 (coma_separated -> expression .)
    ;               reduce using rule 21 (coma_separated -> expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    EQL             shift and go to state 72
    NEQ             shift and go to state 73
    GT              shift and go to state 74
    GTE             shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77
    TRANSPOSE       shift and go to state 78


state 41

    (29) expression -> built_in_function . ( expression_list )

    (               shift and go to state 79


state 42

    (71) term -> ( . expression )
    (29) expression -> . built_in_function ( expression_list )
    (32) expression -> . term
    (33) expression -> . expression + term
    (34) expression -> . expression - term
    (35) expression -> . expression / term
    (36) expression -> . expression * term
    (37) expression -> . expression EQL term
    (38) expression -> . expression NEQ term
    (39) expression -> . expression GT term
    (40) expression -> . expression GTE term
    (41) expression -> . expression LT term
    (42) expression -> . expression LTE term
    (43) expression -> . - term
    (44) expression -> . expression TRANSPOSE
    (45) expression -> . ID dot_operation term
    (46) expression -> . vector dot_operation term
    (77) built_in_function -> . EYE
    (78) built_in_function -> . ONES
    (79) built_in_function -> . ZEROS
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    -               shift and go to state 44
    ID              shift and go to state 45
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49
    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    [               shift and go to state 53

    expression                     shift and go to state 80
    built_in_function              shift and go to state 41
    term                           shift and go to state 43
    vector                         shift and go to state 46

state 43

    (32) expression -> term .

    +               reduce using rule 32 (expression -> term .)
    -               reduce using rule 32 (expression -> term .)
    /               reduce using rule 32 (expression -> term .)
    *               reduce using rule 32 (expression -> term .)
    EQL             reduce using rule 32 (expression -> term .)
    NEQ             reduce using rule 32 (expression -> term .)
    GT              reduce using rule 32 (expression -> term .)
    GTE             reduce using rule 32 (expression -> term .)
    LT              reduce using rule 32 (expression -> term .)
    LTE             reduce using rule 32 (expression -> term .)
    TRANSPOSE       reduce using rule 32 (expression -> term .)
    ,               reduce using rule 32 (expression -> term .)
    ;               reduce using rule 32 (expression -> term .)
    :               reduce using rule 32 (expression -> term .)
    ]               reduce using rule 32 (expression -> term .)
    )               reduce using rule 32 (expression -> term .)
    ID              reduce using rule 32 (expression -> term .)
    PRINT           reduce using rule 32 (expression -> term .)
    CONTINUE        reduce using rule 32 (expression -> term .)
    BREAK           reduce using rule 32 (expression -> term .)
    RETURN          reduce using rule 32 (expression -> term .)
    IF              reduce using rule 32 (expression -> term .)
    FOR             reduce using rule 32 (expression -> term .)
    WHILE           reduce using rule 32 (expression -> term .)
    {               reduce using rule 32 (expression -> term .)


state 44

    (43) expression -> - . term
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    ID              shift and go to state 83
    [               shift and go to state 53

    term                           shift and go to state 81
    vector                         shift and go to state 82

state 45

    (45) expression -> ID . dot_operation term
    (76) term -> ID .
    (47) dot_operation -> . DOTADD
    (48) dot_operation -> . DOTSUB
    (49) dot_operation -> . DOTMUL
    (50) dot_operation -> . DOTDIV

    +               reduce using rule 76 (term -> ID .)
    -               reduce using rule 76 (term -> ID .)
    /               reduce using rule 76 (term -> ID .)
    *               reduce using rule 76 (term -> ID .)
    EQL             reduce using rule 76 (term -> ID .)
    NEQ             reduce using rule 76 (term -> ID .)
    GT              reduce using rule 76 (term -> ID .)
    GTE             reduce using rule 76 (term -> ID .)
    LT              reduce using rule 76 (term -> ID .)
    LTE             reduce using rule 76 (term -> ID .)
    TRANSPOSE       reduce using rule 76 (term -> ID .)
    ,               reduce using rule 76 (term -> ID .)
    ;               reduce using rule 76 (term -> ID .)
    :               reduce using rule 76 (term -> ID .)
    ]               reduce using rule 76 (term -> ID .)
    )               reduce using rule 76 (term -> ID .)
    ID              reduce using rule 76 (term -> ID .)
    PRINT           reduce using rule 76 (term -> ID .)
    CONTINUE        reduce using rule 76 (term -> ID .)
    BREAK           reduce using rule 76 (term -> ID .)
    RETURN          reduce using rule 76 (term -> ID .)
    IF              reduce using rule 76 (term -> ID .)
    FOR             reduce using rule 76 (term -> ID .)
    WHILE           reduce using rule 76 (term -> ID .)
    {               reduce using rule 76 (term -> ID .)
    DOTADD          shift and go to state 85
    DOTSUB          shift and go to state 86
    DOTMUL          shift and go to state 87
    DOTDIV          shift and go to state 88

    dot_operation                  shift and go to state 84

state 46

    (46) expression -> vector . dot_operation term
    (72) term -> vector .
    (47) dot_operation -> . DOTADD
    (48) dot_operation -> . DOTSUB
    (49) dot_operation -> . DOTMUL
    (50) dot_operation -> . DOTDIV

    +               reduce using rule 72 (term -> vector .)
    -               reduce using rule 72 (term -> vector .)
    /               reduce using rule 72 (term -> vector .)
    *               reduce using rule 72 (term -> vector .)
    EQL             reduce using rule 72 (term -> vector .)
    NEQ             reduce using rule 72 (term -> vector .)
    GT              reduce using rule 72 (term -> vector .)
    GTE             reduce using rule 72 (term -> vector .)
    LT              reduce using rule 72 (term -> vector .)
    LTE             reduce using rule 72 (term -> vector .)
    TRANSPOSE       reduce using rule 72 (term -> vector .)
    ,               reduce using rule 72 (term -> vector .)
    ;               reduce using rule 72 (term -> vector .)
    :               reduce using rule 72 (term -> vector .)
    ]               reduce using rule 72 (term -> vector .)
    )               reduce using rule 72 (term -> vector .)
    ID              reduce using rule 72 (term -> vector .)
    PRINT           reduce using rule 72 (term -> vector .)
    CONTINUE        reduce using rule 72 (term -> vector .)
    BREAK           reduce using rule 72 (term -> vector .)
    RETURN          reduce using rule 72 (term -> vector .)
    IF              reduce using rule 72 (term -> vector .)
    FOR             reduce using rule 72 (term -> vector .)
    WHILE           reduce using rule 72 (term -> vector .)
    {               reduce using rule 72 (term -> vector .)
    DOTADD          shift and go to state 85
    DOTSUB          shift and go to state 86
    DOTMUL          shift and go to state 87
    DOTDIV          shift and go to state 88

    dot_operation                  shift and go to state 89

state 47

    (77) built_in_function -> EYE .

    (               reduce using rule 77 (built_in_function -> EYE .)


state 48

    (78) built_in_function -> ONES .

    (               reduce using rule 78 (built_in_function -> ONES .)


state 49

    (79) built_in_function -> ZEROS .

    (               reduce using rule 79 (built_in_function -> ZEROS .)


state 50

    (73) term -> INTNUM .

    +               reduce using rule 73 (term -> INTNUM .)
    -               reduce using rule 73 (term -> INTNUM .)
    /               reduce using rule 73 (term -> INTNUM .)
    *               reduce using rule 73 (term -> INTNUM .)
    EQL             reduce using rule 73 (term -> INTNUM .)
    NEQ             reduce using rule 73 (term -> INTNUM .)
    GT              reduce using rule 73 (term -> INTNUM .)
    GTE             reduce using rule 73 (term -> INTNUM .)
    LT              reduce using rule 73 (term -> INTNUM .)
    LTE             reduce using rule 73 (term -> INTNUM .)
    TRANSPOSE       reduce using rule 73 (term -> INTNUM .)
    ,               reduce using rule 73 (term -> INTNUM .)
    ;               reduce using rule 73 (term -> INTNUM .)
    :               reduce using rule 73 (term -> INTNUM .)
    ]               reduce using rule 73 (term -> INTNUM .)
    )               reduce using rule 73 (term -> INTNUM .)
    ID              reduce using rule 73 (term -> INTNUM .)
    PRINT           reduce using rule 73 (term -> INTNUM .)
    CONTINUE        reduce using rule 73 (term -> INTNUM .)
    BREAK           reduce using rule 73 (term -> INTNUM .)
    RETURN          reduce using rule 73 (term -> INTNUM .)
    IF              reduce using rule 73 (term -> INTNUM .)
    FOR             reduce using rule 73 (term -> INTNUM .)
    WHILE           reduce using rule 73 (term -> INTNUM .)
    {               reduce using rule 73 (term -> INTNUM .)


state 51

    (74) term -> FLOATNUM .

    +               reduce using rule 74 (term -> FLOATNUM .)
    -               reduce using rule 74 (term -> FLOATNUM .)
    /               reduce using rule 74 (term -> FLOATNUM .)
    *               reduce using rule 74 (term -> FLOATNUM .)
    EQL             reduce using rule 74 (term -> FLOATNUM .)
    NEQ             reduce using rule 74 (term -> FLOATNUM .)
    GT              reduce using rule 74 (term -> FLOATNUM .)
    GTE             reduce using rule 74 (term -> FLOATNUM .)
    LT              reduce using rule 74 (term -> FLOATNUM .)
    LTE             reduce using rule 74 (term -> FLOATNUM .)
    TRANSPOSE       reduce using rule 74 (term -> FLOATNUM .)
    ,               reduce using rule 74 (term -> FLOATNUM .)
    ;               reduce using rule 74 (term -> FLOATNUM .)
    :               reduce using rule 74 (term -> FLOATNUM .)
    ]               reduce using rule 74 (term -> FLOATNUM .)
    )               reduce using rule 74 (term -> FLOATNUM .)
    ID              reduce using rule 74 (term -> FLOATNUM .)
    PRINT           reduce using rule 74 (term -> FLOATNUM .)
    CONTINUE        reduce using rule 74 (term -> FLOATNUM .)
    BREAK           reduce using rule 74 (term -> FLOATNUM .)
    RETURN          reduce using rule 74 (term -> FLOATNUM .)
    IF              reduce using rule 74 (term -> FLOATNUM .)
    FOR             reduce using rule 74 (term -> FLOATNUM .)
    WHILE           reduce using rule 74 (term -> FLOATNUM .)
    {               reduce using rule 74 (term -> FLOATNUM .)


state 52

    (75) term -> STR .

    +               reduce using rule 75 (term -> STR .)
    -               reduce using rule 75 (term -> STR .)
    /               reduce using rule 75 (term -> STR .)
    *               reduce using rule 75 (term -> STR .)
    EQL             reduce using rule 75 (term -> STR .)
    NEQ             reduce using rule 75 (term -> STR .)
    GT              reduce using rule 75 (term -> STR .)
    GTE             reduce using rule 75 (term -> STR .)
    LT              reduce using rule 75 (term -> STR .)
    LTE             reduce using rule 75 (term -> STR .)
    TRANSPOSE       reduce using rule 75 (term -> STR .)
    ,               reduce using rule 75 (term -> STR .)
    ;               reduce using rule 75 (term -> STR .)
    :               reduce using rule 75 (term -> STR .)
    ]               reduce using rule 75 (term -> STR .)
    )               reduce using rule 75 (term -> STR .)
    ID              reduce using rule 75 (term -> STR .)
    PRINT           reduce using rule 75 (term -> STR .)
    CONTINUE        reduce using rule 75 (term -> STR .)
    BREAK           reduce using rule 75 (term -> STR .)
    RETURN          reduce using rule 75 (term -> STR .)
    IF              reduce using rule 75 (term -> STR .)
    FOR             reduce using rule 75 (term -> STR .)
    WHILE           reduce using rule 75 (term -> STR .)
    {               reduce using rule 75 (term -> STR .)


state 53

    (51) vector -> [ . vector_contents ]
    (52) vector -> [ . ]
    (53) vector_contents -> . vector_contents , vector_element
    (54) vector_contents -> . vector_element
    (55) vector_element -> . term
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    ]               shift and go to state 91
    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    ID              shift and go to state 83
    [               shift and go to state 53

    vector_contents                shift and go to state 90
    vector_element                 shift and go to state 92
    term                           shift and go to state 93
    vector                         shift and go to state 82

state 54

    (17) return -> RETURN expression .
    (33) expression -> expression . + term
    (34) expression -> expression . - term
    (35) expression -> expression . / term
    (36) expression -> expression . * term
    (37) expression -> expression . EQL term
    (38) expression -> expression . NEQ term
    (39) expression -> expression . GT term
    (40) expression -> expression . GTE term
    (41) expression -> expression . LT term
    (42) expression -> expression . LTE term
    (44) expression -> expression . TRANSPOSE

    ;               reduce using rule 17 (return -> RETURN expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    EQL             shift and go to state 72
    NEQ             shift and go to state 73
    GT              shift and go to state 74
    GTE             shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77
    TRANSPOSE       shift and go to state 78


state 55

    (63) if -> IF condition . nested
    (64) if -> IF condition . nested ELSE nested
    (66) nested -> . statement
    (5) statement -> . assignment ;
    (6) statement -> . print ;
    (7) statement -> . continue ;
    (8) statement -> . break ;
    (9) statement -> . return ;
    (10) statement -> . if
    (11) statement -> . for
    (12) statement -> . while
    (13) statement -> . nested_statements
    (22) assignment -> . ID assign_symbol expression
    (23) assignment -> . ID slice assign_symbol expression
    (19) print -> . PRINT coma_separated
    (18) continue -> . CONTINUE
    (16) break -> . BREAK
    (17) return -> . RETURN expression
    (63) if -> . IF condition nested
    (64) if -> . IF condition nested ELSE nested
    (14) for -> . FOR ID ASSIGN expression : expression nested
    (15) while -> . WHILE condition nested
    (67) nested_statements -> . nested_empty
    (68) nested_statements -> . nested_statements_list
    (70) nested_empty -> . { }
    (69) nested_statements_list -> . { statements_list }

    ID              shift and go to state 14
    PRINT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    RETURN          shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    {               shift and go to state 24

    nested                         shift and go to state 94
    statement                      shift and go to state 95
    assignment                     shift and go to state 5
    print                          shift and go to state 6
    continue                       shift and go to state 7
    break                          shift and go to state 8
    return                         shift and go to state 9
    if                             shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12
    nested_statements              shift and go to state 13
    nested_empty                   shift and go to state 22
    nested_statements_list         shift and go to state 23

state 56

    (65) condition -> ( . expression )
    (29) expression -> . built_in_function ( expression_list )
    (32) expression -> . term
    (33) expression -> . expression + term
    (34) expression -> . expression - term
    (35) expression -> . expression / term
    (36) expression -> . expression * term
    (37) expression -> . expression EQL term
    (38) expression -> . expression NEQ term
    (39) expression -> . expression GT term
    (40) expression -> . expression GTE term
    (41) expression -> . expression LT term
    (42) expression -> . expression LTE term
    (43) expression -> . - term
    (44) expression -> . expression TRANSPOSE
    (45) expression -> . ID dot_operation term
    (46) expression -> . vector dot_operation term
    (77) built_in_function -> . EYE
    (78) built_in_function -> . ONES
    (79) built_in_function -> . ZEROS
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    -               shift and go to state 44
    ID              shift and go to state 45
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49
    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    [               shift and go to state 53

    expression                     shift and go to state 96
    built_in_function              shift and go to state 41
    term                           shift and go to state 43
    vector                         shift and go to state 46

state 57

    (14) for -> FOR ID . ASSIGN expression : expression nested

    ASSIGN          shift and go to state 97


state 58

    (15) while -> WHILE condition . nested
    (66) nested -> . statement
    (5) statement -> . assignment ;
    (6) statement -> . print ;
    (7) statement -> . continue ;
    (8) statement -> . break ;
    (9) statement -> . return ;
    (10) statement -> . if
    (11) statement -> . for
    (12) statement -> . while
    (13) statement -> . nested_statements
    (22) assignment -> . ID assign_symbol expression
    (23) assignment -> . ID slice assign_symbol expression
    (19) print -> . PRINT coma_separated
    (18) continue -> . CONTINUE
    (16) break -> . BREAK
    (17) return -> . RETURN expression
    (63) if -> . IF condition nested
    (64) if -> . IF condition nested ELSE nested
    (14) for -> . FOR ID ASSIGN expression : expression nested
    (15) while -> . WHILE condition nested
    (67) nested_statements -> . nested_empty
    (68) nested_statements -> . nested_statements_list
    (70) nested_empty -> . { }
    (69) nested_statements_list -> . { statements_list }

    ID              shift and go to state 14
    PRINT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    RETURN          shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    {               shift and go to state 24

    nested                         shift and go to state 98
    statement                      shift and go to state 95
    assignment                     shift and go to state 5
    print                          shift and go to state 6
    continue                       shift and go to state 7
    break                          shift and go to state 8
    return                         shift and go to state 9
    if                             shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12
    nested_statements              shift and go to state 13
    nested_empty                   shift and go to state 22
    nested_statements_list         shift and go to state 23

state 59

    (70) nested_empty -> { } .

    ID              reduce using rule 70 (nested_empty -> { } .)
    PRINT           reduce using rule 70 (nested_empty -> { } .)
    CONTINUE        reduce using rule 70 (nested_empty -> { } .)
    BREAK           reduce using rule 70 (nested_empty -> { } .)
    RETURN          reduce using rule 70 (nested_empty -> { } .)
    IF              reduce using rule 70 (nested_empty -> { } .)
    FOR             reduce using rule 70 (nested_empty -> { } .)
    WHILE           reduce using rule 70 (nested_empty -> { } .)
    {               reduce using rule 70 (nested_empty -> { } .)
    $end            reduce using rule 70 (nested_empty -> { } .)
    }               reduce using rule 70 (nested_empty -> { } .)
    ELSE            reduce using rule 70 (nested_empty -> { } .)


state 60

    (69) nested_statements_list -> { statements_list . }
    (3) statements_list -> statements_list . statement
    (5) statement -> . assignment ;
    (6) statement -> . print ;
    (7) statement -> . continue ;
    (8) statement -> . break ;
    (9) statement -> . return ;
    (10) statement -> . if
    (11) statement -> . for
    (12) statement -> . while
    (13) statement -> . nested_statements
    (22) assignment -> . ID assign_symbol expression
    (23) assignment -> . ID slice assign_symbol expression
    (19) print -> . PRINT coma_separated
    (18) continue -> . CONTINUE
    (16) break -> . BREAK
    (17) return -> . RETURN expression
    (63) if -> . IF condition nested
    (64) if -> . IF condition nested ELSE nested
    (14) for -> . FOR ID ASSIGN expression : expression nested
    (15) while -> . WHILE condition nested
    (67) nested_statements -> . nested_empty
    (68) nested_statements -> . nested_statements_list
    (70) nested_empty -> . { }
    (69) nested_statements_list -> . { statements_list }

    }               shift and go to state 99
    ID              shift and go to state 14
    PRINT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    RETURN          shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    {               shift and go to state 24

    statement                      shift and go to state 25
    assignment                     shift and go to state 5
    print                          shift and go to state 6
    continue                       shift and go to state 7
    break                          shift and go to state 8
    return                         shift and go to state 9
    if                             shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12
    nested_statements              shift and go to state 13
    nested_empty                   shift and go to state 22
    nested_statements_list         shift and go to state 23

state 61

    (22) assignment -> ID assign_symbol expression .
    (33) expression -> expression . + term
    (34) expression -> expression . - term
    (35) expression -> expression . / term
    (36) expression -> expression . * term
    (37) expression -> expression . EQL term
    (38) expression -> expression . NEQ term
    (39) expression -> expression . GT term
    (40) expression -> expression . GTE term
    (41) expression -> expression . LT term
    (42) expression -> expression . LTE term
    (44) expression -> expression . TRANSPOSE

    ;               reduce using rule 22 (assignment -> ID assign_symbol expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    EQL             shift and go to state 72
    NEQ             shift and go to state 73
    GT              shift and go to state 74
    GTE             shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77
    TRANSPOSE       shift and go to state 78


state 62

    (23) assignment -> ID slice assign_symbol . expression
    (29) expression -> . built_in_function ( expression_list )
    (32) expression -> . term
    (33) expression -> . expression + term
    (34) expression -> . expression - term
    (35) expression -> . expression / term
    (36) expression -> . expression * term
    (37) expression -> . expression EQL term
    (38) expression -> . expression NEQ term
    (39) expression -> . expression GT term
    (40) expression -> . expression GTE term
    (41) expression -> . expression LT term
    (42) expression -> . expression LTE term
    (43) expression -> . - term
    (44) expression -> . expression TRANSPOSE
    (45) expression -> . ID dot_operation term
    (46) expression -> . vector dot_operation term
    (77) built_in_function -> . EYE
    (78) built_in_function -> . ONES
    (79) built_in_function -> . ZEROS
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    -               shift and go to state 44
    ID              shift and go to state 45
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49
    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    [               shift and go to state 53

    expression                     shift and go to state 100
    built_in_function              shift and go to state 41
    term                           shift and go to state 43
    vector                         shift and go to state 46

state 63

    (56) slice -> [ slice_contents . ]
    (57) slice_contents -> slice_contents . , range

    ]               shift and go to state 101
    ,               shift and go to state 102


state 64

    (58) slice_contents -> range .

    ]               reduce using rule 58 (slice_contents -> range .)
    ,               reduce using rule 58 (slice_contents -> range .)


state 65

    (59) range -> expression . : expression
    (60) range -> expression . :
    (62) range -> expression .
    (33) expression -> expression . + term
    (34) expression -> expression . - term
    (35) expression -> expression . / term
    (36) expression -> expression . * term
    (37) expression -> expression . EQL term
    (38) expression -> expression . NEQ term
    (39) expression -> expression . GT term
    (40) expression -> expression . GTE term
    (41) expression -> expression . LT term
    (42) expression -> expression . LTE term
    (44) expression -> expression . TRANSPOSE

    :               shift and go to state 103
    ]               reduce using rule 62 (range -> expression .)
    ,               reduce using rule 62 (range -> expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    EQL             shift and go to state 72
    NEQ             shift and go to state 73
    GT              shift and go to state 74
    GTE             shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77
    TRANSPOSE       shift and go to state 78


state 66

    (61) range -> : . expression
    (29) expression -> . built_in_function ( expression_list )
    (32) expression -> . term
    (33) expression -> . expression + term
    (34) expression -> . expression - term
    (35) expression -> . expression / term
    (36) expression -> . expression * term
    (37) expression -> . expression EQL term
    (38) expression -> . expression NEQ term
    (39) expression -> . expression GT term
    (40) expression -> . expression GTE term
    (41) expression -> . expression LT term
    (42) expression -> . expression LTE term
    (43) expression -> . - term
    (44) expression -> . expression TRANSPOSE
    (45) expression -> . ID dot_operation term
    (46) expression -> . vector dot_operation term
    (77) built_in_function -> . EYE
    (78) built_in_function -> . ONES
    (79) built_in_function -> . ZEROS
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    -               shift and go to state 44
    ID              shift and go to state 45
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49
    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    [               shift and go to state 53

    expression                     shift and go to state 104
    built_in_function              shift and go to state 41
    term                           shift and go to state 43
    vector                         shift and go to state 46

state 67

    (20) coma_separated -> coma_separated , . expression
    (29) expression -> . built_in_function ( expression_list )
    (32) expression -> . term
    (33) expression -> . expression + term
    (34) expression -> . expression - term
    (35) expression -> . expression / term
    (36) expression -> . expression * term
    (37) expression -> . expression EQL term
    (38) expression -> . expression NEQ term
    (39) expression -> . expression GT term
    (40) expression -> . expression GTE term
    (41) expression -> . expression LT term
    (42) expression -> . expression LTE term
    (43) expression -> . - term
    (44) expression -> . expression TRANSPOSE
    (45) expression -> . ID dot_operation term
    (46) expression -> . vector dot_operation term
    (77) built_in_function -> . EYE
    (78) built_in_function -> . ONES
    (79) built_in_function -> . ZEROS
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    -               shift and go to state 44
    ID              shift and go to state 45
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49
    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    [               shift and go to state 53

    expression                     shift and go to state 105
    built_in_function              shift and go to state 41
    term                           shift and go to state 43
    vector                         shift and go to state 46

state 68

    (33) expression -> expression + . term
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    ID              shift and go to state 83
    [               shift and go to state 53

    term                           shift and go to state 106
    vector                         shift and go to state 82

state 69

    (34) expression -> expression - . term
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    ID              shift and go to state 83
    [               shift and go to state 53

    term                           shift and go to state 107
    vector                         shift and go to state 82

state 70

    (35) expression -> expression / . term
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    ID              shift and go to state 83
    [               shift and go to state 53

    term                           shift and go to state 108
    vector                         shift and go to state 82

state 71

    (36) expression -> expression * . term
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    ID              shift and go to state 83
    [               shift and go to state 53

    term                           shift and go to state 109
    vector                         shift and go to state 82

state 72

    (37) expression -> expression EQL . term
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    ID              shift and go to state 83
    [               shift and go to state 53

    term                           shift and go to state 110
    vector                         shift and go to state 82

state 73

    (38) expression -> expression NEQ . term
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    ID              shift and go to state 83
    [               shift and go to state 53

    term                           shift and go to state 111
    vector                         shift and go to state 82

state 74

    (39) expression -> expression GT . term
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    ID              shift and go to state 83
    [               shift and go to state 53

    term                           shift and go to state 112
    vector                         shift and go to state 82

state 75

    (40) expression -> expression GTE . term
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    ID              shift and go to state 83
    [               shift and go to state 53

    term                           shift and go to state 113
    vector                         shift and go to state 82

state 76

    (41) expression -> expression LT . term
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    ID              shift and go to state 83
    [               shift and go to state 53

    term                           shift and go to state 114
    vector                         shift and go to state 82

state 77

    (42) expression -> expression LTE . term
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    ID              shift and go to state 83
    [               shift and go to state 53

    term                           shift and go to state 115
    vector                         shift and go to state 82

state 78

    (44) expression -> expression TRANSPOSE .

    +               reduce using rule 44 (expression -> expression TRANSPOSE .)
    -               reduce using rule 44 (expression -> expression TRANSPOSE .)
    /               reduce using rule 44 (expression -> expression TRANSPOSE .)
    *               reduce using rule 44 (expression -> expression TRANSPOSE .)
    EQL             reduce using rule 44 (expression -> expression TRANSPOSE .)
    NEQ             reduce using rule 44 (expression -> expression TRANSPOSE .)
    GT              reduce using rule 44 (expression -> expression TRANSPOSE .)
    GTE             reduce using rule 44 (expression -> expression TRANSPOSE .)
    LT              reduce using rule 44 (expression -> expression TRANSPOSE .)
    LTE             reduce using rule 44 (expression -> expression TRANSPOSE .)
    TRANSPOSE       reduce using rule 44 (expression -> expression TRANSPOSE .)
    ,               reduce using rule 44 (expression -> expression TRANSPOSE .)
    ;               reduce using rule 44 (expression -> expression TRANSPOSE .)
    :               reduce using rule 44 (expression -> expression TRANSPOSE .)
    ]               reduce using rule 44 (expression -> expression TRANSPOSE .)
    )               reduce using rule 44 (expression -> expression TRANSPOSE .)
    ID              reduce using rule 44 (expression -> expression TRANSPOSE .)
    PRINT           reduce using rule 44 (expression -> expression TRANSPOSE .)
    CONTINUE        reduce using rule 44 (expression -> expression TRANSPOSE .)
    BREAK           reduce using rule 44 (expression -> expression TRANSPOSE .)
    RETURN          reduce using rule 44 (expression -> expression TRANSPOSE .)
    IF              reduce using rule 44 (expression -> expression TRANSPOSE .)
    FOR             reduce using rule 44 (expression -> expression TRANSPOSE .)
    WHILE           reduce using rule 44 (expression -> expression TRANSPOSE .)
    {               reduce using rule 44 (expression -> expression TRANSPOSE .)


state 79

    (29) expression -> built_in_function ( . expression_list )
    (30) expression_list -> . expression_list , expression
    (31) expression_list -> . expression
    (29) expression -> . built_in_function ( expression_list )
    (32) expression -> . term
    (33) expression -> . expression + term
    (34) expression -> . expression - term
    (35) expression -> . expression / term
    (36) expression -> . expression * term
    (37) expression -> . expression EQL term
    (38) expression -> . expression NEQ term
    (39) expression -> . expression GT term
    (40) expression -> . expression GTE term
    (41) expression -> . expression LT term
    (42) expression -> . expression LTE term
    (43) expression -> . - term
    (44) expression -> . expression TRANSPOSE
    (45) expression -> . ID dot_operation term
    (46) expression -> . vector dot_operation term
    (77) built_in_function -> . EYE
    (78) built_in_function -> . ONES
    (79) built_in_function -> . ZEROS
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    -               shift and go to state 44
    ID              shift and go to state 45
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49
    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    [               shift and go to state 53

    built_in_function              shift and go to state 41
    expression_list                shift and go to state 116
    expression                     shift and go to state 117
    term                           shift and go to state 43
    vector                         shift and go to state 46

state 80

    (71) term -> ( expression . )
    (33) expression -> expression . + term
    (34) expression -> expression . - term
    (35) expression -> expression . / term
    (36) expression -> expression . * term
    (37) expression -> expression . EQL term
    (38) expression -> expression . NEQ term
    (39) expression -> expression . GT term
    (40) expression -> expression . GTE term
    (41) expression -> expression . LT term
    (42) expression -> expression . LTE term
    (44) expression -> expression . TRANSPOSE

    )               shift and go to state 118
    +               shift and go to state 68
    -               shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    EQL             shift and go to state 72
    NEQ             shift and go to state 73
    GT              shift and go to state 74
    GTE             shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77
    TRANSPOSE       shift and go to state 78


state 81

    (43) expression -> - term .

    +               reduce using rule 43 (expression -> - term .)
    -               reduce using rule 43 (expression -> - term .)
    /               reduce using rule 43 (expression -> - term .)
    *               reduce using rule 43 (expression -> - term .)
    EQL             reduce using rule 43 (expression -> - term .)
    NEQ             reduce using rule 43 (expression -> - term .)
    GT              reduce using rule 43 (expression -> - term .)
    GTE             reduce using rule 43 (expression -> - term .)
    LT              reduce using rule 43 (expression -> - term .)
    LTE             reduce using rule 43 (expression -> - term .)
    TRANSPOSE       reduce using rule 43 (expression -> - term .)
    ,               reduce using rule 43 (expression -> - term .)
    ;               reduce using rule 43 (expression -> - term .)
    :               reduce using rule 43 (expression -> - term .)
    ]               reduce using rule 43 (expression -> - term .)
    )               reduce using rule 43 (expression -> - term .)
    ID              reduce using rule 43 (expression -> - term .)
    PRINT           reduce using rule 43 (expression -> - term .)
    CONTINUE        reduce using rule 43 (expression -> - term .)
    BREAK           reduce using rule 43 (expression -> - term .)
    RETURN          reduce using rule 43 (expression -> - term .)
    IF              reduce using rule 43 (expression -> - term .)
    FOR             reduce using rule 43 (expression -> - term .)
    WHILE           reduce using rule 43 (expression -> - term .)
    {               reduce using rule 43 (expression -> - term .)


state 82

    (72) term -> vector .

    +               reduce using rule 72 (term -> vector .)
    -               reduce using rule 72 (term -> vector .)
    /               reduce using rule 72 (term -> vector .)
    *               reduce using rule 72 (term -> vector .)
    EQL             reduce using rule 72 (term -> vector .)
    NEQ             reduce using rule 72 (term -> vector .)
    GT              reduce using rule 72 (term -> vector .)
    GTE             reduce using rule 72 (term -> vector .)
    LT              reduce using rule 72 (term -> vector .)
    LTE             reduce using rule 72 (term -> vector .)
    TRANSPOSE       reduce using rule 72 (term -> vector .)
    ,               reduce using rule 72 (term -> vector .)
    ;               reduce using rule 72 (term -> vector .)
    :               reduce using rule 72 (term -> vector .)
    ]               reduce using rule 72 (term -> vector .)
    )               reduce using rule 72 (term -> vector .)
    ID              reduce using rule 72 (term -> vector .)
    PRINT           reduce using rule 72 (term -> vector .)
    CONTINUE        reduce using rule 72 (term -> vector .)
    BREAK           reduce using rule 72 (term -> vector .)
    RETURN          reduce using rule 72 (term -> vector .)
    IF              reduce using rule 72 (term -> vector .)
    FOR             reduce using rule 72 (term -> vector .)
    WHILE           reduce using rule 72 (term -> vector .)
    {               reduce using rule 72 (term -> vector .)


state 83

    (76) term -> ID .

    +               reduce using rule 76 (term -> ID .)
    -               reduce using rule 76 (term -> ID .)
    /               reduce using rule 76 (term -> ID .)
    *               reduce using rule 76 (term -> ID .)
    EQL             reduce using rule 76 (term -> ID .)
    NEQ             reduce using rule 76 (term -> ID .)
    GT              reduce using rule 76 (term -> ID .)
    GTE             reduce using rule 76 (term -> ID .)
    LT              reduce using rule 76 (term -> ID .)
    LTE             reduce using rule 76 (term -> ID .)
    TRANSPOSE       reduce using rule 76 (term -> ID .)
    ,               reduce using rule 76 (term -> ID .)
    ;               reduce using rule 76 (term -> ID .)
    :               reduce using rule 76 (term -> ID .)
    ]               reduce using rule 76 (term -> ID .)
    )               reduce using rule 76 (term -> ID .)
    ID              reduce using rule 76 (term -> ID .)
    PRINT           reduce using rule 76 (term -> ID .)
    CONTINUE        reduce using rule 76 (term -> ID .)
    BREAK           reduce using rule 76 (term -> ID .)
    RETURN          reduce using rule 76 (term -> ID .)
    IF              reduce using rule 76 (term -> ID .)
    FOR             reduce using rule 76 (term -> ID .)
    WHILE           reduce using rule 76 (term -> ID .)
    {               reduce using rule 76 (term -> ID .)


state 84

    (45) expression -> ID dot_operation . term
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    ID              shift and go to state 83
    [               shift and go to state 53

    term                           shift and go to state 119
    vector                         shift and go to state 82

state 85

    (47) dot_operation -> DOTADD .

    (               reduce using rule 47 (dot_operation -> DOTADD .)
    INTNUM          reduce using rule 47 (dot_operation -> DOTADD .)
    FLOATNUM        reduce using rule 47 (dot_operation -> DOTADD .)
    STR             reduce using rule 47 (dot_operation -> DOTADD .)
    ID              reduce using rule 47 (dot_operation -> DOTADD .)
    [               reduce using rule 47 (dot_operation -> DOTADD .)


state 86

    (48) dot_operation -> DOTSUB .

    (               reduce using rule 48 (dot_operation -> DOTSUB .)
    INTNUM          reduce using rule 48 (dot_operation -> DOTSUB .)
    FLOATNUM        reduce using rule 48 (dot_operation -> DOTSUB .)
    STR             reduce using rule 48 (dot_operation -> DOTSUB .)
    ID              reduce using rule 48 (dot_operation -> DOTSUB .)
    [               reduce using rule 48 (dot_operation -> DOTSUB .)


state 87

    (49) dot_operation -> DOTMUL .

    (               reduce using rule 49 (dot_operation -> DOTMUL .)
    INTNUM          reduce using rule 49 (dot_operation -> DOTMUL .)
    FLOATNUM        reduce using rule 49 (dot_operation -> DOTMUL .)
    STR             reduce using rule 49 (dot_operation -> DOTMUL .)
    ID              reduce using rule 49 (dot_operation -> DOTMUL .)
    [               reduce using rule 49 (dot_operation -> DOTMUL .)


state 88

    (50) dot_operation -> DOTDIV .

    (               reduce using rule 50 (dot_operation -> DOTDIV .)
    INTNUM          reduce using rule 50 (dot_operation -> DOTDIV .)
    FLOATNUM        reduce using rule 50 (dot_operation -> DOTDIV .)
    STR             reduce using rule 50 (dot_operation -> DOTDIV .)
    ID              reduce using rule 50 (dot_operation -> DOTDIV .)
    [               reduce using rule 50 (dot_operation -> DOTDIV .)


state 89

    (46) expression -> vector dot_operation . term
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    ID              shift and go to state 83
    [               shift and go to state 53

    vector                         shift and go to state 82
    term                           shift and go to state 120

state 90

    (51) vector -> [ vector_contents . ]
    (53) vector_contents -> vector_contents . , vector_element

    ]               shift and go to state 121
    ,               shift and go to state 122


state 91

    (52) vector -> [ ] .

    DOTADD          reduce using rule 52 (vector -> [ ] .)
    DOTSUB          reduce using rule 52 (vector -> [ ] .)
    DOTMUL          reduce using rule 52 (vector -> [ ] .)
    DOTDIV          reduce using rule 52 (vector -> [ ] .)
    +               reduce using rule 52 (vector -> [ ] .)
    -               reduce using rule 52 (vector -> [ ] .)
    /               reduce using rule 52 (vector -> [ ] .)
    *               reduce using rule 52 (vector -> [ ] .)
    EQL             reduce using rule 52 (vector -> [ ] .)
    NEQ             reduce using rule 52 (vector -> [ ] .)
    GT              reduce using rule 52 (vector -> [ ] .)
    GTE             reduce using rule 52 (vector -> [ ] .)
    LT              reduce using rule 52 (vector -> [ ] .)
    LTE             reduce using rule 52 (vector -> [ ] .)
    TRANSPOSE       reduce using rule 52 (vector -> [ ] .)
    ,               reduce using rule 52 (vector -> [ ] .)
    ;               reduce using rule 52 (vector -> [ ] .)
    :               reduce using rule 52 (vector -> [ ] .)
    ]               reduce using rule 52 (vector -> [ ] .)
    )               reduce using rule 52 (vector -> [ ] .)
    ID              reduce using rule 52 (vector -> [ ] .)
    PRINT           reduce using rule 52 (vector -> [ ] .)
    CONTINUE        reduce using rule 52 (vector -> [ ] .)
    BREAK           reduce using rule 52 (vector -> [ ] .)
    RETURN          reduce using rule 52 (vector -> [ ] .)
    IF              reduce using rule 52 (vector -> [ ] .)
    FOR             reduce using rule 52 (vector -> [ ] .)
    WHILE           reduce using rule 52 (vector -> [ ] .)
    {               reduce using rule 52 (vector -> [ ] .)


state 92

    (54) vector_contents -> vector_element .

    ]               reduce using rule 54 (vector_contents -> vector_element .)
    ,               reduce using rule 54 (vector_contents -> vector_element .)


state 93

    (55) vector_element -> term .

    ]               reduce using rule 55 (vector_element -> term .)
    ,               reduce using rule 55 (vector_element -> term .)


state 94

    (63) if -> IF condition nested .
    (64) if -> IF condition nested . ELSE nested

    ID              reduce using rule 63 (if -> IF condition nested .)
    PRINT           reduce using rule 63 (if -> IF condition nested .)
    CONTINUE        reduce using rule 63 (if -> IF condition nested .)
    BREAK           reduce using rule 63 (if -> IF condition nested .)
    RETURN          reduce using rule 63 (if -> IF condition nested .)
    IF              reduce using rule 63 (if -> IF condition nested .)
    FOR             reduce using rule 63 (if -> IF condition nested .)
    WHILE           reduce using rule 63 (if -> IF condition nested .)
    {               reduce using rule 63 (if -> IF condition nested .)
    $end            reduce using rule 63 (if -> IF condition nested .)
    }               reduce using rule 63 (if -> IF condition nested .)
    ELSE            shift and go to state 123

  ! ELSE            [ reduce using rule 63 (if -> IF condition nested .) ]


state 95

    (66) nested -> statement .

    ELSE            reduce using rule 66 (nested -> statement .)
    ID              reduce using rule 66 (nested -> statement .)
    PRINT           reduce using rule 66 (nested -> statement .)
    CONTINUE        reduce using rule 66 (nested -> statement .)
    BREAK           reduce using rule 66 (nested -> statement .)
    RETURN          reduce using rule 66 (nested -> statement .)
    IF              reduce using rule 66 (nested -> statement .)
    FOR             reduce using rule 66 (nested -> statement .)
    WHILE           reduce using rule 66 (nested -> statement .)
    {               reduce using rule 66 (nested -> statement .)
    $end            reduce using rule 66 (nested -> statement .)
    }               reduce using rule 66 (nested -> statement .)


state 96

    (65) condition -> ( expression . )
    (33) expression -> expression . + term
    (34) expression -> expression . - term
    (35) expression -> expression . / term
    (36) expression -> expression . * term
    (37) expression -> expression . EQL term
    (38) expression -> expression . NEQ term
    (39) expression -> expression . GT term
    (40) expression -> expression . GTE term
    (41) expression -> expression . LT term
    (42) expression -> expression . LTE term
    (44) expression -> expression . TRANSPOSE

    )               shift and go to state 124
    +               shift and go to state 68
    -               shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    EQL             shift and go to state 72
    NEQ             shift and go to state 73
    GT              shift and go to state 74
    GTE             shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77
    TRANSPOSE       shift and go to state 78


state 97

    (14) for -> FOR ID ASSIGN . expression : expression nested
    (29) expression -> . built_in_function ( expression_list )
    (32) expression -> . term
    (33) expression -> . expression + term
    (34) expression -> . expression - term
    (35) expression -> . expression / term
    (36) expression -> . expression * term
    (37) expression -> . expression EQL term
    (38) expression -> . expression NEQ term
    (39) expression -> . expression GT term
    (40) expression -> . expression GTE term
    (41) expression -> . expression LT term
    (42) expression -> . expression LTE term
    (43) expression -> . - term
    (44) expression -> . expression TRANSPOSE
    (45) expression -> . ID dot_operation term
    (46) expression -> . vector dot_operation term
    (77) built_in_function -> . EYE
    (78) built_in_function -> . ONES
    (79) built_in_function -> . ZEROS
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    -               shift and go to state 44
    ID              shift and go to state 45
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49
    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    [               shift and go to state 53

    expression                     shift and go to state 125
    built_in_function              shift and go to state 41
    term                           shift and go to state 43
    vector                         shift and go to state 46

state 98

    (15) while -> WHILE condition nested .

    ID              reduce using rule 15 (while -> WHILE condition nested .)
    PRINT           reduce using rule 15 (while -> WHILE condition nested .)
    CONTINUE        reduce using rule 15 (while -> WHILE condition nested .)
    BREAK           reduce using rule 15 (while -> WHILE condition nested .)
    RETURN          reduce using rule 15 (while -> WHILE condition nested .)
    IF              reduce using rule 15 (while -> WHILE condition nested .)
    FOR             reduce using rule 15 (while -> WHILE condition nested .)
    WHILE           reduce using rule 15 (while -> WHILE condition nested .)
    {               reduce using rule 15 (while -> WHILE condition nested .)
    $end            reduce using rule 15 (while -> WHILE condition nested .)
    }               reduce using rule 15 (while -> WHILE condition nested .)
    ELSE            reduce using rule 15 (while -> WHILE condition nested .)


state 99

    (69) nested_statements_list -> { statements_list } .

    ID              reduce using rule 69 (nested_statements_list -> { statements_list } .)
    PRINT           reduce using rule 69 (nested_statements_list -> { statements_list } .)
    CONTINUE        reduce using rule 69 (nested_statements_list -> { statements_list } .)
    BREAK           reduce using rule 69 (nested_statements_list -> { statements_list } .)
    RETURN          reduce using rule 69 (nested_statements_list -> { statements_list } .)
    IF              reduce using rule 69 (nested_statements_list -> { statements_list } .)
    FOR             reduce using rule 69 (nested_statements_list -> { statements_list } .)
    WHILE           reduce using rule 69 (nested_statements_list -> { statements_list } .)
    {               reduce using rule 69 (nested_statements_list -> { statements_list } .)
    $end            reduce using rule 69 (nested_statements_list -> { statements_list } .)
    }               reduce using rule 69 (nested_statements_list -> { statements_list } .)
    ELSE            reduce using rule 69 (nested_statements_list -> { statements_list } .)


state 100

    (23) assignment -> ID slice assign_symbol expression .
    (33) expression -> expression . + term
    (34) expression -> expression . - term
    (35) expression -> expression . / term
    (36) expression -> expression . * term
    (37) expression -> expression . EQL term
    (38) expression -> expression . NEQ term
    (39) expression -> expression . GT term
    (40) expression -> expression . GTE term
    (41) expression -> expression . LT term
    (42) expression -> expression . LTE term
    (44) expression -> expression . TRANSPOSE

    ;               reduce using rule 23 (assignment -> ID slice assign_symbol expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    EQL             shift and go to state 72
    NEQ             shift and go to state 73
    GT              shift and go to state 74
    GTE             shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77
    TRANSPOSE       shift and go to state 78


state 101

    (56) slice -> [ slice_contents ] .

    ASSIGN          reduce using rule 56 (slice -> [ slice_contents ] .)
    SUBASSIGN       reduce using rule 56 (slice -> [ slice_contents ] .)
    ADDASSIGN       reduce using rule 56 (slice -> [ slice_contents ] .)
    DIVASSIGN       reduce using rule 56 (slice -> [ slice_contents ] .)
    MULTASSIGN      reduce using rule 56 (slice -> [ slice_contents ] .)


state 102

    (57) slice_contents -> slice_contents , . range
    (59) range -> . expression : expression
    (60) range -> . expression :
    (61) range -> . : expression
    (62) range -> . expression
    (29) expression -> . built_in_function ( expression_list )
    (32) expression -> . term
    (33) expression -> . expression + term
    (34) expression -> . expression - term
    (35) expression -> . expression / term
    (36) expression -> . expression * term
    (37) expression -> . expression EQL term
    (38) expression -> . expression NEQ term
    (39) expression -> . expression GT term
    (40) expression -> . expression GTE term
    (41) expression -> . expression LT term
    (42) expression -> . expression LTE term
    (43) expression -> . - term
    (44) expression -> . expression TRANSPOSE
    (45) expression -> . ID dot_operation term
    (46) expression -> . vector dot_operation term
    (77) built_in_function -> . EYE
    (78) built_in_function -> . ONES
    (79) built_in_function -> . ZEROS
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    :               shift and go to state 66
    -               shift and go to state 44
    ID              shift and go to state 45
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49
    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    [               shift and go to state 53

    range                          shift and go to state 126
    expression                     shift and go to state 65
    built_in_function              shift and go to state 41
    term                           shift and go to state 43
    vector                         shift and go to state 46

state 103

    (59) range -> expression : . expression
    (60) range -> expression : .
    (29) expression -> . built_in_function ( expression_list )
    (32) expression -> . term
    (33) expression -> . expression + term
    (34) expression -> . expression - term
    (35) expression -> . expression / term
    (36) expression -> . expression * term
    (37) expression -> . expression EQL term
    (38) expression -> . expression NEQ term
    (39) expression -> . expression GT term
    (40) expression -> . expression GTE term
    (41) expression -> . expression LT term
    (42) expression -> . expression LTE term
    (43) expression -> . - term
    (44) expression -> . expression TRANSPOSE
    (45) expression -> . ID dot_operation term
    (46) expression -> . vector dot_operation term
    (77) built_in_function -> . EYE
    (78) built_in_function -> . ONES
    (79) built_in_function -> . ZEROS
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    ]               reduce using rule 60 (range -> expression : .)
    ,               reduce using rule 60 (range -> expression : .)
    -               shift and go to state 44
    ID              shift and go to state 45
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49
    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    [               shift and go to state 53

    expression                     shift and go to state 127
    built_in_function              shift and go to state 41
    term                           shift and go to state 43
    vector                         shift and go to state 46

state 104

    (61) range -> : expression .
    (33) expression -> expression . + term
    (34) expression -> expression . - term
    (35) expression -> expression . / term
    (36) expression -> expression . * term
    (37) expression -> expression . EQL term
    (38) expression -> expression . NEQ term
    (39) expression -> expression . GT term
    (40) expression -> expression . GTE term
    (41) expression -> expression . LT term
    (42) expression -> expression . LTE term
    (44) expression -> expression . TRANSPOSE

    ]               reduce using rule 61 (range -> : expression .)
    ,               reduce using rule 61 (range -> : expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    EQL             shift and go to state 72
    NEQ             shift and go to state 73
    GT              shift and go to state 74
    GTE             shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77
    TRANSPOSE       shift and go to state 78


state 105

    (20) coma_separated -> coma_separated , expression .
    (33) expression -> expression . + term
    (34) expression -> expression . - term
    (35) expression -> expression . / term
    (36) expression -> expression . * term
    (37) expression -> expression . EQL term
    (38) expression -> expression . NEQ term
    (39) expression -> expression . GT term
    (40) expression -> expression . GTE term
    (41) expression -> expression . LT term
    (42) expression -> expression . LTE term
    (44) expression -> expression . TRANSPOSE

    ,               reduce using rule 20 (coma_separated -> coma_separated , expression .)
    ;               reduce using rule 20 (coma_separated -> coma_separated , expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    EQL             shift and go to state 72
    NEQ             shift and go to state 73
    GT              shift and go to state 74
    GTE             shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77
    TRANSPOSE       shift and go to state 78


state 106

    (33) expression -> expression + term .

    +               reduce using rule 33 (expression -> expression + term .)
    -               reduce using rule 33 (expression -> expression + term .)
    /               reduce using rule 33 (expression -> expression + term .)
    *               reduce using rule 33 (expression -> expression + term .)
    EQL             reduce using rule 33 (expression -> expression + term .)
    NEQ             reduce using rule 33 (expression -> expression + term .)
    GT              reduce using rule 33 (expression -> expression + term .)
    GTE             reduce using rule 33 (expression -> expression + term .)
    LT              reduce using rule 33 (expression -> expression + term .)
    LTE             reduce using rule 33 (expression -> expression + term .)
    TRANSPOSE       reduce using rule 33 (expression -> expression + term .)
    ,               reduce using rule 33 (expression -> expression + term .)
    ;               reduce using rule 33 (expression -> expression + term .)
    :               reduce using rule 33 (expression -> expression + term .)
    ]               reduce using rule 33 (expression -> expression + term .)
    )               reduce using rule 33 (expression -> expression + term .)
    ID              reduce using rule 33 (expression -> expression + term .)
    PRINT           reduce using rule 33 (expression -> expression + term .)
    CONTINUE        reduce using rule 33 (expression -> expression + term .)
    BREAK           reduce using rule 33 (expression -> expression + term .)
    RETURN          reduce using rule 33 (expression -> expression + term .)
    IF              reduce using rule 33 (expression -> expression + term .)
    FOR             reduce using rule 33 (expression -> expression + term .)
    WHILE           reduce using rule 33 (expression -> expression + term .)
    {               reduce using rule 33 (expression -> expression + term .)


state 107

    (34) expression -> expression - term .

    +               reduce using rule 34 (expression -> expression - term .)
    -               reduce using rule 34 (expression -> expression - term .)
    /               reduce using rule 34 (expression -> expression - term .)
    *               reduce using rule 34 (expression -> expression - term .)
    EQL             reduce using rule 34 (expression -> expression - term .)
    NEQ             reduce using rule 34 (expression -> expression - term .)
    GT              reduce using rule 34 (expression -> expression - term .)
    GTE             reduce using rule 34 (expression -> expression - term .)
    LT              reduce using rule 34 (expression -> expression - term .)
    LTE             reduce using rule 34 (expression -> expression - term .)
    TRANSPOSE       reduce using rule 34 (expression -> expression - term .)
    ,               reduce using rule 34 (expression -> expression - term .)
    ;               reduce using rule 34 (expression -> expression - term .)
    :               reduce using rule 34 (expression -> expression - term .)
    ]               reduce using rule 34 (expression -> expression - term .)
    )               reduce using rule 34 (expression -> expression - term .)
    ID              reduce using rule 34 (expression -> expression - term .)
    PRINT           reduce using rule 34 (expression -> expression - term .)
    CONTINUE        reduce using rule 34 (expression -> expression - term .)
    BREAK           reduce using rule 34 (expression -> expression - term .)
    RETURN          reduce using rule 34 (expression -> expression - term .)
    IF              reduce using rule 34 (expression -> expression - term .)
    FOR             reduce using rule 34 (expression -> expression - term .)
    WHILE           reduce using rule 34 (expression -> expression - term .)
    {               reduce using rule 34 (expression -> expression - term .)


state 108

    (35) expression -> expression / term .

    +               reduce using rule 35 (expression -> expression / term .)
    -               reduce using rule 35 (expression -> expression / term .)
    /               reduce using rule 35 (expression -> expression / term .)
    *               reduce using rule 35 (expression -> expression / term .)
    EQL             reduce using rule 35 (expression -> expression / term .)
    NEQ             reduce using rule 35 (expression -> expression / term .)
    GT              reduce using rule 35 (expression -> expression / term .)
    GTE             reduce using rule 35 (expression -> expression / term .)
    LT              reduce using rule 35 (expression -> expression / term .)
    LTE             reduce using rule 35 (expression -> expression / term .)
    TRANSPOSE       reduce using rule 35 (expression -> expression / term .)
    ,               reduce using rule 35 (expression -> expression / term .)
    ;               reduce using rule 35 (expression -> expression / term .)
    :               reduce using rule 35 (expression -> expression / term .)
    ]               reduce using rule 35 (expression -> expression / term .)
    )               reduce using rule 35 (expression -> expression / term .)
    ID              reduce using rule 35 (expression -> expression / term .)
    PRINT           reduce using rule 35 (expression -> expression / term .)
    CONTINUE        reduce using rule 35 (expression -> expression / term .)
    BREAK           reduce using rule 35 (expression -> expression / term .)
    RETURN          reduce using rule 35 (expression -> expression / term .)
    IF              reduce using rule 35 (expression -> expression / term .)
    FOR             reduce using rule 35 (expression -> expression / term .)
    WHILE           reduce using rule 35 (expression -> expression / term .)
    {               reduce using rule 35 (expression -> expression / term .)


state 109

    (36) expression -> expression * term .

    +               reduce using rule 36 (expression -> expression * term .)
    -               reduce using rule 36 (expression -> expression * term .)
    /               reduce using rule 36 (expression -> expression * term .)
    *               reduce using rule 36 (expression -> expression * term .)
    EQL             reduce using rule 36 (expression -> expression * term .)
    NEQ             reduce using rule 36 (expression -> expression * term .)
    GT              reduce using rule 36 (expression -> expression * term .)
    GTE             reduce using rule 36 (expression -> expression * term .)
    LT              reduce using rule 36 (expression -> expression * term .)
    LTE             reduce using rule 36 (expression -> expression * term .)
    TRANSPOSE       reduce using rule 36 (expression -> expression * term .)
    ,               reduce using rule 36 (expression -> expression * term .)
    ;               reduce using rule 36 (expression -> expression * term .)
    :               reduce using rule 36 (expression -> expression * term .)
    ]               reduce using rule 36 (expression -> expression * term .)
    )               reduce using rule 36 (expression -> expression * term .)
    ID              reduce using rule 36 (expression -> expression * term .)
    PRINT           reduce using rule 36 (expression -> expression * term .)
    CONTINUE        reduce using rule 36 (expression -> expression * term .)
    BREAK           reduce using rule 36 (expression -> expression * term .)
    RETURN          reduce using rule 36 (expression -> expression * term .)
    IF              reduce using rule 36 (expression -> expression * term .)
    FOR             reduce using rule 36 (expression -> expression * term .)
    WHILE           reduce using rule 36 (expression -> expression * term .)
    {               reduce using rule 36 (expression -> expression * term .)


state 110

    (37) expression -> expression EQL term .

    +               reduce using rule 37 (expression -> expression EQL term .)
    -               reduce using rule 37 (expression -> expression EQL term .)
    /               reduce using rule 37 (expression -> expression EQL term .)
    *               reduce using rule 37 (expression -> expression EQL term .)
    EQL             reduce using rule 37 (expression -> expression EQL term .)
    NEQ             reduce using rule 37 (expression -> expression EQL term .)
    GT              reduce using rule 37 (expression -> expression EQL term .)
    GTE             reduce using rule 37 (expression -> expression EQL term .)
    LT              reduce using rule 37 (expression -> expression EQL term .)
    LTE             reduce using rule 37 (expression -> expression EQL term .)
    TRANSPOSE       reduce using rule 37 (expression -> expression EQL term .)
    ,               reduce using rule 37 (expression -> expression EQL term .)
    ;               reduce using rule 37 (expression -> expression EQL term .)
    :               reduce using rule 37 (expression -> expression EQL term .)
    ]               reduce using rule 37 (expression -> expression EQL term .)
    )               reduce using rule 37 (expression -> expression EQL term .)
    ID              reduce using rule 37 (expression -> expression EQL term .)
    PRINT           reduce using rule 37 (expression -> expression EQL term .)
    CONTINUE        reduce using rule 37 (expression -> expression EQL term .)
    BREAK           reduce using rule 37 (expression -> expression EQL term .)
    RETURN          reduce using rule 37 (expression -> expression EQL term .)
    IF              reduce using rule 37 (expression -> expression EQL term .)
    FOR             reduce using rule 37 (expression -> expression EQL term .)
    WHILE           reduce using rule 37 (expression -> expression EQL term .)
    {               reduce using rule 37 (expression -> expression EQL term .)


state 111

    (38) expression -> expression NEQ term .

    +               reduce using rule 38 (expression -> expression NEQ term .)
    -               reduce using rule 38 (expression -> expression NEQ term .)
    /               reduce using rule 38 (expression -> expression NEQ term .)
    *               reduce using rule 38 (expression -> expression NEQ term .)
    EQL             reduce using rule 38 (expression -> expression NEQ term .)
    NEQ             reduce using rule 38 (expression -> expression NEQ term .)
    GT              reduce using rule 38 (expression -> expression NEQ term .)
    GTE             reduce using rule 38 (expression -> expression NEQ term .)
    LT              reduce using rule 38 (expression -> expression NEQ term .)
    LTE             reduce using rule 38 (expression -> expression NEQ term .)
    TRANSPOSE       reduce using rule 38 (expression -> expression NEQ term .)
    ,               reduce using rule 38 (expression -> expression NEQ term .)
    ;               reduce using rule 38 (expression -> expression NEQ term .)
    :               reduce using rule 38 (expression -> expression NEQ term .)
    ]               reduce using rule 38 (expression -> expression NEQ term .)
    )               reduce using rule 38 (expression -> expression NEQ term .)
    ID              reduce using rule 38 (expression -> expression NEQ term .)
    PRINT           reduce using rule 38 (expression -> expression NEQ term .)
    CONTINUE        reduce using rule 38 (expression -> expression NEQ term .)
    BREAK           reduce using rule 38 (expression -> expression NEQ term .)
    RETURN          reduce using rule 38 (expression -> expression NEQ term .)
    IF              reduce using rule 38 (expression -> expression NEQ term .)
    FOR             reduce using rule 38 (expression -> expression NEQ term .)
    WHILE           reduce using rule 38 (expression -> expression NEQ term .)
    {               reduce using rule 38 (expression -> expression NEQ term .)


state 112

    (39) expression -> expression GT term .

    +               reduce using rule 39 (expression -> expression GT term .)
    -               reduce using rule 39 (expression -> expression GT term .)
    /               reduce using rule 39 (expression -> expression GT term .)
    *               reduce using rule 39 (expression -> expression GT term .)
    EQL             reduce using rule 39 (expression -> expression GT term .)
    NEQ             reduce using rule 39 (expression -> expression GT term .)
    GT              reduce using rule 39 (expression -> expression GT term .)
    GTE             reduce using rule 39 (expression -> expression GT term .)
    LT              reduce using rule 39 (expression -> expression GT term .)
    LTE             reduce using rule 39 (expression -> expression GT term .)
    TRANSPOSE       reduce using rule 39 (expression -> expression GT term .)
    ,               reduce using rule 39 (expression -> expression GT term .)
    ;               reduce using rule 39 (expression -> expression GT term .)
    :               reduce using rule 39 (expression -> expression GT term .)
    ]               reduce using rule 39 (expression -> expression GT term .)
    )               reduce using rule 39 (expression -> expression GT term .)
    ID              reduce using rule 39 (expression -> expression GT term .)
    PRINT           reduce using rule 39 (expression -> expression GT term .)
    CONTINUE        reduce using rule 39 (expression -> expression GT term .)
    BREAK           reduce using rule 39 (expression -> expression GT term .)
    RETURN          reduce using rule 39 (expression -> expression GT term .)
    IF              reduce using rule 39 (expression -> expression GT term .)
    FOR             reduce using rule 39 (expression -> expression GT term .)
    WHILE           reduce using rule 39 (expression -> expression GT term .)
    {               reduce using rule 39 (expression -> expression GT term .)


state 113

    (40) expression -> expression GTE term .

    +               reduce using rule 40 (expression -> expression GTE term .)
    -               reduce using rule 40 (expression -> expression GTE term .)
    /               reduce using rule 40 (expression -> expression GTE term .)
    *               reduce using rule 40 (expression -> expression GTE term .)
    EQL             reduce using rule 40 (expression -> expression GTE term .)
    NEQ             reduce using rule 40 (expression -> expression GTE term .)
    GT              reduce using rule 40 (expression -> expression GTE term .)
    GTE             reduce using rule 40 (expression -> expression GTE term .)
    LT              reduce using rule 40 (expression -> expression GTE term .)
    LTE             reduce using rule 40 (expression -> expression GTE term .)
    TRANSPOSE       reduce using rule 40 (expression -> expression GTE term .)
    ,               reduce using rule 40 (expression -> expression GTE term .)
    ;               reduce using rule 40 (expression -> expression GTE term .)
    :               reduce using rule 40 (expression -> expression GTE term .)
    ]               reduce using rule 40 (expression -> expression GTE term .)
    )               reduce using rule 40 (expression -> expression GTE term .)
    ID              reduce using rule 40 (expression -> expression GTE term .)
    PRINT           reduce using rule 40 (expression -> expression GTE term .)
    CONTINUE        reduce using rule 40 (expression -> expression GTE term .)
    BREAK           reduce using rule 40 (expression -> expression GTE term .)
    RETURN          reduce using rule 40 (expression -> expression GTE term .)
    IF              reduce using rule 40 (expression -> expression GTE term .)
    FOR             reduce using rule 40 (expression -> expression GTE term .)
    WHILE           reduce using rule 40 (expression -> expression GTE term .)
    {               reduce using rule 40 (expression -> expression GTE term .)


state 114

    (41) expression -> expression LT term .

    +               reduce using rule 41 (expression -> expression LT term .)
    -               reduce using rule 41 (expression -> expression LT term .)
    /               reduce using rule 41 (expression -> expression LT term .)
    *               reduce using rule 41 (expression -> expression LT term .)
    EQL             reduce using rule 41 (expression -> expression LT term .)
    NEQ             reduce using rule 41 (expression -> expression LT term .)
    GT              reduce using rule 41 (expression -> expression LT term .)
    GTE             reduce using rule 41 (expression -> expression LT term .)
    LT              reduce using rule 41 (expression -> expression LT term .)
    LTE             reduce using rule 41 (expression -> expression LT term .)
    TRANSPOSE       reduce using rule 41 (expression -> expression LT term .)
    ,               reduce using rule 41 (expression -> expression LT term .)
    ;               reduce using rule 41 (expression -> expression LT term .)
    :               reduce using rule 41 (expression -> expression LT term .)
    ]               reduce using rule 41 (expression -> expression LT term .)
    )               reduce using rule 41 (expression -> expression LT term .)
    ID              reduce using rule 41 (expression -> expression LT term .)
    PRINT           reduce using rule 41 (expression -> expression LT term .)
    CONTINUE        reduce using rule 41 (expression -> expression LT term .)
    BREAK           reduce using rule 41 (expression -> expression LT term .)
    RETURN          reduce using rule 41 (expression -> expression LT term .)
    IF              reduce using rule 41 (expression -> expression LT term .)
    FOR             reduce using rule 41 (expression -> expression LT term .)
    WHILE           reduce using rule 41 (expression -> expression LT term .)
    {               reduce using rule 41 (expression -> expression LT term .)


state 115

    (42) expression -> expression LTE term .

    +               reduce using rule 42 (expression -> expression LTE term .)
    -               reduce using rule 42 (expression -> expression LTE term .)
    /               reduce using rule 42 (expression -> expression LTE term .)
    *               reduce using rule 42 (expression -> expression LTE term .)
    EQL             reduce using rule 42 (expression -> expression LTE term .)
    NEQ             reduce using rule 42 (expression -> expression LTE term .)
    GT              reduce using rule 42 (expression -> expression LTE term .)
    GTE             reduce using rule 42 (expression -> expression LTE term .)
    LT              reduce using rule 42 (expression -> expression LTE term .)
    LTE             reduce using rule 42 (expression -> expression LTE term .)
    TRANSPOSE       reduce using rule 42 (expression -> expression LTE term .)
    ,               reduce using rule 42 (expression -> expression LTE term .)
    ;               reduce using rule 42 (expression -> expression LTE term .)
    :               reduce using rule 42 (expression -> expression LTE term .)
    ]               reduce using rule 42 (expression -> expression LTE term .)
    )               reduce using rule 42 (expression -> expression LTE term .)
    ID              reduce using rule 42 (expression -> expression LTE term .)
    PRINT           reduce using rule 42 (expression -> expression LTE term .)
    CONTINUE        reduce using rule 42 (expression -> expression LTE term .)
    BREAK           reduce using rule 42 (expression -> expression LTE term .)
    RETURN          reduce using rule 42 (expression -> expression LTE term .)
    IF              reduce using rule 42 (expression -> expression LTE term .)
    FOR             reduce using rule 42 (expression -> expression LTE term .)
    WHILE           reduce using rule 42 (expression -> expression LTE term .)
    {               reduce using rule 42 (expression -> expression LTE term .)


state 116

    (29) expression -> built_in_function ( expression_list . )
    (30) expression_list -> expression_list . , expression

    )               shift and go to state 128
    ,               shift and go to state 129


state 117

    (31) expression_list -> expression .
    (33) expression -> expression . + term
    (34) expression -> expression . - term
    (35) expression -> expression . / term
    (36) expression -> expression . * term
    (37) expression -> expression . EQL term
    (38) expression -> expression . NEQ term
    (39) expression -> expression . GT term
    (40) expression -> expression . GTE term
    (41) expression -> expression . LT term
    (42) expression -> expression . LTE term
    (44) expression -> expression . TRANSPOSE

    )               reduce using rule 31 (expression_list -> expression .)
    ,               reduce using rule 31 (expression_list -> expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    EQL             shift and go to state 72
    NEQ             shift and go to state 73
    GT              shift and go to state 74
    GTE             shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77
    TRANSPOSE       shift and go to state 78


state 118

    (71) term -> ( expression ) .

    +               reduce using rule 71 (term -> ( expression ) .)
    -               reduce using rule 71 (term -> ( expression ) .)
    /               reduce using rule 71 (term -> ( expression ) .)
    *               reduce using rule 71 (term -> ( expression ) .)
    EQL             reduce using rule 71 (term -> ( expression ) .)
    NEQ             reduce using rule 71 (term -> ( expression ) .)
    GT              reduce using rule 71 (term -> ( expression ) .)
    GTE             reduce using rule 71 (term -> ( expression ) .)
    LT              reduce using rule 71 (term -> ( expression ) .)
    LTE             reduce using rule 71 (term -> ( expression ) .)
    TRANSPOSE       reduce using rule 71 (term -> ( expression ) .)
    ,               reduce using rule 71 (term -> ( expression ) .)
    ;               reduce using rule 71 (term -> ( expression ) .)
    :               reduce using rule 71 (term -> ( expression ) .)
    ]               reduce using rule 71 (term -> ( expression ) .)
    )               reduce using rule 71 (term -> ( expression ) .)
    ID              reduce using rule 71 (term -> ( expression ) .)
    PRINT           reduce using rule 71 (term -> ( expression ) .)
    CONTINUE        reduce using rule 71 (term -> ( expression ) .)
    BREAK           reduce using rule 71 (term -> ( expression ) .)
    RETURN          reduce using rule 71 (term -> ( expression ) .)
    IF              reduce using rule 71 (term -> ( expression ) .)
    FOR             reduce using rule 71 (term -> ( expression ) .)
    WHILE           reduce using rule 71 (term -> ( expression ) .)
    {               reduce using rule 71 (term -> ( expression ) .)


state 119

    (45) expression -> ID dot_operation term .

    +               reduce using rule 45 (expression -> ID dot_operation term .)
    -               reduce using rule 45 (expression -> ID dot_operation term .)
    /               reduce using rule 45 (expression -> ID dot_operation term .)
    *               reduce using rule 45 (expression -> ID dot_operation term .)
    EQL             reduce using rule 45 (expression -> ID dot_operation term .)
    NEQ             reduce using rule 45 (expression -> ID dot_operation term .)
    GT              reduce using rule 45 (expression -> ID dot_operation term .)
    GTE             reduce using rule 45 (expression -> ID dot_operation term .)
    LT              reduce using rule 45 (expression -> ID dot_operation term .)
    LTE             reduce using rule 45 (expression -> ID dot_operation term .)
    TRANSPOSE       reduce using rule 45 (expression -> ID dot_operation term .)
    ,               reduce using rule 45 (expression -> ID dot_operation term .)
    ;               reduce using rule 45 (expression -> ID dot_operation term .)
    :               reduce using rule 45 (expression -> ID dot_operation term .)
    ]               reduce using rule 45 (expression -> ID dot_operation term .)
    )               reduce using rule 45 (expression -> ID dot_operation term .)
    ID              reduce using rule 45 (expression -> ID dot_operation term .)
    PRINT           reduce using rule 45 (expression -> ID dot_operation term .)
    CONTINUE        reduce using rule 45 (expression -> ID dot_operation term .)
    BREAK           reduce using rule 45 (expression -> ID dot_operation term .)
    RETURN          reduce using rule 45 (expression -> ID dot_operation term .)
    IF              reduce using rule 45 (expression -> ID dot_operation term .)
    FOR             reduce using rule 45 (expression -> ID dot_operation term .)
    WHILE           reduce using rule 45 (expression -> ID dot_operation term .)
    {               reduce using rule 45 (expression -> ID dot_operation term .)


state 120

    (46) expression -> vector dot_operation term .

    +               reduce using rule 46 (expression -> vector dot_operation term .)
    -               reduce using rule 46 (expression -> vector dot_operation term .)
    /               reduce using rule 46 (expression -> vector dot_operation term .)
    *               reduce using rule 46 (expression -> vector dot_operation term .)
    EQL             reduce using rule 46 (expression -> vector dot_operation term .)
    NEQ             reduce using rule 46 (expression -> vector dot_operation term .)
    GT              reduce using rule 46 (expression -> vector dot_operation term .)
    GTE             reduce using rule 46 (expression -> vector dot_operation term .)
    LT              reduce using rule 46 (expression -> vector dot_operation term .)
    LTE             reduce using rule 46 (expression -> vector dot_operation term .)
    TRANSPOSE       reduce using rule 46 (expression -> vector dot_operation term .)
    ,               reduce using rule 46 (expression -> vector dot_operation term .)
    ;               reduce using rule 46 (expression -> vector dot_operation term .)
    :               reduce using rule 46 (expression -> vector dot_operation term .)
    ]               reduce using rule 46 (expression -> vector dot_operation term .)
    )               reduce using rule 46 (expression -> vector dot_operation term .)
    ID              reduce using rule 46 (expression -> vector dot_operation term .)
    PRINT           reduce using rule 46 (expression -> vector dot_operation term .)
    CONTINUE        reduce using rule 46 (expression -> vector dot_operation term .)
    BREAK           reduce using rule 46 (expression -> vector dot_operation term .)
    RETURN          reduce using rule 46 (expression -> vector dot_operation term .)
    IF              reduce using rule 46 (expression -> vector dot_operation term .)
    FOR             reduce using rule 46 (expression -> vector dot_operation term .)
    WHILE           reduce using rule 46 (expression -> vector dot_operation term .)
    {               reduce using rule 46 (expression -> vector dot_operation term .)


state 121

    (51) vector -> [ vector_contents ] .

    DOTADD          reduce using rule 51 (vector -> [ vector_contents ] .)
    DOTSUB          reduce using rule 51 (vector -> [ vector_contents ] .)
    DOTMUL          reduce using rule 51 (vector -> [ vector_contents ] .)
    DOTDIV          reduce using rule 51 (vector -> [ vector_contents ] .)
    +               reduce using rule 51 (vector -> [ vector_contents ] .)
    -               reduce using rule 51 (vector -> [ vector_contents ] .)
    /               reduce using rule 51 (vector -> [ vector_contents ] .)
    *               reduce using rule 51 (vector -> [ vector_contents ] .)
    EQL             reduce using rule 51 (vector -> [ vector_contents ] .)
    NEQ             reduce using rule 51 (vector -> [ vector_contents ] .)
    GT              reduce using rule 51 (vector -> [ vector_contents ] .)
    GTE             reduce using rule 51 (vector -> [ vector_contents ] .)
    LT              reduce using rule 51 (vector -> [ vector_contents ] .)
    LTE             reduce using rule 51 (vector -> [ vector_contents ] .)
    TRANSPOSE       reduce using rule 51 (vector -> [ vector_contents ] .)
    ,               reduce using rule 51 (vector -> [ vector_contents ] .)
    ;               reduce using rule 51 (vector -> [ vector_contents ] .)
    :               reduce using rule 51 (vector -> [ vector_contents ] .)
    ]               reduce using rule 51 (vector -> [ vector_contents ] .)
    )               reduce using rule 51 (vector -> [ vector_contents ] .)
    ID              reduce using rule 51 (vector -> [ vector_contents ] .)
    PRINT           reduce using rule 51 (vector -> [ vector_contents ] .)
    CONTINUE        reduce using rule 51 (vector -> [ vector_contents ] .)
    BREAK           reduce using rule 51 (vector -> [ vector_contents ] .)
    RETURN          reduce using rule 51 (vector -> [ vector_contents ] .)
    IF              reduce using rule 51 (vector -> [ vector_contents ] .)
    FOR             reduce using rule 51 (vector -> [ vector_contents ] .)
    WHILE           reduce using rule 51 (vector -> [ vector_contents ] .)
    {               reduce using rule 51 (vector -> [ vector_contents ] .)


state 122

    (53) vector_contents -> vector_contents , . vector_element
    (55) vector_element -> . term
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    ID              shift and go to state 83
    [               shift and go to state 53

    vector_element                 shift and go to state 130
    term                           shift and go to state 93
    vector                         shift and go to state 82

state 123

    (64) if -> IF condition nested ELSE . nested
    (66) nested -> . statement
    (5) statement -> . assignment ;
    (6) statement -> . print ;
    (7) statement -> . continue ;
    (8) statement -> . break ;
    (9) statement -> . return ;
    (10) statement -> . if
    (11) statement -> . for
    (12) statement -> . while
    (13) statement -> . nested_statements
    (22) assignment -> . ID assign_symbol expression
    (23) assignment -> . ID slice assign_symbol expression
    (19) print -> . PRINT coma_separated
    (18) continue -> . CONTINUE
    (16) break -> . BREAK
    (17) return -> . RETURN expression
    (63) if -> . IF condition nested
    (64) if -> . IF condition nested ELSE nested
    (14) for -> . FOR ID ASSIGN expression : expression nested
    (15) while -> . WHILE condition nested
    (67) nested_statements -> . nested_empty
    (68) nested_statements -> . nested_statements_list
    (70) nested_empty -> . { }
    (69) nested_statements_list -> . { statements_list }

    ID              shift and go to state 14
    PRINT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    RETURN          shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    {               shift and go to state 24

    nested                         shift and go to state 131
    statement                      shift and go to state 95
    assignment                     shift and go to state 5
    print                          shift and go to state 6
    continue                       shift and go to state 7
    break                          shift and go to state 8
    return                         shift and go to state 9
    if                             shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12
    nested_statements              shift and go to state 13
    nested_empty                   shift and go to state 22
    nested_statements_list         shift and go to state 23

state 124

    (65) condition -> ( expression ) .

    ID              reduce using rule 65 (condition -> ( expression ) .)
    PRINT           reduce using rule 65 (condition -> ( expression ) .)
    CONTINUE        reduce using rule 65 (condition -> ( expression ) .)
    BREAK           reduce using rule 65 (condition -> ( expression ) .)
    RETURN          reduce using rule 65 (condition -> ( expression ) .)
    IF              reduce using rule 65 (condition -> ( expression ) .)
    FOR             reduce using rule 65 (condition -> ( expression ) .)
    WHILE           reduce using rule 65 (condition -> ( expression ) .)
    {               reduce using rule 65 (condition -> ( expression ) .)


state 125

    (14) for -> FOR ID ASSIGN expression . : expression nested
    (33) expression -> expression . + term
    (34) expression -> expression . - term
    (35) expression -> expression . / term
    (36) expression -> expression . * term
    (37) expression -> expression . EQL term
    (38) expression -> expression . NEQ term
    (39) expression -> expression . GT term
    (40) expression -> expression . GTE term
    (41) expression -> expression . LT term
    (42) expression -> expression . LTE term
    (44) expression -> expression . TRANSPOSE

    :               shift and go to state 132
    +               shift and go to state 68
    -               shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    EQL             shift and go to state 72
    NEQ             shift and go to state 73
    GT              shift and go to state 74
    GTE             shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77
    TRANSPOSE       shift and go to state 78


state 126

    (57) slice_contents -> slice_contents , range .

    ]               reduce using rule 57 (slice_contents -> slice_contents , range .)
    ,               reduce using rule 57 (slice_contents -> slice_contents , range .)


state 127

    (59) range -> expression : expression .
    (33) expression -> expression . + term
    (34) expression -> expression . - term
    (35) expression -> expression . / term
    (36) expression -> expression . * term
    (37) expression -> expression . EQL term
    (38) expression -> expression . NEQ term
    (39) expression -> expression . GT term
    (40) expression -> expression . GTE term
    (41) expression -> expression . LT term
    (42) expression -> expression . LTE term
    (44) expression -> expression . TRANSPOSE

    ]               reduce using rule 59 (range -> expression : expression .)
    ,               reduce using rule 59 (range -> expression : expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    EQL             shift and go to state 72
    NEQ             shift and go to state 73
    GT              shift and go to state 74
    GTE             shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77
    TRANSPOSE       shift and go to state 78


state 128

    (29) expression -> built_in_function ( expression_list ) .

    +               reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    -               reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    /               reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    *               reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    EQL             reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    NEQ             reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    GT              reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    GTE             reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    LT              reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    LTE             reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    TRANSPOSE       reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    ,               reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    ;               reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    :               reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    ]               reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    )               reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    ID              reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    PRINT           reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    CONTINUE        reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    BREAK           reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    RETURN          reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    IF              reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    FOR             reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    WHILE           reduce using rule 29 (expression -> built_in_function ( expression_list ) .)
    {               reduce using rule 29 (expression -> built_in_function ( expression_list ) .)


state 129

    (30) expression_list -> expression_list , . expression
    (29) expression -> . built_in_function ( expression_list )
    (32) expression -> . term
    (33) expression -> . expression + term
    (34) expression -> . expression - term
    (35) expression -> . expression / term
    (36) expression -> . expression * term
    (37) expression -> . expression EQL term
    (38) expression -> . expression NEQ term
    (39) expression -> . expression GT term
    (40) expression -> . expression GTE term
    (41) expression -> . expression LT term
    (42) expression -> . expression LTE term
    (43) expression -> . - term
    (44) expression -> . expression TRANSPOSE
    (45) expression -> . ID dot_operation term
    (46) expression -> . vector dot_operation term
    (77) built_in_function -> . EYE
    (78) built_in_function -> . ONES
    (79) built_in_function -> . ZEROS
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    -               shift and go to state 44
    ID              shift and go to state 45
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49
    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    [               shift and go to state 53

    expression                     shift and go to state 133
    built_in_function              shift and go to state 41
    term                           shift and go to state 43
    vector                         shift and go to state 46

state 130

    (53) vector_contents -> vector_contents , vector_element .

    ]               reduce using rule 53 (vector_contents -> vector_contents , vector_element .)
    ,               reduce using rule 53 (vector_contents -> vector_contents , vector_element .)


state 131

    (64) if -> IF condition nested ELSE nested .

    ID              reduce using rule 64 (if -> IF condition nested ELSE nested .)
    PRINT           reduce using rule 64 (if -> IF condition nested ELSE nested .)
    CONTINUE        reduce using rule 64 (if -> IF condition nested ELSE nested .)
    BREAK           reduce using rule 64 (if -> IF condition nested ELSE nested .)
    RETURN          reduce using rule 64 (if -> IF condition nested ELSE nested .)
    IF              reduce using rule 64 (if -> IF condition nested ELSE nested .)
    FOR             reduce using rule 64 (if -> IF condition nested ELSE nested .)
    WHILE           reduce using rule 64 (if -> IF condition nested ELSE nested .)
    {               reduce using rule 64 (if -> IF condition nested ELSE nested .)
    $end            reduce using rule 64 (if -> IF condition nested ELSE nested .)
    }               reduce using rule 64 (if -> IF condition nested ELSE nested .)
    ELSE            reduce using rule 64 (if -> IF condition nested ELSE nested .)


state 132

    (14) for -> FOR ID ASSIGN expression : . expression nested
    (29) expression -> . built_in_function ( expression_list )
    (32) expression -> . term
    (33) expression -> . expression + term
    (34) expression -> . expression - term
    (35) expression -> . expression / term
    (36) expression -> . expression * term
    (37) expression -> . expression EQL term
    (38) expression -> . expression NEQ term
    (39) expression -> . expression GT term
    (40) expression -> . expression GTE term
    (41) expression -> . expression LT term
    (42) expression -> . expression LTE term
    (43) expression -> . - term
    (44) expression -> . expression TRANSPOSE
    (45) expression -> . ID dot_operation term
    (46) expression -> . vector dot_operation term
    (77) built_in_function -> . EYE
    (78) built_in_function -> . ONES
    (79) built_in_function -> . ZEROS
    (71) term -> . ( expression )
    (72) term -> . vector
    (73) term -> . INTNUM
    (74) term -> . FLOATNUM
    (75) term -> . STR
    (76) term -> . ID
    (51) vector -> . [ vector_contents ]
    (52) vector -> . [ ]

    -               shift and go to state 44
    ID              shift and go to state 45
    EYE             shift and go to state 47
    ONES            shift and go to state 48
    ZEROS           shift and go to state 49
    (               shift and go to state 42
    INTNUM          shift and go to state 50
    FLOATNUM        shift and go to state 51
    STR             shift and go to state 52
    [               shift and go to state 53

    expression                     shift and go to state 134
    built_in_function              shift and go to state 41
    term                           shift and go to state 43
    vector                         shift and go to state 46

state 133

    (30) expression_list -> expression_list , expression .
    (33) expression -> expression . + term
    (34) expression -> expression . - term
    (35) expression -> expression . / term
    (36) expression -> expression . * term
    (37) expression -> expression . EQL term
    (38) expression -> expression . NEQ term
    (39) expression -> expression . GT term
    (40) expression -> expression . GTE term
    (41) expression -> expression . LT term
    (42) expression -> expression . LTE term
    (44) expression -> expression . TRANSPOSE

    )               reduce using rule 30 (expression_list -> expression_list , expression .)
    ,               reduce using rule 30 (expression_list -> expression_list , expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    EQL             shift and go to state 72
    NEQ             shift and go to state 73
    GT              shift and go to state 74
    GTE             shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77
    TRANSPOSE       shift and go to state 78


state 134

    (14) for -> FOR ID ASSIGN expression : expression . nested
    (33) expression -> expression . + term
    (34) expression -> expression . - term
    (35) expression -> expression . / term
    (36) expression -> expression . * term
    (37) expression -> expression . EQL term
    (38) expression -> expression . NEQ term
    (39) expression -> expression . GT term
    (40) expression -> expression . GTE term
    (41) expression -> expression . LT term
    (42) expression -> expression . LTE term
    (44) expression -> expression . TRANSPOSE
    (66) nested -> . statement
    (5) statement -> . assignment ;
    (6) statement -> . print ;
    (7) statement -> . continue ;
    (8) statement -> . break ;
    (9) statement -> . return ;
    (10) statement -> . if
    (11) statement -> . for
    (12) statement -> . while
    (13) statement -> . nested_statements
    (22) assignment -> . ID assign_symbol expression
    (23) assignment -> . ID slice assign_symbol expression
    (19) print -> . PRINT coma_separated
    (18) continue -> . CONTINUE
    (16) break -> . BREAK
    (17) return -> . RETURN expression
    (63) if -> . IF condition nested
    (64) if -> . IF condition nested ELSE nested
    (14) for -> . FOR ID ASSIGN expression : expression nested
    (15) while -> . WHILE condition nested
    (67) nested_statements -> . nested_empty
    (68) nested_statements -> . nested_statements_list
    (70) nested_empty -> . { }
    (69) nested_statements_list -> . { statements_list }

    +               shift and go to state 68
    -               shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    EQL             shift and go to state 72
    NEQ             shift and go to state 73
    GT              shift and go to state 74
    GTE             shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77
    TRANSPOSE       shift and go to state 78
    ID              shift and go to state 14
    PRINT           shift and go to state 15
    CONTINUE        shift and go to state 16
    BREAK           shift and go to state 17
    RETURN          shift and go to state 18
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    {               shift and go to state 24

    nested                         shift and go to state 135
    statement                      shift and go to state 95
    assignment                     shift and go to state 5
    print                          shift and go to state 6
    continue                       shift and go to state 7
    break                          shift and go to state 8
    return                         shift and go to state 9
    if                             shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12
    nested_statements              shift and go to state 13
    nested_empty                   shift and go to state 22
    nested_statements_list         shift and go to state 23

state 135

    (14) for -> FOR ID ASSIGN expression : expression nested .

    ID              reduce using rule 14 (for -> FOR ID ASSIGN expression : expression nested .)
    PRINT           reduce using rule 14 (for -> FOR ID ASSIGN expression : expression nested .)
    CONTINUE        reduce using rule 14 (for -> FOR ID ASSIGN expression : expression nested .)
    BREAK           reduce using rule 14 (for -> FOR ID ASSIGN expression : expression nested .)
    RETURN          reduce using rule 14 (for -> FOR ID ASSIGN expression : expression nested .)
    IF              reduce using rule 14 (for -> FOR ID ASSIGN expression : expression nested .)
    FOR             reduce using rule 14 (for -> FOR ID ASSIGN expression : expression nested .)
    WHILE           reduce using rule 14 (for -> FOR ID ASSIGN expression : expression nested .)
    {               reduce using rule 14 (for -> FOR ID ASSIGN expression : expression nested .)
    $end            reduce using rule 14 (for -> FOR ID ASSIGN expression : expression nested .)
    }               reduce using rule 14 (for -> FOR ID ASSIGN expression : expression nested .)
    ELSE            reduce using rule 14 (for -> FOR ID ASSIGN expression : expression nested .)

