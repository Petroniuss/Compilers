
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "startleft+-left/*leftTRANSPOSErightUMINUSnonassocIFxnonassoc1nonassocELSEnonassoc3ADDASSIGN ASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQL EYE FLOATNUM FOR GT GTE ID IF INTNUM LT LTE MULTASSIGN NEQ ONES PRINT RETURN STR SUBASSIGN TRANSPOSE WHILE ZEROS\n        start : statements\n    \n        statements : statement\n                   | statements statement\n    \n        statement : assignment ';'\n                  | print ';'\n                  | continue ';'\n                  | break ';'\n                  | return ';'\n                  | if_statement\n                  | for\n                  | while\n    \n        for : FOR ID ASSIGN expression ':' expression nested\n    \n        while : WHILE condition nested\n    \n        break : BREAK\n    \n        return : RETURN expression \n    \n        continue : CONTINUE\n    \n        print : PRINT coma_separated\n    \n        coma_separated : expression \n                       | coma_separated ',' expression\n    \n        assignment : ID assign_symbol expression\n    \n        assignment : ID slice assign_symbol expression\n    \n        assign_symbol : ASSIGN\n                      | SUBASSIGN\n                      | ADDASSIGN\n                      | DIVASSIGN\n                      | MULTASSIGN\n    \n        expression : built_in_function '(' term ')'\n    \n        expression : term\n    \n        expression : expression '+' term\n                   | expression '-' term\n                   | expression '/' term\n                   | expression '*' term\n                   | expression EQL term\n                   | expression NEQ term\n                   | expression GT term\n                   | expression GTE term\n                   | expression LT term\n                   | expression LTE term\n    \n        expression : '-' term %prec UMINUS\n    \n        vector : ID TRANSPOSE\n               | vector TRANSPOSE\n    \n        expression : ID dot_operation term\n                   | vector dot_operation term\n    \n         dot_operation : DOTADD       \n                       | DOTSUB       \n                       | DOTMUL\n                       | DOTDIV\n    \n        vector : '[' vector_contents ']'\n    \n        vector_contents : vector_element\n                        | vector_contents ',' vector_element \n    \n        vector_element : term\n    \n        slice : '[' slice_contents ']'\n    \n        slice_contents : range\n                       | slice_contents ',' range\n    \n        range : term ':' term\n              | term ':'\n              | ':' term\n              | term\n    \n        if_statement : if optional_else_ifs optional_else\n    \n        if : IF condition nested %prec IFx\n    \n        optional_else_ifs : else_ifs %prec 3\n                          | %prec 1\n    \n        else_ifs : else_if \n                 | else_ifs else_if\n    \n        else_if : ELSE IF condition nested \n    \n        optional_else : else \n                      | %prec 1\n    \n        else : ELSE nested \n    \n        condition : '(' expression ')'\n    \n        nested : '{' statements '}'\n               | statement\n    \n        term : '(' expression ')'\n             | vector \n             | INTNUM\n             | STR\n             | FLOATNUM\n             | ID\n    \n        built_in_function : EYE \n                          | ONES\n                          | ZEROS\n    "
    
_lr_action_items = {'ID':([0,2,3,9,10,11,13,16,17,18,21,22,23,24,25,26,27,29,30,31,32,33,34,38,39,40,41,42,46,47,48,49,51,52,53,56,57,58,60,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,82,83,84,85,86,87,88,92,93,94,95,97,98,99,100,102,105,106,109,110,111,112,113,114,115,116,117,118,120,121,122,123,124,125,126,128,129,132,134,135,136,137,138,],[12,12,-2,-9,-10,-11,41,41,-62,55,-3,-4,-5,-6,-7,-8,41,-22,-23,-24,-25,-26,66,41,-28,66,-77,-73,-74,-75,-76,66,-67,-61,-63,12,41,12,41,66,-73,-77,41,66,66,66,66,66,66,66,66,66,66,66,-39,66,-40,-44,-45,-46,-47,66,-41,-59,-66,12,-64,41,-13,12,-71,-60,66,66,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-72,-42,-43,-48,66,-68,12,12,-69,-27,-65,41,-70,12,-12,]),'PRINT':([0,2,3,9,10,11,17,21,22,23,24,25,26,39,41,42,46,47,48,51,52,53,56,58,65,66,80,82,88,92,93,94,95,98,99,100,102,109,110,111,112,113,114,115,116,117,118,120,121,122,123,125,126,128,129,132,134,136,137,138,],[13,13,-2,-9,-10,-11,-62,-3,-4,-5,-6,-7,-8,-28,-77,-73,-74,-75,-76,-67,-61,-63,13,13,-73,-77,-39,-40,-41,-59,-66,13,-64,-13,13,-71,-60,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-72,-42,-43,-48,-68,13,13,-69,-27,-65,-70,13,-12,]),'CONTINUE':([0,2,3,9,10,11,17,21,22,23,24,25,26,39,41,42,46,47,48,51,52,53,56,58,65,66,80,82,88,92,93,94,95,98,99,100,102,109,110,111,112,113,114,115,116,117,118,120,121,122,123,125,126,128,129,132,134,136,137,138,],[14,14,-2,-9,-10,-11,-62,-3,-4,-5,-6,-7,-8,-28,-77,-73,-74,-75,-76,-67,-61,-63,14,14,-73,-77,-39,-40,-41,-59,-66,14,-64,-13,14,-71,-60,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-72,-42,-43,-48,-68,14,14,-69,-27,-65,-70,14,-12,]),'BREAK':([0,2,3,9,10,11,17,21,22,23,24,25,26,39,41,42,46,47,48,51,52,53,56,58,65,66,80,82,88,92,93,94,95,98,99,100,102,109,110,111,112,113,114,115,116,117,118,120,121,122,123,125,126,128,129,132,134,136,137,138,],[15,15,-2,-9,-10,-11,-62,-3,-4,-5,-6,-7,-8,-28,-77,-73,-74,-75,-76,-67,-61,-63,15,15,-73,-77,-39,-40,-41,-59,-66,15,-64,-13,15,-71,-60,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-72,-42,-43,-48,-68,15,15,-69,-27,-65,-70,15,-12,]),'RETURN':([0,2,3,9,10,11,17,21,22,23,24,25,26,39,41,42,46,47,48,51,52,53,56,58,65,66,80,82,88,92,93,94,95,98,99,100,102,109,110,111,112,113,114,115,116,117,118,120,121,122,123,125,126,128,129,132,134,136,137,138,],[16,16,-2,-9,-10,-11,-62,-3,-4,-5,-6,-7,-8,-28,-77,-73,-74,-75,-76,-67,-61,-63,16,16,-73,-77,-39,-40,-41,-59,-66,16,-64,-13,16,-71,-60,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-72,-42,-43,-48,-68,16,16,-69,-27,-65,-70,16,-12,]),'FOR':([0,2,3,9,10,11,17,21,22,23,24,25,26,39,41,42,46,47,48,51,52,53,56,58,65,66,80,82,88,92,93,94,95,98,99,100,102,109,110,111,112,113,114,115,116,117,118,120,121,122,123,125,126,128,129,132,134,136,137,138,],[18,18,-2,-9,-10,-11,-62,-3,-4,-5,-6,-7,-8,-28,-77,-73,-74,-75,-76,-67,-61,-63,18,18,-73,-77,-39,-40,-41,-59,-66,18,-64,-13,18,-71,-60,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-72,-42,-43,-48,-68,18,18,-69,-27,-65,-70,18,-12,]),'WHILE':([0,2,3,9,10,11,17,21,22,23,24,25,26,39,41,42,46,47,48,51,52,53,56,58,65,66,80,82,88,92,93,94,95,98,99,100,102,109,110,111,112,113,114,115,116,117,118,120,121,122,123,125,126,128,129,132,134,136,137,138,],[19,19,-2,-9,-10,-11,-62,-3,-4,-5,-6,-7,-8,-28,-77,-73,-74,-75,-76,-67,-61,-63,19,19,-73,-77,-39,-40,-41,-59,-66,19,-64,-13,19,-71,-60,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-72,-42,-43,-48,-68,19,19,-69,-27,-65,-70,19,-12,]),'IF':([0,2,3,9,10,11,17,21,22,23,24,25,26,39,41,42,46,47,48,51,52,53,54,56,58,65,66,80,82,88,92,93,94,95,98,99,100,102,109,110,111,112,113,114,115,116,117,118,120,121,122,123,125,126,128,129,132,134,136,137,138,],[20,20,-2,-9,-10,-11,-62,-3,-4,-5,-6,-7,-8,-28,-77,-73,-74,-75,-76,-67,-61,-63,96,20,20,-73,-77,-39,-40,-41,-59,-66,20,-64,-13,20,-71,-60,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-72,-42,-43,-48,-68,20,20,-69,-27,-65,-70,20,-12,]),'$end':([1,2,3,9,10,11,17,21,22,23,24,25,26,51,52,53,92,93,95,98,100,102,125,134,136,138,],[0,-1,-2,-9,-10,-11,-62,-3,-4,-5,-6,-7,-8,-67,-61,-63,-59,-66,-64,-13,-71,-60,-68,-65,-70,-12,]),'}':([3,9,10,11,17,21,22,23,24,25,26,51,52,53,92,93,95,98,100,102,125,128,134,136,138,],[-2,-9,-10,-11,-62,-3,-4,-5,-6,-7,-8,-67,-61,-63,-59,-66,-64,-13,-71,-60,-68,136,-65,-70,-12,]),';':([4,5,6,7,8,14,15,35,36,39,41,42,46,47,48,50,59,65,66,80,82,88,103,108,109,110,111,112,113,114,115,116,117,118,120,121,122,123,132,],[22,23,24,25,26,-16,-14,-17,-18,-28,-77,-73,-74,-75,-76,-15,-20,-73,-77,-39,-40,-41,-21,-19,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-72,-42,-43,-48,-27,]),'ELSE':([9,10,11,17,22,23,24,25,26,51,52,53,92,93,95,98,100,102,125,134,136,138,],[-9,-10,-11,54,-4,-5,-6,-7,-8,94,-61,-63,-59,-66,-64,-13,-71,-60,-68,-65,-70,-12,]),'ASSIGN':([12,28,55,104,],[29,29,97,-52,]),'SUBASSIGN':([12,28,104,],[30,30,-52,]),'ADDASSIGN':([12,28,104,],[31,31,-52,]),'DIVASSIGN':([12,28,104,],[32,32,-52,]),'MULTASSIGN':([12,28,104,],[33,33,-52,]),'[':([12,13,16,27,29,30,31,32,33,34,38,40,49,57,60,64,67,68,69,70,71,72,73,74,75,76,77,78,81,83,84,85,86,87,97,105,106,124,135,],[34,49,49,49,-22,-23,-24,-25,-26,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-44,-45,-46,-47,49,49,49,49,49,49,]),'-':([13,16,27,29,30,31,32,33,36,38,39,41,42,46,47,48,50,57,59,60,65,66,67,79,80,82,88,97,101,103,108,109,110,111,112,113,114,115,116,117,118,120,121,122,123,127,132,135,137,],[40,40,40,-22,-23,-24,-25,-26,69,40,-28,-77,-73,-74,-75,-76,69,40,69,40,-73,-77,40,69,-39,-40,-41,40,69,69,69,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-72,-42,-43,-48,69,-27,40,69,]),'EYE':([13,16,27,29,30,31,32,33,38,57,60,67,97,135,],[43,43,43,-22,-23,-24,-25,-26,43,43,43,43,43,43,]),'ONES':([13,16,27,29,30,31,32,33,38,57,60,67,97,135,],[44,44,44,-22,-23,-24,-25,-26,44,44,44,44,44,44,]),'ZEROS':([13,16,27,29,30,31,32,33,38,57,60,67,97,135,],[45,45,45,-22,-23,-24,-25,-26,45,45,45,45,45,45,]),'(':([13,16,19,20,27,29,30,31,32,33,34,37,38,40,43,44,45,49,57,60,64,67,68,69,70,71,72,73,74,75,76,77,78,81,83,84,85,86,87,96,97,105,106,124,135,],[38,38,57,57,38,-22,-23,-24,-25,-26,38,78,38,38,-78,-79,-80,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-44,-45,-46,-47,38,57,38,38,38,38,38,]),'INTNUM':([13,16,27,29,30,31,32,33,34,38,40,49,57,60,64,67,68,69,70,71,72,73,74,75,76,77,78,81,83,84,85,86,87,97,105,106,124,135,],[46,46,46,-22,-23,-24,-25,-26,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-44,-45,-46,-47,46,46,46,46,46,46,]),'STR':([13,16,27,29,30,31,32,33,34,38,40,49,57,60,64,67,68,69,70,71,72,73,74,75,76,77,78,81,83,84,85,86,87,97,105,106,124,135,],[47,47,47,-22,-23,-24,-25,-26,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-44,-45,-46,-47,47,47,47,47,47,47,]),'FLOATNUM':([13,16,27,29,30,31,32,33,34,38,40,49,57,60,64,67,68,69,70,71,72,73,74,75,76,77,78,81,83,84,85,86,87,97,105,106,124,135,],[48,48,48,-22,-23,-24,-25,-26,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-44,-45,-46,-47,48,48,48,48,48,48,]),':':([34,39,41,42,46,47,48,63,65,66,80,82,88,105,109,110,111,112,113,114,115,116,117,118,120,121,122,123,127,132,],[64,-28,-77,-73,-74,-75,-76,106,-73,-77,-39,-40,-41,64,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-72,-42,-43,-48,135,-27,]),',':([35,36,39,41,42,46,47,48,61,62,63,65,66,80,82,88,89,90,91,106,107,108,109,110,111,112,113,114,115,116,117,118,120,121,122,123,130,131,132,133,],[67,-18,-28,-77,-73,-74,-75,-76,105,-53,-58,-73,-77,-39,-40,-41,124,-49,-51,-56,-57,-19,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-72,-42,-43,-48,-54,-55,-27,-50,]),'+':([36,39,41,42,46,47,48,50,59,65,66,79,80,82,88,101,103,108,109,110,111,112,113,114,115,116,117,118,120,121,122,123,127,132,137,],[68,-28,-77,-73,-74,-75,-76,68,68,-73,-77,68,-39,-40,-41,68,68,68,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-72,-42,-43,-48,68,-27,68,]),'/':([36,39,41,42,46,47,48,50,59,65,66,79,80,82,88,101,103,108,109,110,111,112,113,114,115,116,117,118,120,121,122,123,127,132,137,],[70,-28,-77,-73,-74,-75,-76,70,70,-73,-77,70,-39,-40,-41,70,70,70,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-72,-42,-43,-48,70,-27,70,]),'*':([36,39,41,42,46,47,48,50,59,65,66,79,80,82,88,101,103,108,109,110,111,112,113,114,115,116,117,118,120,121,122,123,127,132,137,],[71,-28,-77,-73,-74,-75,-76,71,71,-73,-77,71,-39,-40,-41,71,71,71,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-72,-42,-43,-48,71,-27,71,]),'EQL':([36,39,41,42,46,47,48,50,59,65,66,79,80,82,88,101,103,108,109,110,111,112,113,114,115,116,117,118,120,121,122,123,127,132,137,],[72,-28,-77,-73,-74,-75,-76,72,72,-73,-77,72,-39,-40,-41,72,72,72,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-72,-42,-43,-48,72,-27,72,]),'NEQ':([36,39,41,42,46,47,48,50,59,65,66,79,80,82,88,101,103,108,109,110,111,112,113,114,115,116,117,118,120,121,122,123,127,132,137,],[73,-28,-77,-73,-74,-75,-76,73,73,-73,-77,73,-39,-40,-41,73,73,73,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-72,-42,-43,-48,73,-27,73,]),'GT':([36,39,41,42,46,47,48,50,59,65,66,79,80,82,88,101,103,108,109,110,111,112,113,114,115,116,117,118,120,121,122,123,127,132,137,],[74,-28,-77,-73,-74,-75,-76,74,74,-73,-77,74,-39,-40,-41,74,74,74,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-72,-42,-43,-48,74,-27,74,]),'GTE':([36,39,41,42,46,47,48,50,59,65,66,79,80,82,88,101,103,108,109,110,111,112,113,114,115,116,117,118,120,121,122,123,127,132,137,],[75,-28,-77,-73,-74,-75,-76,75,75,-73,-77,75,-39,-40,-41,75,75,75,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-72,-42,-43,-48,75,-27,75,]),'LT':([36,39,41,42,46,47,48,50,59,65,66,79,80,82,88,101,103,108,109,110,111,112,113,114,115,116,117,118,120,121,122,123,127,132,137,],[76,-28,-77,-73,-74,-75,-76,76,76,-73,-77,76,-39,-40,-41,76,76,76,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-72,-42,-43,-48,76,-27,76,]),'LTE':([36,39,41,42,46,47,48,50,59,65,66,79,80,82,88,101,103,108,109,110,111,112,113,114,115,116,117,118,120,121,122,123,127,132,137,],[77,-28,-77,-73,-74,-75,-76,77,77,-73,-77,77,-39,-40,-41,77,77,77,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-72,-42,-43,-48,77,-27,77,]),')':([39,41,42,46,47,48,65,66,79,80,82,88,101,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,132,],[-28,-77,-73,-74,-75,-76,-73,-77,120,-39,-40,-41,129,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,132,-72,-42,-43,-48,-27,]),'{':([39,41,42,46,47,48,56,58,65,66,80,82,88,94,109,110,111,112,113,114,115,116,117,118,120,121,122,123,126,129,132,137,],[-28,-77,-73,-74,-75,-76,99,99,-73,-77,-39,-40,-41,99,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-72,-42,-43,-48,99,-69,-27,99,]),'TRANSPOSE':([41,42,65,66,82,88,123,],[82,88,88,82,-40,-41,-48,]),'DOTADD':([41,42,82,88,123,],[83,83,-40,-41,-48,]),'DOTSUB':([41,42,82,88,123,],[84,84,-40,-41,-48,]),'DOTMUL':([41,42,82,88,123,],[85,85,-40,-41,-48,]),'DOTDIV':([41,42,82,88,123,],[86,86,-40,-41,-48,]),']':([46,47,48,61,62,63,65,66,82,88,89,90,91,106,107,120,123,130,131,133,],[-74,-75,-76,104,-53,-58,-73,-77,-40,-41,123,-49,-51,-56,-57,-72,-48,-54,-55,-50,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'statements':([0,99,],[2,128,]),'statement':([0,2,56,58,94,99,126,128,137,],[3,21,100,100,100,3,100,21,100,]),'assignment':([0,2,56,58,94,99,126,128,137,],[4,4,4,4,4,4,4,4,4,]),'print':([0,2,56,58,94,99,126,128,137,],[5,5,5,5,5,5,5,5,5,]),'continue':([0,2,56,58,94,99,126,128,137,],[6,6,6,6,6,6,6,6,6,]),'break':([0,2,56,58,94,99,126,128,137,],[7,7,7,7,7,7,7,7,7,]),'return':([0,2,56,58,94,99,126,128,137,],[8,8,8,8,8,8,8,8,8,]),'if_statement':([0,2,56,58,94,99,126,128,137,],[9,9,9,9,9,9,9,9,9,]),'for':([0,2,56,58,94,99,126,128,137,],[10,10,10,10,10,10,10,10,10,]),'while':([0,2,56,58,94,99,126,128,137,],[11,11,11,11,11,11,11,11,11,]),'if':([0,2,56,58,94,99,126,128,137,],[17,17,17,17,17,17,17,17,17,]),'assign_symbol':([12,28,],[27,60,]),'slice':([12,],[28,]),'coma_separated':([13,],[35,]),'expression':([13,16,27,38,57,60,67,97,135,],[36,50,59,79,101,103,108,127,137,]),'built_in_function':([13,16,27,38,57,60,67,97,135,],[37,37,37,37,37,37,37,37,37,]),'term':([13,16,27,34,38,40,49,57,60,64,67,68,69,70,71,72,73,74,75,76,77,78,81,87,97,105,106,124,135,],[39,39,39,63,39,80,91,39,39,107,39,109,110,111,112,113,114,115,116,117,118,119,121,122,39,63,131,91,39,]),'vector':([13,16,27,34,38,40,49,57,60,64,67,68,69,70,71,72,73,74,75,76,77,78,81,87,97,105,106,124,135,],[42,42,42,65,42,65,65,42,42,65,42,65,65,65,65,65,65,65,65,65,65,65,65,65,42,65,65,65,42,]),'optional_else_ifs':([17,],[51,]),'else_ifs':([17,],[52,]),'else_if':([17,52,],[53,95,]),'condition':([19,20,96,],[56,58,126,]),'slice_contents':([34,],[61,]),'range':([34,105,],[62,130,]),'dot_operation':([41,42,],[81,87,]),'vector_contents':([49,],[89,]),'vector_element':([49,124,],[90,133,]),'optional_else':([51,],[92,]),'else':([51,],[93,]),'nested':([56,58,94,126,137,],[98,102,125,134,138,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> statements','start',1,'p_start','Parser.py',26),
  ('statements -> statement','statements',1,'p_statements','Parser.py',33),
  ('statements -> statements statement','statements',2,'p_statements','Parser.py',34),
  ('statement -> assignment ;','statement',2,'p_statement','Parser.py',41),
  ('statement -> print ;','statement',2,'p_statement','Parser.py',42),
  ('statement -> continue ;','statement',2,'p_statement','Parser.py',43),
  ('statement -> break ;','statement',2,'p_statement','Parser.py',44),
  ('statement -> return ;','statement',2,'p_statement','Parser.py',45),
  ('statement -> if_statement','statement',1,'p_statement','Parser.py',46),
  ('statement -> for','statement',1,'p_statement','Parser.py',47),
  ('statement -> while','statement',1,'p_statement','Parser.py',48),
  ('for -> FOR ID ASSIGN expression : expression nested','for',7,'p_for','Parser.py',55),
  ('while -> WHILE condition nested','while',3,'p_while','Parser.py',62),
  ('break -> BREAK','break',1,'p_break','Parser.py',69),
  ('return -> RETURN expression','return',2,'p_return','Parser.py',76),
  ('continue -> CONTINUE','continue',1,'p_continue','Parser.py',83),
  ('print -> PRINT coma_separated','print',2,'p_print','Parser.py',90),
  ('coma_separated -> expression','coma_separated',1,'p_coma_separated','Parser.py',97),
  ('coma_separated -> coma_separated , expression','coma_separated',3,'p_coma_separated','Parser.py',98),
  ('assignment -> ID assign_symbol expression','assignment',3,'p_assignment','Parser.py',105),
  ('assignment -> ID slice assign_symbol expression','assignment',4,'p_slice_assignment','Parser.py',112),
  ('assign_symbol -> ASSIGN','assign_symbol',1,'p_assign','Parser.py',119),
  ('assign_symbol -> SUBASSIGN','assign_symbol',1,'p_assign','Parser.py',120),
  ('assign_symbol -> ADDASSIGN','assign_symbol',1,'p_assign','Parser.py',121),
  ('assign_symbol -> DIVASSIGN','assign_symbol',1,'p_assign','Parser.py',122),
  ('assign_symbol -> MULTASSIGN','assign_symbol',1,'p_assign','Parser.py',123),
  ('expression -> built_in_function ( term )','expression',4,'p_expression_built_in_function','Parser.py',130),
  ('expression -> term','expression',1,'p_expression_term','Parser.py',137),
  ('expression -> expression + term','expression',3,'p_expression_binary_ops','Parser.py',144),
  ('expression -> expression - term','expression',3,'p_expression_binary_ops','Parser.py',145),
  ('expression -> expression / term','expression',3,'p_expression_binary_ops','Parser.py',146),
  ('expression -> expression * term','expression',3,'p_expression_binary_ops','Parser.py',147),
  ('expression -> expression EQL term','expression',3,'p_expression_binary_ops','Parser.py',148),
  ('expression -> expression NEQ term','expression',3,'p_expression_binary_ops','Parser.py',149),
  ('expression -> expression GT term','expression',3,'p_expression_binary_ops','Parser.py',150),
  ('expression -> expression GTE term','expression',3,'p_expression_binary_ops','Parser.py',151),
  ('expression -> expression LT term','expression',3,'p_expression_binary_ops','Parser.py',152),
  ('expression -> expression LTE term','expression',3,'p_expression_binary_ops','Parser.py',153),
  ('expression -> - term','expression',2,'p_expression_unary','Parser.py',160),
  ('vector -> ID TRANSPOSE','vector',2,'p_vector_transpose','Parser.py',167),
  ('vector -> vector TRANSPOSE','vector',2,'p_vector_transpose','Parser.py',168),
  ('expression -> ID dot_operation term','expression',3,'p_expression_suffix_binary_ops','Parser.py',175),
  ('expression -> vector dot_operation term','expression',3,'p_expression_suffix_binary_ops','Parser.py',176),
  ('dot_operation -> DOTADD','dot_operation',1,'p_dot_operation','Parser.py',183),
  ('dot_operation -> DOTSUB','dot_operation',1,'p_dot_operation','Parser.py',184),
  ('dot_operation -> DOTMUL','dot_operation',1,'p_dot_operation','Parser.py',185),
  ('dot_operation -> DOTDIV','dot_operation',1,'p_dot_operation','Parser.py',186),
  ('vector -> [ vector_contents ]','vector',3,'p_vector','Parser.py',193),
  ('vector_contents -> vector_element','vector_contents',1,'p_vector_contents','Parser.py',200),
  ('vector_contents -> vector_contents , vector_element','vector_contents',3,'p_vector_contents','Parser.py',201),
  ('vector_element -> term','vector_element',1,'p_vector_element','Parser.py',208),
  ('slice -> [ slice_contents ]','slice',3,'p_slice','Parser.py',215),
  ('slice_contents -> range','slice_contents',1,'p_slice_contents','Parser.py',222),
  ('slice_contents -> slice_contents , range','slice_contents',3,'p_slice_contents','Parser.py',223),
  ('range -> term : term','range',3,'p_range','Parser.py',230),
  ('range -> term :','range',2,'p_range','Parser.py',231),
  ('range -> : term','range',2,'p_range','Parser.py',232),
  ('range -> term','range',1,'p_range','Parser.py',233),
  ('if_statement -> if optional_else_ifs optional_else','if_statement',3,'p_if_statement','Parser.py',262),
  ('if -> IF condition nested','if',3,'p_if','Parser.py',270),
  ('optional_else_ifs -> else_ifs','optional_else_ifs',1,'p_optional_else_ifs','Parser.py',278),
  ('optional_else_ifs -> <empty>','optional_else_ifs',0,'p_optional_else_ifs','Parser.py',279),
  ('else_ifs -> else_if','else_ifs',1,'p_else_ifs','Parser.py',288),
  ('else_ifs -> else_ifs else_if','else_ifs',2,'p_else_ifs','Parser.py',289),
  ('else_if -> ELSE IF condition nested','else_if',4,'p_else_if','Parser.py',296),
  ('optional_else -> else','optional_else',1,'p_optional_else','Parser.py',304),
  ('optional_else -> <empty>','optional_else',0,'p_optional_else','Parser.py',305),
  ('else -> ELSE nested','else',2,'p_else','Parser.py',314),
  ('condition -> ( expression )','condition',3,'p_condition','Parser.py',322),
  ('nested -> { statements }','nested',3,'p_nested','Parser.py',328),
  ('nested -> statement','nested',1,'p_nested','Parser.py',329),
  ('term -> ( expression )','term',3,'p_term','Parser.py',336),
  ('term -> vector','term',1,'p_term','Parser.py',337),
  ('term -> INTNUM','term',1,'p_term','Parser.py',338),
  ('term -> STR','term',1,'p_term','Parser.py',339),
  ('term -> FLOATNUM','term',1,'p_term','Parser.py',340),
  ('term -> ID','term',1,'p_term','Parser.py',341),
  ('built_in_function -> EYE','built_in_function',1,'p_built_in_function','Parser.py',348),
  ('built_in_function -> ONES','built_in_function',1,'p_built_in_function','Parser.py',349),
  ('built_in_function -> ZEROS','built_in_function',1,'p_built_in_function','Parser.py',350),
]
