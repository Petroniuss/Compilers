
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "startnonassocEQLNEQGTGTELTLTEleft+-left/*leftTRANSPOSErightUMINUSnonassocIFxnonassocELSEADDASSIGN ASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQL EYE FLOATNUM FOR GT GTE ID IF INTNUM LT LTE MULTASSIGN NEQ ONES PRINT RETURN STR SUBASSIGN TRANSPOSE WHILE ZEROS\n        start : statements\n    \n        statements : statement\n                   | statements statement\n    \n        statement : assignment ';'\n                  | print ';'\n                  | continue ';'\n                  | break ';'\n                  | return ';'\n                  | if\n                  | for\n                  | while\n    \n        for : FOR ID ASSIGN expression ':' expression nested\n    \n        while : WHILE condition nested\n    \n        break : BREAK\n    \n        return : RETURN expression\n    \n        continue : CONTINUE\n    \n        print : PRINT coma_separated\n    \n        coma_separated : expression\n                       | coma_separated ',' expression\n    \n        assignment : ID assign_symbol expression\n    \n        assignment : ID slice assign_symbol expression\n    \n        assign_symbol : ASSIGN\n                      | SUBASSIGN\n                      | ADDASSIGN\n                      | DIVASSIGN\n                      | MULTASSIGN\n    \n        expression : built_in_function '(' term_list ')'\n    \n        term_list : term\n                  | term_list ',' term\n    \n        expression : term\n    \n        expression : expression '+' term\n                   | expression '-' term\n                   | expression '/' term\n                   | expression '*' term\n                   | expression EQL term\n                   | expression NEQ term\n                   | expression GT term\n                   | expression GTE term\n                   | expression LT term\n                   | expression LTE term\n    \n        expression : '-' term %prec UMINUS\n    \n        vector : ID TRANSPOSE\n               | vector TRANSPOSE\n    \n        expression : ID dot_operation term\n                   | vector dot_operation term\n    \n         dot_operation : DOTADD\n                       | DOTSUB\n                       | DOTMUL\n                       | DOTDIV\n    \n        vector : '[' vector_contents ']'\n               |  '[' ']'\n    \n        vector_contents : vector_contents ',' vector_element\n    \n        vector_contents : vector_element\n    \n        vector_element : term\n    \n        slice : '[' slice_contents ']'\n    \n        slice_contents : range\n                       | slice_contents ',' range\n    \n        range : term ':' term\n              | term ':'\n              | ':' term\n              | term\n    \n        if : IF condition nested %prec IFx\n           | IF condition nested ELSE nested\n    \n        condition : '(' expression ')'\n    \n        nested : '{' statements '}'\n               | statement\n    \n        term : '(' expression ')'\n    \n        term : vector\n    \n        term : INTNUM\n    \n        term : FLOATNUM\n    \n        term : STR\n    \n        term : ID\n    \n        built_in_function : EYE\n                          | ONES\n                          | ZEROS\n    "
    
_lr_action_items = {'ID':([0,2,3,9,10,11,13,16,18,20,21,22,23,24,25,26,28,29,30,31,32,33,37,38,39,40,41,45,46,47,48,50,51,53,55,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,85,88,89,90,92,93,96,97,100,101,102,103,104,105,106,107,108,109,112,113,114,115,116,117,118,119,123,124,126,127,128,130,131,],[12,12,-2,-9,-10,-11,40,40,52,-3,-4,-5,-6,-7,-8,40,-22,-23,-24,-25,-26,61,40,-30,61,-72,-68,-69,-70,-71,61,12,40,12,40,61,-68,-72,40,61,61,61,61,61,61,61,61,61,61,61,-41,61,-42,-46,-47,-48,-49,61,-43,-51,-62,12,-66,40,-13,61,61,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-67,-44,-45,-50,61,12,12,-64,-27,61,-63,-65,40,12,-12,]),'PRINT':([0,2,3,9,10,11,20,21,22,23,24,25,38,40,41,45,46,47,50,53,60,61,75,77,83,85,88,89,90,93,100,101,102,103,104,105,106,107,108,109,112,113,114,115,117,118,119,123,126,127,130,131,],[13,13,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-30,-72,-68,-69,-70,-71,13,13,-68,-72,-41,-42,-43,-51,-62,13,-66,-13,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-67,-44,-45,-50,13,13,-64,-27,-63,-65,13,-12,]),'CONTINUE':([0,2,3,9,10,11,20,21,22,23,24,25,38,40,41,45,46,47,50,53,60,61,75,77,83,85,88,89,90,93,100,101,102,103,104,105,106,107,108,109,112,113,114,115,117,118,119,123,126,127,130,131,],[14,14,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-30,-72,-68,-69,-70,-71,14,14,-68,-72,-41,-42,-43,-51,-62,14,-66,-13,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-67,-44,-45,-50,14,14,-64,-27,-63,-65,14,-12,]),'BREAK':([0,2,3,9,10,11,20,21,22,23,24,25,38,40,41,45,46,47,50,53,60,61,75,77,83,85,88,89,90,93,100,101,102,103,104,105,106,107,108,109,112,113,114,115,117,118,119,123,126,127,130,131,],[15,15,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-30,-72,-68,-69,-70,-71,15,15,-68,-72,-41,-42,-43,-51,-62,15,-66,-13,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-67,-44,-45,-50,15,15,-64,-27,-63,-65,15,-12,]),'RETURN':([0,2,3,9,10,11,20,21,22,23,24,25,38,40,41,45,46,47,50,53,60,61,75,77,83,85,88,89,90,93,100,101,102,103,104,105,106,107,108,109,112,113,114,115,117,118,119,123,126,127,130,131,],[16,16,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-30,-72,-68,-69,-70,-71,16,16,-68,-72,-41,-42,-43,-51,-62,16,-66,-13,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-67,-44,-45,-50,16,16,-64,-27,-63,-65,16,-12,]),'IF':([0,2,3,9,10,11,20,21,22,23,24,25,38,40,41,45,46,47,50,53,60,61,75,77,83,85,88,89,90,93,100,101,102,103,104,105,106,107,108,109,112,113,114,115,117,118,119,123,126,127,130,131,],[17,17,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-30,-72,-68,-69,-70,-71,17,17,-68,-72,-41,-42,-43,-51,-62,17,-66,-13,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-67,-44,-45,-50,17,17,-64,-27,-63,-65,17,-12,]),'FOR':([0,2,3,9,10,11,20,21,22,23,24,25,38,40,41,45,46,47,50,53,60,61,75,77,83,85,88,89,90,93,100,101,102,103,104,105,106,107,108,109,112,113,114,115,117,118,119,123,126,127,130,131,],[18,18,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-30,-72,-68,-69,-70,-71,18,18,-68,-72,-41,-42,-43,-51,-62,18,-66,-13,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-67,-44,-45,-50,18,18,-64,-27,-63,-65,18,-12,]),'WHILE':([0,2,3,9,10,11,20,21,22,23,24,25,38,40,41,45,46,47,50,53,60,61,75,77,83,85,88,89,90,93,100,101,102,103,104,105,106,107,108,109,112,113,114,115,117,118,119,123,126,127,130,131,],[19,19,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-30,-72,-68,-69,-70,-71,19,19,-68,-72,-41,-42,-43,-51,-62,19,-66,-13,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-67,-44,-45,-50,19,19,-64,-27,-63,-65,19,-12,]),'$end':([1,2,3,9,10,11,20,21,22,23,24,25,88,90,93,126,127,131,],[0,-1,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-62,-66,-13,-63,-65,-12,]),'}':([3,9,10,11,20,21,22,23,24,25,88,90,93,118,126,127,131,],[-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-62,-66,-13,127,-63,-65,-12,]),';':([4,5,6,7,8,14,15,34,35,38,40,41,45,46,47,49,54,60,61,75,77,83,85,94,99,100,101,102,103,104,105,106,107,108,109,112,113,114,115,123,],[21,22,23,24,25,-16,-14,-17,-18,-30,-72,-68,-69,-70,-71,-15,-20,-68,-72,-41,-42,-43,-51,-21,-19,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-67,-44,-45,-50,-27,]),'ELSE':([9,10,11,21,22,23,24,25,88,90,93,126,127,131,],[-9,-10,-11,-4,-5,-6,-7,-8,117,-66,-13,-63,-65,-12,]),'ASSIGN':([12,27,52,95,],[28,28,92,-55,]),'SUBASSIGN':([12,27,95,],[29,29,-55,]),'ADDASSIGN':([12,27,95,],[30,30,-55,]),'DIVASSIGN':([12,27,95,],[31,31,-55,]),'MULTASSIGN':([12,27,95,],[32,32,-55,]),'[':([12,13,16,26,28,29,30,31,32,33,37,39,48,51,55,59,62,63,64,65,66,67,68,69,70,71,72,73,76,78,79,80,81,82,92,96,97,116,124,128,],[33,48,48,48,-22,-23,-24,-25,-26,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-46,-47,-48,-49,48,48,48,48,48,48,48,]),'-':([13,16,26,28,29,30,31,32,35,37,38,40,41,45,46,47,49,51,54,55,60,61,62,74,75,77,83,85,91,92,94,99,100,101,102,103,104,105,106,107,108,109,112,113,114,115,120,123,128,130,],[39,39,39,-22,-23,-24,-25,-26,64,39,-30,-72,-68,-69,-70,-71,64,39,64,39,-68,-72,39,64,-41,-42,-43,-51,64,39,64,64,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-67,-44,-45,-50,64,-27,39,64,]),'EYE':([13,16,26,28,29,30,31,32,37,51,55,62,92,128,],[42,42,42,-22,-23,-24,-25,-26,42,42,42,42,42,42,]),'ONES':([13,16,26,28,29,30,31,32,37,51,55,62,92,128,],[43,43,43,-22,-23,-24,-25,-26,43,43,43,43,43,43,]),'ZEROS':([13,16,26,28,29,30,31,32,37,51,55,62,92,128,],[44,44,44,-22,-23,-24,-25,-26,44,44,44,44,44,44,]),'(':([13,16,17,19,26,28,29,30,31,32,33,36,37,39,42,43,44,48,51,55,59,62,63,64,65,66,67,68,69,70,71,72,73,76,78,79,80,81,82,92,96,97,116,124,128,],[37,37,51,51,37,-22,-23,-24,-25,-26,37,73,37,37,-73,-74,-75,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-46,-47,-48,-49,37,37,37,37,37,37,37,]),'INTNUM':([13,16,26,28,29,30,31,32,33,37,39,48,51,55,59,62,63,64,65,66,67,68,69,70,71,72,73,76,78,79,80,81,82,92,96,97,116,124,128,],[45,45,45,-22,-23,-24,-25,-26,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-46,-47,-48,-49,45,45,45,45,45,45,45,]),'FLOATNUM':([13,16,26,28,29,30,31,32,33,37,39,48,51,55,59,62,63,64,65,66,67,68,69,70,71,72,73,76,78,79,80,81,82,92,96,97,116,124,128,],[46,46,46,-22,-23,-24,-25,-26,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-46,-47,-48,-49,46,46,46,46,46,46,46,]),'STR':([13,16,26,28,29,30,31,32,33,37,39,48,51,55,59,62,63,64,65,66,67,68,69,70,71,72,73,76,78,79,80,81,82,92,96,97,116,124,128,],[47,47,47,-22,-23,-24,-25,-26,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-46,-47,-48,-49,47,47,47,47,47,47,47,]),':':([33,38,40,41,45,46,47,58,60,61,75,77,83,85,96,100,101,102,103,104,105,106,107,108,109,112,113,114,115,120,123,],[59,-30,-72,-68,-69,-70,-71,97,-68,-72,-41,-42,-43,-51,59,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-67,-44,-45,-50,128,-27,]),',':([34,35,38,40,41,45,46,47,56,57,58,60,61,75,77,83,84,85,86,87,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,121,122,123,125,129,],[62,-18,-30,-72,-68,-69,-70,-71,96,-56,-61,-68,-72,-41,-42,-43,116,-51,-53,-54,-59,-60,-19,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,124,-28,-67,-44,-45,-50,-57,-58,-27,-52,-29,]),'+':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,85,91,94,99,100,101,102,103,104,105,106,107,108,109,112,113,114,115,120,123,130,],[63,-30,-72,-68,-69,-70,-71,63,63,-68,-72,63,-41,-42,-43,-51,63,63,63,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-67,-44,-45,-50,63,-27,63,]),'/':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,85,91,94,99,100,101,102,103,104,105,106,107,108,109,112,113,114,115,120,123,130,],[65,-30,-72,-68,-69,-70,-71,65,65,-68,-72,65,-41,-42,-43,-51,65,65,65,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-67,-44,-45,-50,65,-27,65,]),'*':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,85,91,94,99,100,101,102,103,104,105,106,107,108,109,112,113,114,115,120,123,130,],[66,-30,-72,-68,-69,-70,-71,66,66,-68,-72,66,-41,-42,-43,-51,66,66,66,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-67,-44,-45,-50,66,-27,66,]),'EQL':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,85,91,94,99,100,101,102,103,104,105,106,107,108,109,112,113,114,115,120,123,130,],[67,-30,-72,-68,-69,-70,-71,67,67,-68,-72,67,-41,-42,-43,-51,67,67,67,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-67,-44,-45,-50,67,-27,67,]),'NEQ':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,85,91,94,99,100,101,102,103,104,105,106,107,108,109,112,113,114,115,120,123,130,],[68,-30,-72,-68,-69,-70,-71,68,68,-68,-72,68,-41,-42,-43,-51,68,68,68,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-67,-44,-45,-50,68,-27,68,]),'GT':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,85,91,94,99,100,101,102,103,104,105,106,107,108,109,112,113,114,115,120,123,130,],[69,-30,-72,-68,-69,-70,-71,69,69,-68,-72,69,-41,-42,-43,-51,69,69,69,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-67,-44,-45,-50,69,-27,69,]),'GTE':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,85,91,94,99,100,101,102,103,104,105,106,107,108,109,112,113,114,115,120,123,130,],[70,-30,-72,-68,-69,-70,-71,70,70,-68,-72,70,-41,-42,-43,-51,70,70,70,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-67,-44,-45,-50,70,-27,70,]),'LT':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,85,91,94,99,100,101,102,103,104,105,106,107,108,109,112,113,114,115,120,123,130,],[71,-30,-72,-68,-69,-70,-71,71,71,-68,-72,71,-41,-42,-43,-51,71,71,71,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-67,-44,-45,-50,71,-27,71,]),'LTE':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,85,91,94,99,100,101,102,103,104,105,106,107,108,109,112,113,114,115,120,123,130,],[72,-30,-72,-68,-69,-70,-71,72,72,-68,-72,72,-41,-42,-43,-51,72,72,72,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-67,-44,-45,-50,72,-27,72,]),')':([38,40,41,45,46,47,60,61,74,75,77,83,85,91,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,123,129,],[-30,-72,-68,-69,-70,-71,-68,-72,112,-41,-42,-43,-51,119,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,123,-28,-67,-44,-45,-50,-27,-29,]),'{':([38,40,41,45,46,47,50,53,60,61,75,77,83,85,100,101,102,103,104,105,106,107,108,109,112,113,114,115,117,119,123,130,],[-30,-72,-68,-69,-70,-71,89,89,-68,-72,-41,-42,-43,-51,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-67,-44,-45,-50,89,-64,-27,89,]),'TRANSPOSE':([40,41,60,61,77,83,85,115,],[77,83,83,77,-42,-43,-51,-50,]),'DOTADD':([40,41,77,83,85,115,],[78,78,-42,-43,-51,-50,]),'DOTSUB':([40,41,77,83,85,115,],[79,79,-42,-43,-51,-50,]),'DOTMUL':([40,41,77,83,85,115,],[80,80,-42,-43,-51,-50,]),'DOTDIV':([40,41,77,83,85,115,],[81,81,-42,-43,-51,-50,]),']':([45,46,47,48,56,57,58,60,61,77,83,84,85,86,87,97,98,112,115,121,122,125,],[-69,-70,-71,85,95,-56,-61,-68,-72,-42,-43,115,-51,-53,-54,-59,-60,-67,-50,-57,-58,-52,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'statements':([0,89,],[2,118,]),'statement':([0,2,50,53,89,117,118,130,],[3,20,90,90,3,90,20,90,]),'assignment':([0,2,50,53,89,117,118,130,],[4,4,4,4,4,4,4,4,]),'print':([0,2,50,53,89,117,118,130,],[5,5,5,5,5,5,5,5,]),'continue':([0,2,50,53,89,117,118,130,],[6,6,6,6,6,6,6,6,]),'break':([0,2,50,53,89,117,118,130,],[7,7,7,7,7,7,7,7,]),'return':([0,2,50,53,89,117,118,130,],[8,8,8,8,8,8,8,8,]),'if':([0,2,50,53,89,117,118,130,],[9,9,9,9,9,9,9,9,]),'for':([0,2,50,53,89,117,118,130,],[10,10,10,10,10,10,10,10,]),'while':([0,2,50,53,89,117,118,130,],[11,11,11,11,11,11,11,11,]),'assign_symbol':([12,27,],[26,55,]),'slice':([12,],[27,]),'coma_separated':([13,],[34,]),'expression':([13,16,26,37,51,55,62,92,128,],[35,49,54,74,91,94,99,120,130,]),'built_in_function':([13,16,26,37,51,55,62,92,128,],[36,36,36,36,36,36,36,36,36,]),'term':([13,16,26,33,37,39,48,51,55,59,62,63,64,65,66,67,68,69,70,71,72,73,76,82,92,96,97,116,124,128,],[38,38,38,58,38,75,87,38,38,98,38,100,101,102,103,104,105,106,107,108,109,111,113,114,38,58,122,87,129,38,]),'vector':([13,16,26,33,37,39,48,51,55,59,62,63,64,65,66,67,68,69,70,71,72,73,76,82,92,96,97,116,124,128,],[41,41,41,60,41,60,60,41,41,60,41,60,60,60,60,60,60,60,60,60,60,60,60,60,41,60,60,60,60,41,]),'condition':([17,19,],[50,53,]),'slice_contents':([33,],[56,]),'range':([33,96,],[57,121,]),'dot_operation':([40,41,],[76,82,]),'vector_contents':([48,],[84,]),'vector_element':([48,116,],[86,125,]),'nested':([50,53,117,130,],[88,93,126,131,]),'term_list':([73,],[110,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> statements','start',1,'p_start','Parser.py',34),
  ('statements -> statement','statements',1,'p_statements','Parser.py',41),
  ('statements -> statements statement','statements',2,'p_statements','Parser.py',42),
  ('statement -> assignment ;','statement',2,'p_statement','Parser.py',49),
  ('statement -> print ;','statement',2,'p_statement','Parser.py',50),
  ('statement -> continue ;','statement',2,'p_statement','Parser.py',51),
  ('statement -> break ;','statement',2,'p_statement','Parser.py',52),
  ('statement -> return ;','statement',2,'p_statement','Parser.py',53),
  ('statement -> if','statement',1,'p_statement','Parser.py',54),
  ('statement -> for','statement',1,'p_statement','Parser.py',55),
  ('statement -> while','statement',1,'p_statement','Parser.py',56),
  ('for -> FOR ID ASSIGN expression : expression nested','for',7,'p_for','Parser.py',63),
  ('while -> WHILE condition nested','while',3,'p_while','Parser.py',70),
  ('break -> BREAK','break',1,'p_break','Parser.py',77),
  ('return -> RETURN expression','return',2,'p_return','Parser.py',84),
  ('continue -> CONTINUE','continue',1,'p_continue','Parser.py',91),
  ('print -> PRINT coma_separated','print',2,'p_print','Parser.py',98),
  ('coma_separated -> expression','coma_separated',1,'p_coma_separated','Parser.py',105),
  ('coma_separated -> coma_separated , expression','coma_separated',3,'p_coma_separated','Parser.py',106),
  ('assignment -> ID assign_symbol expression','assignment',3,'p_assignment','Parser.py',113),
  ('assignment -> ID slice assign_symbol expression','assignment',4,'p_slice_assignment','Parser.py',120),
  ('assign_symbol -> ASSIGN','assign_symbol',1,'p_assign','Parser.py',127),
  ('assign_symbol -> SUBASSIGN','assign_symbol',1,'p_assign','Parser.py',128),
  ('assign_symbol -> ADDASSIGN','assign_symbol',1,'p_assign','Parser.py',129),
  ('assign_symbol -> DIVASSIGN','assign_symbol',1,'p_assign','Parser.py',130),
  ('assign_symbol -> MULTASSIGN','assign_symbol',1,'p_assign','Parser.py',131),
  ('expression -> built_in_function ( term_list )','expression',4,'p_expression_built_in_function','Parser.py',138),
  ('term_list -> term','term_list',1,'p_term_list','Parser.py',145),
  ('term_list -> term_list , term','term_list',3,'p_term_list','Parser.py',146),
  ('expression -> term','expression',1,'p_expression_term','Parser.py',152),
  ('expression -> expression + term','expression',3,'p_expression_binary_ops','Parser.py',159),
  ('expression -> expression - term','expression',3,'p_expression_binary_ops','Parser.py',160),
  ('expression -> expression / term','expression',3,'p_expression_binary_ops','Parser.py',161),
  ('expression -> expression * term','expression',3,'p_expression_binary_ops','Parser.py',162),
  ('expression -> expression EQL term','expression',3,'p_expression_binary_ops','Parser.py',163),
  ('expression -> expression NEQ term','expression',3,'p_expression_binary_ops','Parser.py',164),
  ('expression -> expression GT term','expression',3,'p_expression_binary_ops','Parser.py',165),
  ('expression -> expression GTE term','expression',3,'p_expression_binary_ops','Parser.py',166),
  ('expression -> expression LT term','expression',3,'p_expression_binary_ops','Parser.py',167),
  ('expression -> expression LTE term','expression',3,'p_expression_binary_ops','Parser.py',168),
  ('expression -> - term','expression',2,'p_expression_unary','Parser.py',175),
  ('vector -> ID TRANSPOSE','vector',2,'p_vector_transpose','Parser.py',182),
  ('vector -> vector TRANSPOSE','vector',2,'p_vector_transpose','Parser.py',183),
  ('expression -> ID dot_operation term','expression',3,'p_expression_suffix_binary_ops','Parser.py',190),
  ('expression -> vector dot_operation term','expression',3,'p_expression_suffix_binary_ops','Parser.py',191),
  ('dot_operation -> DOTADD','dot_operation',1,'p_dot_operation','Parser.py',198),
  ('dot_operation -> DOTSUB','dot_operation',1,'p_dot_operation','Parser.py',199),
  ('dot_operation -> DOTMUL','dot_operation',1,'p_dot_operation','Parser.py',200),
  ('dot_operation -> DOTDIV','dot_operation',1,'p_dot_operation','Parser.py',201),
  ('vector -> [ vector_contents ]','vector',3,'p_vector','Parser.py',208),
  ('vector -> [ ]','vector',2,'p_vector','Parser.py',209),
  ('vector_contents -> vector_contents , vector_element','vector_contents',3,'p_vector_contents_list','Parser.py',219),
  ('vector_contents -> vector_element','vector_contents',1,'p_vector_contents_single','Parser.py',227),
  ('vector_element -> term','vector_element',1,'p_vector_element','Parser.py',235),
  ('slice -> [ slice_contents ]','slice',3,'p_slice','Parser.py',243),
  ('slice_contents -> range','slice_contents',1,'p_slice_contents','Parser.py',250),
  ('slice_contents -> slice_contents , range','slice_contents',3,'p_slice_contents','Parser.py',251),
  ('range -> term : term','range',3,'p_range','Parser.py',258),
  ('range -> term :','range',2,'p_range','Parser.py',259),
  ('range -> : term','range',2,'p_range','Parser.py',260),
  ('range -> term','range',1,'p_range','Parser.py',261),
  ('if -> IF condition nested','if',3,'p_if','Parser.py',272),
  ('if -> IF condition nested ELSE nested','if',5,'p_if','Parser.py',273),
  ('condition -> ( expression )','condition',3,'p_condition','Parser.py',280),
  ('nested -> { statements }','nested',3,'p_nested','Parser.py',286),
  ('nested -> statement','nested',1,'p_nested','Parser.py',287),
  ('term -> ( expression )','term',3,'p_term','Parser.py',294),
  ('term -> vector','term',1,'p_term_vector','Parser.py',301),
  ('term -> INTNUM','term',1,'p_term_primitive_int','Parser.py',308),
  ('term -> FLOATNUM','term',1,'p_term_primitive_float','Parser.py',315),
  ('term -> STR','term',1,'p_term_primitive_str','Parser.py',322),
  ('term -> ID','term',1,'p_term_id','Parser.py',329),
  ('built_in_function -> EYE','built_in_function',1,'p_built_in_function','Parser.py',336),
  ('built_in_function -> ONES','built_in_function',1,'p_built_in_function','Parser.py',337),
  ('built_in_function -> ZEROS','built_in_function',1,'p_built_in_function','Parser.py',338),
]
