Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> statements
Rule 2     statements -> statements_list
Rule 3     statements_list -> statements_list statement
Rule 4     statements_list -> statement
Rule 5     statement -> assignment ;
Rule 6     statement -> print ;
Rule 7     statement -> continue ;
Rule 8     statement -> break ;
Rule 9     statement -> return ;
Rule 10    statement -> if
Rule 11    statement -> for
Rule 12    statement -> while
Rule 13    for -> FOR ID ASSIGN expression : expression nested
Rule 14    while -> WHILE condition nested
Rule 15    break -> BREAK
Rule 16    return -> RETURN expression
Rule 17    continue -> CONTINUE
Rule 18    print -> PRINT coma_separated
Rule 19    coma_separated -> coma_separated , expression
Rule 20    coma_separated -> expression
Rule 21    assignment -> ID assign_symbol expression
Rule 22    assignment -> ID slice assign_symbol expression
Rule 23    assign_symbol -> ASSIGN
Rule 24    assign_symbol -> SUBASSIGN
Rule 25    assign_symbol -> ADDASSIGN
Rule 26    assign_symbol -> DIVASSIGN
Rule 27    assign_symbol -> MULTASSIGN
Rule 28    expression -> built_in_function ( expression_list )
Rule 29    expression_list -> expression_list , expression
Rule 30    expression_list -> expression
Rule 31    expression -> term
Rule 32    expression -> expression + term
Rule 33    expression -> expression - term
Rule 34    expression -> expression / term
Rule 35    expression -> expression * term
Rule 36    expression -> expression EQL term
Rule 37    expression -> expression NEQ term
Rule 38    expression -> expression GT term
Rule 39    expression -> expression GTE term
Rule 40    expression -> expression LT term
Rule 41    expression -> expression LTE term
Rule 42    expression -> - term
Rule 43    expression -> expression TRANSPOSE
Rule 44    expression -> ID dot_operation term
Rule 45    expression -> vector dot_operation term
Rule 46    dot_operation -> DOTADD
Rule 47    dot_operation -> DOTSUB
Rule 48    dot_operation -> DOTMUL
Rule 49    dot_operation -> DOTDIV
Rule 50    vector -> [ vector_contents ]
Rule 51    vector -> [ ]
Rule 52    vector_contents -> vector_contents , vector_element
Rule 53    vector_contents -> vector_element
Rule 54    vector_element -> term
Rule 55    slice -> [ slice_contents ]
Rule 56    slice_contents -> slice_contents , range
Rule 57    slice_contents -> range
Rule 58    range -> expression : expression
Rule 59    range -> expression :
Rule 60    range -> : expression
Rule 61    range -> expression
Rule 62    if -> IF condition nested
Rule 63    if -> IF condition nested ELSE nested
Rule 64    condition -> ( expression )
Rule 65    nested -> { statements_list }
Rule 66    nested -> statement
Rule 67    term -> ( expression )
Rule 68    term -> vector
Rule 69    term -> INTNUM
Rule 70    term -> FLOATNUM
Rule 71    term -> STR
Rule 72    term -> ID
Rule 73    built_in_function -> EYE
Rule 74    built_in_function -> ONES
Rule 75    built_in_function -> ZEROS

Terminals, with rules where they appear

(                    : 28 64 67
)                    : 28 64 67
*                    : 35
+                    : 32
,                    : 19 29 52 56
-                    : 33 42
/                    : 34
:                    : 13 58 59 60
;                    : 5 6 7 8 9
ADDASSIGN            : 25
ASSIGN               : 13 23
BREAK                : 15
CONTINUE             : 17
DIVASSIGN            : 26
DOTADD               : 46
DOTDIV               : 49
DOTMUL               : 48
DOTSUB               : 47
ELSE                 : 63
EQL                  : 36
EYE                  : 73
FLOATNUM             : 70
FOR                  : 13
GT                   : 38
GTE                  : 39
ID                   : 13 21 22 44 72
IF                   : 62 63
INTNUM               : 69
LT                   : 40
LTE                  : 41
MULTASSIGN           : 27
NEQ                  : 37
ONES                 : 74
PRINT                : 18
RETURN               : 16
STR                  : 71
SUBASSIGN            : 24
TRANSPOSE            : 43
WHILE                : 14
ZEROS                : 75
[                    : 50 51 55
]                    : 50 51 55
error                : 
{                    : 65
}                    : 65

Nonterminals, with rules where they appear

assign_symbol        : 21 22
assignment           : 5
break                : 8
built_in_function    : 28
coma_separated       : 18 19
condition            : 14 62 63
continue             : 7
dot_operation        : 44 45
expression           : 13 13 16 19 20 21 22 29 30 32 33 34 35 36 37 38 39 40 41 43 58 58 59 60 61 64 67
expression_list      : 28 29
for                  : 11
if                   : 10
nested               : 13 14 62 63 63
print                : 6
range                : 56 57
return               : 9
slice                : 22
slice_contents       : 55 56
start                : 0
statement            : 3 4 66
statements           : 1
statements_list      : 2 3 65
term                 : 31 32 33 34 35 36 37 38 39 40 41 42 44 45 54
vector               : 45 68
vector_contents      : 50 52
vector_element       : 52 53
while                : 12

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . statements
    (2) statements -> . statements_list
    (3) statements_list -> . statements_list statement
    (4) statements_list -> . statement
    (5) statement -> . assignment ;
    (6) statement -> . print ;
    (7) statement -> . continue ;
    (8) statement -> . break ;
    (9) statement -> . return ;
    (10) statement -> . if
    (11) statement -> . for
    (12) statement -> . while
    (21) assignment -> . ID assign_symbol expression
    (22) assignment -> . ID slice assign_symbol expression
    (18) print -> . PRINT coma_separated
    (17) continue -> . CONTINUE
    (15) break -> . BREAK
    (16) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (13) for -> . FOR ID ASSIGN expression : expression nested
    (14) while -> . WHILE condition nested

    ID              shift and go to state 13
    PRINT           shift and go to state 14
    CONTINUE        shift and go to state 15
    BREAK           shift and go to state 16
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 20

    start                          shift and go to state 1
    statements                     shift and go to state 2
    statements_list                shift and go to state 3
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print                          shift and go to state 6
    continue                       shift and go to state 7
    break                          shift and go to state 8
    return                         shift and go to state 9
    if                             shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12

state 1

    (0) S' -> start .



state 2

    (1) start -> statements .

    $end            reduce using rule 1 (start -> statements .)


state 3

    (2) statements -> statements_list .
    (3) statements_list -> statements_list . statement
    (5) statement -> . assignment ;
    (6) statement -> . print ;
    (7) statement -> . continue ;
    (8) statement -> . break ;
    (9) statement -> . return ;
    (10) statement -> . if
    (11) statement -> . for
    (12) statement -> . while
    (21) assignment -> . ID assign_symbol expression
    (22) assignment -> . ID slice assign_symbol expression
    (18) print -> . PRINT coma_separated
    (17) continue -> . CONTINUE
    (15) break -> . BREAK
    (16) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (13) for -> . FOR ID ASSIGN expression : expression nested
    (14) while -> . WHILE condition nested

    $end            reduce using rule 2 (statements -> statements_list .)
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    CONTINUE        shift and go to state 15
    BREAK           shift and go to state 16
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 20

    statement                      shift and go to state 21
    assignment                     shift and go to state 5
    print                          shift and go to state 6
    continue                       shift and go to state 7
    break                          shift and go to state 8
    return                         shift and go to state 9
    if                             shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12

state 4

    (4) statements_list -> statement .

    ID              reduce using rule 4 (statements_list -> statement .)
    PRINT           reduce using rule 4 (statements_list -> statement .)
    CONTINUE        reduce using rule 4 (statements_list -> statement .)
    BREAK           reduce using rule 4 (statements_list -> statement .)
    RETURN          reduce using rule 4 (statements_list -> statement .)
    IF              reduce using rule 4 (statements_list -> statement .)
    FOR             reduce using rule 4 (statements_list -> statement .)
    WHILE           reduce using rule 4 (statements_list -> statement .)
    $end            reduce using rule 4 (statements_list -> statement .)
    }               reduce using rule 4 (statements_list -> statement .)


state 5

    (5) statement -> assignment . ;

    ;               shift and go to state 22


state 6

    (6) statement -> print . ;

    ;               shift and go to state 23


state 7

    (7) statement -> continue . ;

    ;               shift and go to state 24


state 8

    (8) statement -> break . ;

    ;               shift and go to state 25


state 9

    (9) statement -> return . ;

    ;               shift and go to state 26


state 10

    (10) statement -> if .

    ID              reduce using rule 10 (statement -> if .)
    PRINT           reduce using rule 10 (statement -> if .)
    CONTINUE        reduce using rule 10 (statement -> if .)
    BREAK           reduce using rule 10 (statement -> if .)
    RETURN          reduce using rule 10 (statement -> if .)
    IF              reduce using rule 10 (statement -> if .)
    FOR             reduce using rule 10 (statement -> if .)
    WHILE           reduce using rule 10 (statement -> if .)
    $end            reduce using rule 10 (statement -> if .)
    ELSE            reduce using rule 10 (statement -> if .)
    }               reduce using rule 10 (statement -> if .)


state 11

    (11) statement -> for .

    ID              reduce using rule 11 (statement -> for .)
    PRINT           reduce using rule 11 (statement -> for .)
    CONTINUE        reduce using rule 11 (statement -> for .)
    BREAK           reduce using rule 11 (statement -> for .)
    RETURN          reduce using rule 11 (statement -> for .)
    IF              reduce using rule 11 (statement -> for .)
    FOR             reduce using rule 11 (statement -> for .)
    WHILE           reduce using rule 11 (statement -> for .)
    $end            reduce using rule 11 (statement -> for .)
    ELSE            reduce using rule 11 (statement -> for .)
    }               reduce using rule 11 (statement -> for .)


state 12

    (12) statement -> while .

    ID              reduce using rule 12 (statement -> while .)
    PRINT           reduce using rule 12 (statement -> while .)
    CONTINUE        reduce using rule 12 (statement -> while .)
    BREAK           reduce using rule 12 (statement -> while .)
    RETURN          reduce using rule 12 (statement -> while .)
    IF              reduce using rule 12 (statement -> while .)
    FOR             reduce using rule 12 (statement -> while .)
    WHILE           reduce using rule 12 (statement -> while .)
    $end            reduce using rule 12 (statement -> while .)
    ELSE            reduce using rule 12 (statement -> while .)
    }               reduce using rule 12 (statement -> while .)


state 13

    (21) assignment -> ID . assign_symbol expression
    (22) assignment -> ID . slice assign_symbol expression
    (23) assign_symbol -> . ASSIGN
    (24) assign_symbol -> . SUBASSIGN
    (25) assign_symbol -> . ADDASSIGN
    (26) assign_symbol -> . DIVASSIGN
    (27) assign_symbol -> . MULTASSIGN
    (55) slice -> . [ slice_contents ]

    ASSIGN          shift and go to state 29
    SUBASSIGN       shift and go to state 30
    ADDASSIGN       shift and go to state 31
    DIVASSIGN       shift and go to state 32
    MULTASSIGN      shift and go to state 33
    [               shift and go to state 34

    assign_symbol                  shift and go to state 27
    slice                          shift and go to state 28

state 14

    (18) print -> PRINT . coma_separated
    (19) coma_separated -> . coma_separated , expression
    (20) coma_separated -> . expression
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    [               shift and go to state 49

    coma_separated                 shift and go to state 35
    expression                     shift and go to state 36
    built_in_function              shift and go to state 37
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 15

    (17) continue -> CONTINUE .

    ;               reduce using rule 17 (continue -> CONTINUE .)


state 16

    (15) break -> BREAK .

    ;               reduce using rule 15 (break -> BREAK .)


state 17

    (16) return -> RETURN . expression
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    [               shift and go to state 49

    expression                     shift and go to state 50
    built_in_function              shift and go to state 37
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 18

    (62) if -> IF . condition nested
    (63) if -> IF . condition nested ELSE nested
    (64) condition -> . ( expression )

    (               shift and go to state 52

    condition                      shift and go to state 51

state 19

    (13) for -> FOR . ID ASSIGN expression : expression nested

    ID              shift and go to state 53


state 20

    (14) while -> WHILE . condition nested
    (64) condition -> . ( expression )

    (               shift and go to state 52

    condition                      shift and go to state 54

state 21

    (3) statements_list -> statements_list statement .

    ID              reduce using rule 3 (statements_list -> statements_list statement .)
    PRINT           reduce using rule 3 (statements_list -> statements_list statement .)
    CONTINUE        reduce using rule 3 (statements_list -> statements_list statement .)
    BREAK           reduce using rule 3 (statements_list -> statements_list statement .)
    RETURN          reduce using rule 3 (statements_list -> statements_list statement .)
    IF              reduce using rule 3 (statements_list -> statements_list statement .)
    FOR             reduce using rule 3 (statements_list -> statements_list statement .)
    WHILE           reduce using rule 3 (statements_list -> statements_list statement .)
    $end            reduce using rule 3 (statements_list -> statements_list statement .)
    }               reduce using rule 3 (statements_list -> statements_list statement .)


state 22

    (5) statement -> assignment ; .

    ID              reduce using rule 5 (statement -> assignment ; .)
    PRINT           reduce using rule 5 (statement -> assignment ; .)
    CONTINUE        reduce using rule 5 (statement -> assignment ; .)
    BREAK           reduce using rule 5 (statement -> assignment ; .)
    RETURN          reduce using rule 5 (statement -> assignment ; .)
    IF              reduce using rule 5 (statement -> assignment ; .)
    FOR             reduce using rule 5 (statement -> assignment ; .)
    WHILE           reduce using rule 5 (statement -> assignment ; .)
    $end            reduce using rule 5 (statement -> assignment ; .)
    ELSE            reduce using rule 5 (statement -> assignment ; .)
    }               reduce using rule 5 (statement -> assignment ; .)


state 23

    (6) statement -> print ; .

    ID              reduce using rule 6 (statement -> print ; .)
    PRINT           reduce using rule 6 (statement -> print ; .)
    CONTINUE        reduce using rule 6 (statement -> print ; .)
    BREAK           reduce using rule 6 (statement -> print ; .)
    RETURN          reduce using rule 6 (statement -> print ; .)
    IF              reduce using rule 6 (statement -> print ; .)
    FOR             reduce using rule 6 (statement -> print ; .)
    WHILE           reduce using rule 6 (statement -> print ; .)
    $end            reduce using rule 6 (statement -> print ; .)
    ELSE            reduce using rule 6 (statement -> print ; .)
    }               reduce using rule 6 (statement -> print ; .)


state 24

    (7) statement -> continue ; .

    ID              reduce using rule 7 (statement -> continue ; .)
    PRINT           reduce using rule 7 (statement -> continue ; .)
    CONTINUE        reduce using rule 7 (statement -> continue ; .)
    BREAK           reduce using rule 7 (statement -> continue ; .)
    RETURN          reduce using rule 7 (statement -> continue ; .)
    IF              reduce using rule 7 (statement -> continue ; .)
    FOR             reduce using rule 7 (statement -> continue ; .)
    WHILE           reduce using rule 7 (statement -> continue ; .)
    $end            reduce using rule 7 (statement -> continue ; .)
    ELSE            reduce using rule 7 (statement -> continue ; .)
    }               reduce using rule 7 (statement -> continue ; .)


state 25

    (8) statement -> break ; .

    ID              reduce using rule 8 (statement -> break ; .)
    PRINT           reduce using rule 8 (statement -> break ; .)
    CONTINUE        reduce using rule 8 (statement -> break ; .)
    BREAK           reduce using rule 8 (statement -> break ; .)
    RETURN          reduce using rule 8 (statement -> break ; .)
    IF              reduce using rule 8 (statement -> break ; .)
    FOR             reduce using rule 8 (statement -> break ; .)
    WHILE           reduce using rule 8 (statement -> break ; .)
    $end            reduce using rule 8 (statement -> break ; .)
    ELSE            reduce using rule 8 (statement -> break ; .)
    }               reduce using rule 8 (statement -> break ; .)


state 26

    (9) statement -> return ; .

    ID              reduce using rule 9 (statement -> return ; .)
    PRINT           reduce using rule 9 (statement -> return ; .)
    CONTINUE        reduce using rule 9 (statement -> return ; .)
    BREAK           reduce using rule 9 (statement -> return ; .)
    RETURN          reduce using rule 9 (statement -> return ; .)
    IF              reduce using rule 9 (statement -> return ; .)
    FOR             reduce using rule 9 (statement -> return ; .)
    WHILE           reduce using rule 9 (statement -> return ; .)
    $end            reduce using rule 9 (statement -> return ; .)
    ELSE            reduce using rule 9 (statement -> return ; .)
    }               reduce using rule 9 (statement -> return ; .)


state 27

    (21) assignment -> ID assign_symbol . expression
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    [               shift and go to state 49

    expression                     shift and go to state 55
    built_in_function              shift and go to state 37
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 28

    (22) assignment -> ID slice . assign_symbol expression
    (23) assign_symbol -> . ASSIGN
    (24) assign_symbol -> . SUBASSIGN
    (25) assign_symbol -> . ADDASSIGN
    (26) assign_symbol -> . DIVASSIGN
    (27) assign_symbol -> . MULTASSIGN

    ASSIGN          shift and go to state 29
    SUBASSIGN       shift and go to state 30
    ADDASSIGN       shift and go to state 31
    DIVASSIGN       shift and go to state 32
    MULTASSIGN      shift and go to state 33

    assign_symbol                  shift and go to state 56

state 29

    (23) assign_symbol -> ASSIGN .

    -               reduce using rule 23 (assign_symbol -> ASSIGN .)
    ID              reduce using rule 23 (assign_symbol -> ASSIGN .)
    EYE             reduce using rule 23 (assign_symbol -> ASSIGN .)
    ONES            reduce using rule 23 (assign_symbol -> ASSIGN .)
    ZEROS           reduce using rule 23 (assign_symbol -> ASSIGN .)
    (               reduce using rule 23 (assign_symbol -> ASSIGN .)
    INTNUM          reduce using rule 23 (assign_symbol -> ASSIGN .)
    FLOATNUM        reduce using rule 23 (assign_symbol -> ASSIGN .)
    STR             reduce using rule 23 (assign_symbol -> ASSIGN .)
    [               reduce using rule 23 (assign_symbol -> ASSIGN .)


state 30

    (24) assign_symbol -> SUBASSIGN .

    -               reduce using rule 24 (assign_symbol -> SUBASSIGN .)
    ID              reduce using rule 24 (assign_symbol -> SUBASSIGN .)
    EYE             reduce using rule 24 (assign_symbol -> SUBASSIGN .)
    ONES            reduce using rule 24 (assign_symbol -> SUBASSIGN .)
    ZEROS           reduce using rule 24 (assign_symbol -> SUBASSIGN .)
    (               reduce using rule 24 (assign_symbol -> SUBASSIGN .)
    INTNUM          reduce using rule 24 (assign_symbol -> SUBASSIGN .)
    FLOATNUM        reduce using rule 24 (assign_symbol -> SUBASSIGN .)
    STR             reduce using rule 24 (assign_symbol -> SUBASSIGN .)
    [               reduce using rule 24 (assign_symbol -> SUBASSIGN .)


state 31

    (25) assign_symbol -> ADDASSIGN .

    -               reduce using rule 25 (assign_symbol -> ADDASSIGN .)
    ID              reduce using rule 25 (assign_symbol -> ADDASSIGN .)
    EYE             reduce using rule 25 (assign_symbol -> ADDASSIGN .)
    ONES            reduce using rule 25 (assign_symbol -> ADDASSIGN .)
    ZEROS           reduce using rule 25 (assign_symbol -> ADDASSIGN .)
    (               reduce using rule 25 (assign_symbol -> ADDASSIGN .)
    INTNUM          reduce using rule 25 (assign_symbol -> ADDASSIGN .)
    FLOATNUM        reduce using rule 25 (assign_symbol -> ADDASSIGN .)
    STR             reduce using rule 25 (assign_symbol -> ADDASSIGN .)
    [               reduce using rule 25 (assign_symbol -> ADDASSIGN .)


state 32

    (26) assign_symbol -> DIVASSIGN .

    -               reduce using rule 26 (assign_symbol -> DIVASSIGN .)
    ID              reduce using rule 26 (assign_symbol -> DIVASSIGN .)
    EYE             reduce using rule 26 (assign_symbol -> DIVASSIGN .)
    ONES            reduce using rule 26 (assign_symbol -> DIVASSIGN .)
    ZEROS           reduce using rule 26 (assign_symbol -> DIVASSIGN .)
    (               reduce using rule 26 (assign_symbol -> DIVASSIGN .)
    INTNUM          reduce using rule 26 (assign_symbol -> DIVASSIGN .)
    FLOATNUM        reduce using rule 26 (assign_symbol -> DIVASSIGN .)
    STR             reduce using rule 26 (assign_symbol -> DIVASSIGN .)
    [               reduce using rule 26 (assign_symbol -> DIVASSIGN .)


state 33

    (27) assign_symbol -> MULTASSIGN .

    -               reduce using rule 27 (assign_symbol -> MULTASSIGN .)
    ID              reduce using rule 27 (assign_symbol -> MULTASSIGN .)
    EYE             reduce using rule 27 (assign_symbol -> MULTASSIGN .)
    ONES            reduce using rule 27 (assign_symbol -> MULTASSIGN .)
    ZEROS           reduce using rule 27 (assign_symbol -> MULTASSIGN .)
    (               reduce using rule 27 (assign_symbol -> MULTASSIGN .)
    INTNUM          reduce using rule 27 (assign_symbol -> MULTASSIGN .)
    FLOATNUM        reduce using rule 27 (assign_symbol -> MULTASSIGN .)
    STR             reduce using rule 27 (assign_symbol -> MULTASSIGN .)
    [               reduce using rule 27 (assign_symbol -> MULTASSIGN .)


state 34

    (55) slice -> [ . slice_contents ]
    (56) slice_contents -> . slice_contents , range
    (57) slice_contents -> . range
    (58) range -> . expression : expression
    (59) range -> . expression :
    (60) range -> . : expression
    (61) range -> . expression
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    :               shift and go to state 60
    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    [               shift and go to state 49

    slice_contents                 shift and go to state 57
    range                          shift and go to state 58
    expression                     shift and go to state 59
    built_in_function              shift and go to state 37
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 35

    (18) print -> PRINT coma_separated .
    (19) coma_separated -> coma_separated . , expression

    ;               reduce using rule 18 (print -> PRINT coma_separated .)
    ,               shift and go to state 61


state 36

    (20) coma_separated -> expression .
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    ,               reduce using rule 20 (coma_separated -> expression .)
    ;               reduce using rule 20 (coma_separated -> expression .)
    +               shift and go to state 62
    -               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    EQL             shift and go to state 66
    NEQ             shift and go to state 67
    GT              shift and go to state 68
    GTE             shift and go to state 69
    LT              shift and go to state 70
    LTE             shift and go to state 71
    TRANSPOSE       shift and go to state 72


state 37

    (28) expression -> built_in_function . ( expression_list )

    (               shift and go to state 73


state 38

    (67) term -> ( . expression )
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    [               shift and go to state 49

    expression                     shift and go to state 74
    built_in_function              shift and go to state 37
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 39

    (31) expression -> term .

    +               reduce using rule 31 (expression -> term .)
    -               reduce using rule 31 (expression -> term .)
    /               reduce using rule 31 (expression -> term .)
    *               reduce using rule 31 (expression -> term .)
    EQL             reduce using rule 31 (expression -> term .)
    NEQ             reduce using rule 31 (expression -> term .)
    GT              reduce using rule 31 (expression -> term .)
    GTE             reduce using rule 31 (expression -> term .)
    LT              reduce using rule 31 (expression -> term .)
    LTE             reduce using rule 31 (expression -> term .)
    TRANSPOSE       reduce using rule 31 (expression -> term .)
    ,               reduce using rule 31 (expression -> term .)
    ;               reduce using rule 31 (expression -> term .)
    :               reduce using rule 31 (expression -> term .)
    ]               reduce using rule 31 (expression -> term .)
    )               reduce using rule 31 (expression -> term .)
    {               reduce using rule 31 (expression -> term .)
    ID              reduce using rule 31 (expression -> term .)
    PRINT           reduce using rule 31 (expression -> term .)
    CONTINUE        reduce using rule 31 (expression -> term .)
    BREAK           reduce using rule 31 (expression -> term .)
    RETURN          reduce using rule 31 (expression -> term .)
    IF              reduce using rule 31 (expression -> term .)
    FOR             reduce using rule 31 (expression -> term .)
    WHILE           reduce using rule 31 (expression -> term .)


state 40

    (42) expression -> - . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    ID              shift and go to state 77
    [               shift and go to state 49

    term                           shift and go to state 75
    vector                         shift and go to state 76

state 41

    (44) expression -> ID . dot_operation term
    (72) term -> ID .
    (46) dot_operation -> . DOTADD
    (47) dot_operation -> . DOTSUB
    (48) dot_operation -> . DOTMUL
    (49) dot_operation -> . DOTDIV

    +               reduce using rule 72 (term -> ID .)
    -               reduce using rule 72 (term -> ID .)
    /               reduce using rule 72 (term -> ID .)
    *               reduce using rule 72 (term -> ID .)
    EQL             reduce using rule 72 (term -> ID .)
    NEQ             reduce using rule 72 (term -> ID .)
    GT              reduce using rule 72 (term -> ID .)
    GTE             reduce using rule 72 (term -> ID .)
    LT              reduce using rule 72 (term -> ID .)
    LTE             reduce using rule 72 (term -> ID .)
    TRANSPOSE       reduce using rule 72 (term -> ID .)
    ,               reduce using rule 72 (term -> ID .)
    ;               reduce using rule 72 (term -> ID .)
    :               reduce using rule 72 (term -> ID .)
    ]               reduce using rule 72 (term -> ID .)
    )               reduce using rule 72 (term -> ID .)
    {               reduce using rule 72 (term -> ID .)
    ID              reduce using rule 72 (term -> ID .)
    PRINT           reduce using rule 72 (term -> ID .)
    CONTINUE        reduce using rule 72 (term -> ID .)
    BREAK           reduce using rule 72 (term -> ID .)
    RETURN          reduce using rule 72 (term -> ID .)
    IF              reduce using rule 72 (term -> ID .)
    FOR             reduce using rule 72 (term -> ID .)
    WHILE           reduce using rule 72 (term -> ID .)
    DOTADD          shift and go to state 79
    DOTSUB          shift and go to state 80
    DOTMUL          shift and go to state 81
    DOTDIV          shift and go to state 82

    dot_operation                  shift and go to state 78

state 42

    (45) expression -> vector . dot_operation term
    (68) term -> vector .
    (46) dot_operation -> . DOTADD
    (47) dot_operation -> . DOTSUB
    (48) dot_operation -> . DOTMUL
    (49) dot_operation -> . DOTDIV

    +               reduce using rule 68 (term -> vector .)
    -               reduce using rule 68 (term -> vector .)
    /               reduce using rule 68 (term -> vector .)
    *               reduce using rule 68 (term -> vector .)
    EQL             reduce using rule 68 (term -> vector .)
    NEQ             reduce using rule 68 (term -> vector .)
    GT              reduce using rule 68 (term -> vector .)
    GTE             reduce using rule 68 (term -> vector .)
    LT              reduce using rule 68 (term -> vector .)
    LTE             reduce using rule 68 (term -> vector .)
    TRANSPOSE       reduce using rule 68 (term -> vector .)
    ,               reduce using rule 68 (term -> vector .)
    ;               reduce using rule 68 (term -> vector .)
    :               reduce using rule 68 (term -> vector .)
    ]               reduce using rule 68 (term -> vector .)
    )               reduce using rule 68 (term -> vector .)
    {               reduce using rule 68 (term -> vector .)
    ID              reduce using rule 68 (term -> vector .)
    PRINT           reduce using rule 68 (term -> vector .)
    CONTINUE        reduce using rule 68 (term -> vector .)
    BREAK           reduce using rule 68 (term -> vector .)
    RETURN          reduce using rule 68 (term -> vector .)
    IF              reduce using rule 68 (term -> vector .)
    FOR             reduce using rule 68 (term -> vector .)
    WHILE           reduce using rule 68 (term -> vector .)
    DOTADD          shift and go to state 79
    DOTSUB          shift and go to state 80
    DOTMUL          shift and go to state 81
    DOTDIV          shift and go to state 82

    dot_operation                  shift and go to state 83

state 43

    (73) built_in_function -> EYE .

    (               reduce using rule 73 (built_in_function -> EYE .)


state 44

    (74) built_in_function -> ONES .

    (               reduce using rule 74 (built_in_function -> ONES .)


state 45

    (75) built_in_function -> ZEROS .

    (               reduce using rule 75 (built_in_function -> ZEROS .)


state 46

    (69) term -> INTNUM .

    +               reduce using rule 69 (term -> INTNUM .)
    -               reduce using rule 69 (term -> INTNUM .)
    /               reduce using rule 69 (term -> INTNUM .)
    *               reduce using rule 69 (term -> INTNUM .)
    EQL             reduce using rule 69 (term -> INTNUM .)
    NEQ             reduce using rule 69 (term -> INTNUM .)
    GT              reduce using rule 69 (term -> INTNUM .)
    GTE             reduce using rule 69 (term -> INTNUM .)
    LT              reduce using rule 69 (term -> INTNUM .)
    LTE             reduce using rule 69 (term -> INTNUM .)
    TRANSPOSE       reduce using rule 69 (term -> INTNUM .)
    ,               reduce using rule 69 (term -> INTNUM .)
    ;               reduce using rule 69 (term -> INTNUM .)
    :               reduce using rule 69 (term -> INTNUM .)
    ]               reduce using rule 69 (term -> INTNUM .)
    )               reduce using rule 69 (term -> INTNUM .)
    {               reduce using rule 69 (term -> INTNUM .)
    ID              reduce using rule 69 (term -> INTNUM .)
    PRINT           reduce using rule 69 (term -> INTNUM .)
    CONTINUE        reduce using rule 69 (term -> INTNUM .)
    BREAK           reduce using rule 69 (term -> INTNUM .)
    RETURN          reduce using rule 69 (term -> INTNUM .)
    IF              reduce using rule 69 (term -> INTNUM .)
    FOR             reduce using rule 69 (term -> INTNUM .)
    WHILE           reduce using rule 69 (term -> INTNUM .)


state 47

    (70) term -> FLOATNUM .

    +               reduce using rule 70 (term -> FLOATNUM .)
    -               reduce using rule 70 (term -> FLOATNUM .)
    /               reduce using rule 70 (term -> FLOATNUM .)
    *               reduce using rule 70 (term -> FLOATNUM .)
    EQL             reduce using rule 70 (term -> FLOATNUM .)
    NEQ             reduce using rule 70 (term -> FLOATNUM .)
    GT              reduce using rule 70 (term -> FLOATNUM .)
    GTE             reduce using rule 70 (term -> FLOATNUM .)
    LT              reduce using rule 70 (term -> FLOATNUM .)
    LTE             reduce using rule 70 (term -> FLOATNUM .)
    TRANSPOSE       reduce using rule 70 (term -> FLOATNUM .)
    ,               reduce using rule 70 (term -> FLOATNUM .)
    ;               reduce using rule 70 (term -> FLOATNUM .)
    :               reduce using rule 70 (term -> FLOATNUM .)
    ]               reduce using rule 70 (term -> FLOATNUM .)
    )               reduce using rule 70 (term -> FLOATNUM .)
    {               reduce using rule 70 (term -> FLOATNUM .)
    ID              reduce using rule 70 (term -> FLOATNUM .)
    PRINT           reduce using rule 70 (term -> FLOATNUM .)
    CONTINUE        reduce using rule 70 (term -> FLOATNUM .)
    BREAK           reduce using rule 70 (term -> FLOATNUM .)
    RETURN          reduce using rule 70 (term -> FLOATNUM .)
    IF              reduce using rule 70 (term -> FLOATNUM .)
    FOR             reduce using rule 70 (term -> FLOATNUM .)
    WHILE           reduce using rule 70 (term -> FLOATNUM .)


state 48

    (71) term -> STR .

    +               reduce using rule 71 (term -> STR .)
    -               reduce using rule 71 (term -> STR .)
    /               reduce using rule 71 (term -> STR .)
    *               reduce using rule 71 (term -> STR .)
    EQL             reduce using rule 71 (term -> STR .)
    NEQ             reduce using rule 71 (term -> STR .)
    GT              reduce using rule 71 (term -> STR .)
    GTE             reduce using rule 71 (term -> STR .)
    LT              reduce using rule 71 (term -> STR .)
    LTE             reduce using rule 71 (term -> STR .)
    TRANSPOSE       reduce using rule 71 (term -> STR .)
    ,               reduce using rule 71 (term -> STR .)
    ;               reduce using rule 71 (term -> STR .)
    :               reduce using rule 71 (term -> STR .)
    ]               reduce using rule 71 (term -> STR .)
    )               reduce using rule 71 (term -> STR .)
    {               reduce using rule 71 (term -> STR .)
    ID              reduce using rule 71 (term -> STR .)
    PRINT           reduce using rule 71 (term -> STR .)
    CONTINUE        reduce using rule 71 (term -> STR .)
    BREAK           reduce using rule 71 (term -> STR .)
    RETURN          reduce using rule 71 (term -> STR .)
    IF              reduce using rule 71 (term -> STR .)
    FOR             reduce using rule 71 (term -> STR .)
    WHILE           reduce using rule 71 (term -> STR .)


state 49

    (50) vector -> [ . vector_contents ]
    (51) vector -> [ . ]
    (52) vector_contents -> . vector_contents , vector_element
    (53) vector_contents -> . vector_element
    (54) vector_element -> . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    ]               shift and go to state 85
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    ID              shift and go to state 77
    [               shift and go to state 49

    vector_contents                shift and go to state 84
    vector_element                 shift and go to state 86
    term                           shift and go to state 87
    vector                         shift and go to state 76

state 50

    (16) return -> RETURN expression .
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    ;               reduce using rule 16 (return -> RETURN expression .)
    +               shift and go to state 62
    -               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    EQL             shift and go to state 66
    NEQ             shift and go to state 67
    GT              shift and go to state 68
    GTE             shift and go to state 69
    LT              shift and go to state 70
    LTE             shift and go to state 71
    TRANSPOSE       shift and go to state 72


state 51

    (62) if -> IF condition . nested
    (63) if -> IF condition . nested ELSE nested
    (65) nested -> . { statements_list }
    (66) nested -> . statement
    (5) statement -> . assignment ;
    (6) statement -> . print ;
    (7) statement -> . continue ;
    (8) statement -> . break ;
    (9) statement -> . return ;
    (10) statement -> . if
    (11) statement -> . for
    (12) statement -> . while
    (21) assignment -> . ID assign_symbol expression
    (22) assignment -> . ID slice assign_symbol expression
    (18) print -> . PRINT coma_separated
    (17) continue -> . CONTINUE
    (15) break -> . BREAK
    (16) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (13) for -> . FOR ID ASSIGN expression : expression nested
    (14) while -> . WHILE condition nested

    {               shift and go to state 89
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    CONTINUE        shift and go to state 15
    BREAK           shift and go to state 16
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 20

    nested                         shift and go to state 88
    statement                      shift and go to state 90
    assignment                     shift and go to state 5
    print                          shift and go to state 6
    continue                       shift and go to state 7
    break                          shift and go to state 8
    return                         shift and go to state 9
    if                             shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12

state 52

    (64) condition -> ( . expression )
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    [               shift and go to state 49

    expression                     shift and go to state 91
    built_in_function              shift and go to state 37
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 53

    (13) for -> FOR ID . ASSIGN expression : expression nested

    ASSIGN          shift and go to state 92


state 54

    (14) while -> WHILE condition . nested
    (65) nested -> . { statements_list }
    (66) nested -> . statement
    (5) statement -> . assignment ;
    (6) statement -> . print ;
    (7) statement -> . continue ;
    (8) statement -> . break ;
    (9) statement -> . return ;
    (10) statement -> . if
    (11) statement -> . for
    (12) statement -> . while
    (21) assignment -> . ID assign_symbol expression
    (22) assignment -> . ID slice assign_symbol expression
    (18) print -> . PRINT coma_separated
    (17) continue -> . CONTINUE
    (15) break -> . BREAK
    (16) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (13) for -> . FOR ID ASSIGN expression : expression nested
    (14) while -> . WHILE condition nested

    {               shift and go to state 89
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    CONTINUE        shift and go to state 15
    BREAK           shift and go to state 16
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 20

    nested                         shift and go to state 93
    statement                      shift and go to state 90
    assignment                     shift and go to state 5
    print                          shift and go to state 6
    continue                       shift and go to state 7
    break                          shift and go to state 8
    return                         shift and go to state 9
    if                             shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12

state 55

    (21) assignment -> ID assign_symbol expression .
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    ;               reduce using rule 21 (assignment -> ID assign_symbol expression .)
    +               shift and go to state 62
    -               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    EQL             shift and go to state 66
    NEQ             shift and go to state 67
    GT              shift and go to state 68
    GTE             shift and go to state 69
    LT              shift and go to state 70
    LTE             shift and go to state 71
    TRANSPOSE       shift and go to state 72


state 56

    (22) assignment -> ID slice assign_symbol . expression
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    [               shift and go to state 49

    expression                     shift and go to state 94
    built_in_function              shift and go to state 37
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 57

    (55) slice -> [ slice_contents . ]
    (56) slice_contents -> slice_contents . , range

    ]               shift and go to state 95
    ,               shift and go to state 96


state 58

    (57) slice_contents -> range .

    ]               reduce using rule 57 (slice_contents -> range .)
    ,               reduce using rule 57 (slice_contents -> range .)


state 59

    (58) range -> expression . : expression
    (59) range -> expression . :
    (61) range -> expression .
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    :               shift and go to state 97
    ]               reduce using rule 61 (range -> expression .)
    ,               reduce using rule 61 (range -> expression .)
    +               shift and go to state 62
    -               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    EQL             shift and go to state 66
    NEQ             shift and go to state 67
    GT              shift and go to state 68
    GTE             shift and go to state 69
    LT              shift and go to state 70
    LTE             shift and go to state 71
    TRANSPOSE       shift and go to state 72


state 60

    (60) range -> : . expression
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    [               shift and go to state 49

    expression                     shift and go to state 98
    built_in_function              shift and go to state 37
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 61

    (19) coma_separated -> coma_separated , . expression
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    [               shift and go to state 49

    expression                     shift and go to state 99
    built_in_function              shift and go to state 37
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 62

    (32) expression -> expression + . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    ID              shift and go to state 77
    [               shift and go to state 49

    term                           shift and go to state 100
    vector                         shift and go to state 76

state 63

    (33) expression -> expression - . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    ID              shift and go to state 77
    [               shift and go to state 49

    term                           shift and go to state 101
    vector                         shift and go to state 76

state 64

    (34) expression -> expression / . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    ID              shift and go to state 77
    [               shift and go to state 49

    term                           shift and go to state 102
    vector                         shift and go to state 76

state 65

    (35) expression -> expression * . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    ID              shift and go to state 77
    [               shift and go to state 49

    term                           shift and go to state 103
    vector                         shift and go to state 76

state 66

    (36) expression -> expression EQL . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    ID              shift and go to state 77
    [               shift and go to state 49

    term                           shift and go to state 104
    vector                         shift and go to state 76

state 67

    (37) expression -> expression NEQ . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    ID              shift and go to state 77
    [               shift and go to state 49

    term                           shift and go to state 105
    vector                         shift and go to state 76

state 68

    (38) expression -> expression GT . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    ID              shift and go to state 77
    [               shift and go to state 49

    term                           shift and go to state 106
    vector                         shift and go to state 76

state 69

    (39) expression -> expression GTE . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    ID              shift and go to state 77
    [               shift and go to state 49

    term                           shift and go to state 107
    vector                         shift and go to state 76

state 70

    (40) expression -> expression LT . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    ID              shift and go to state 77
    [               shift and go to state 49

    term                           shift and go to state 108
    vector                         shift and go to state 76

state 71

    (41) expression -> expression LTE . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    ID              shift and go to state 77
    [               shift and go to state 49

    term                           shift and go to state 109
    vector                         shift and go to state 76

state 72

    (43) expression -> expression TRANSPOSE .

    +               reduce using rule 43 (expression -> expression TRANSPOSE .)
    -               reduce using rule 43 (expression -> expression TRANSPOSE .)
    /               reduce using rule 43 (expression -> expression TRANSPOSE .)
    *               reduce using rule 43 (expression -> expression TRANSPOSE .)
    EQL             reduce using rule 43 (expression -> expression TRANSPOSE .)
    NEQ             reduce using rule 43 (expression -> expression TRANSPOSE .)
    GT              reduce using rule 43 (expression -> expression TRANSPOSE .)
    GTE             reduce using rule 43 (expression -> expression TRANSPOSE .)
    LT              reduce using rule 43 (expression -> expression TRANSPOSE .)
    LTE             reduce using rule 43 (expression -> expression TRANSPOSE .)
    TRANSPOSE       reduce using rule 43 (expression -> expression TRANSPOSE .)
    ,               reduce using rule 43 (expression -> expression TRANSPOSE .)
    ;               reduce using rule 43 (expression -> expression TRANSPOSE .)
    :               reduce using rule 43 (expression -> expression TRANSPOSE .)
    ]               reduce using rule 43 (expression -> expression TRANSPOSE .)
    )               reduce using rule 43 (expression -> expression TRANSPOSE .)
    {               reduce using rule 43 (expression -> expression TRANSPOSE .)
    ID              reduce using rule 43 (expression -> expression TRANSPOSE .)
    PRINT           reduce using rule 43 (expression -> expression TRANSPOSE .)
    CONTINUE        reduce using rule 43 (expression -> expression TRANSPOSE .)
    BREAK           reduce using rule 43 (expression -> expression TRANSPOSE .)
    RETURN          reduce using rule 43 (expression -> expression TRANSPOSE .)
    IF              reduce using rule 43 (expression -> expression TRANSPOSE .)
    FOR             reduce using rule 43 (expression -> expression TRANSPOSE .)
    WHILE           reduce using rule 43 (expression -> expression TRANSPOSE .)


state 73

    (28) expression -> built_in_function ( . expression_list )
    (29) expression_list -> . expression_list , expression
    (30) expression_list -> . expression
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    [               shift and go to state 49

    built_in_function              shift and go to state 37
    expression_list                shift and go to state 110
    expression                     shift and go to state 111
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 74

    (67) term -> ( expression . )
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    )               shift and go to state 112
    +               shift and go to state 62
    -               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    EQL             shift and go to state 66
    NEQ             shift and go to state 67
    GT              shift and go to state 68
    GTE             shift and go to state 69
    LT              shift and go to state 70
    LTE             shift and go to state 71
    TRANSPOSE       shift and go to state 72


state 75

    (42) expression -> - term .

    +               reduce using rule 42 (expression -> - term .)
    -               reduce using rule 42 (expression -> - term .)
    /               reduce using rule 42 (expression -> - term .)
    *               reduce using rule 42 (expression -> - term .)
    EQL             reduce using rule 42 (expression -> - term .)
    NEQ             reduce using rule 42 (expression -> - term .)
    GT              reduce using rule 42 (expression -> - term .)
    GTE             reduce using rule 42 (expression -> - term .)
    LT              reduce using rule 42 (expression -> - term .)
    LTE             reduce using rule 42 (expression -> - term .)
    TRANSPOSE       reduce using rule 42 (expression -> - term .)
    ,               reduce using rule 42 (expression -> - term .)
    ;               reduce using rule 42 (expression -> - term .)
    :               reduce using rule 42 (expression -> - term .)
    ]               reduce using rule 42 (expression -> - term .)
    )               reduce using rule 42 (expression -> - term .)
    {               reduce using rule 42 (expression -> - term .)
    ID              reduce using rule 42 (expression -> - term .)
    PRINT           reduce using rule 42 (expression -> - term .)
    CONTINUE        reduce using rule 42 (expression -> - term .)
    BREAK           reduce using rule 42 (expression -> - term .)
    RETURN          reduce using rule 42 (expression -> - term .)
    IF              reduce using rule 42 (expression -> - term .)
    FOR             reduce using rule 42 (expression -> - term .)
    WHILE           reduce using rule 42 (expression -> - term .)


state 76

    (68) term -> vector .

    +               reduce using rule 68 (term -> vector .)
    -               reduce using rule 68 (term -> vector .)
    /               reduce using rule 68 (term -> vector .)
    *               reduce using rule 68 (term -> vector .)
    EQL             reduce using rule 68 (term -> vector .)
    NEQ             reduce using rule 68 (term -> vector .)
    GT              reduce using rule 68 (term -> vector .)
    GTE             reduce using rule 68 (term -> vector .)
    LT              reduce using rule 68 (term -> vector .)
    LTE             reduce using rule 68 (term -> vector .)
    TRANSPOSE       reduce using rule 68 (term -> vector .)
    ,               reduce using rule 68 (term -> vector .)
    ;               reduce using rule 68 (term -> vector .)
    :               reduce using rule 68 (term -> vector .)
    ]               reduce using rule 68 (term -> vector .)
    )               reduce using rule 68 (term -> vector .)
    {               reduce using rule 68 (term -> vector .)
    ID              reduce using rule 68 (term -> vector .)
    PRINT           reduce using rule 68 (term -> vector .)
    CONTINUE        reduce using rule 68 (term -> vector .)
    BREAK           reduce using rule 68 (term -> vector .)
    RETURN          reduce using rule 68 (term -> vector .)
    IF              reduce using rule 68 (term -> vector .)
    FOR             reduce using rule 68 (term -> vector .)
    WHILE           reduce using rule 68 (term -> vector .)


state 77

    (72) term -> ID .

    +               reduce using rule 72 (term -> ID .)
    -               reduce using rule 72 (term -> ID .)
    /               reduce using rule 72 (term -> ID .)
    *               reduce using rule 72 (term -> ID .)
    EQL             reduce using rule 72 (term -> ID .)
    NEQ             reduce using rule 72 (term -> ID .)
    GT              reduce using rule 72 (term -> ID .)
    GTE             reduce using rule 72 (term -> ID .)
    LT              reduce using rule 72 (term -> ID .)
    LTE             reduce using rule 72 (term -> ID .)
    TRANSPOSE       reduce using rule 72 (term -> ID .)
    ,               reduce using rule 72 (term -> ID .)
    ;               reduce using rule 72 (term -> ID .)
    :               reduce using rule 72 (term -> ID .)
    ]               reduce using rule 72 (term -> ID .)
    )               reduce using rule 72 (term -> ID .)
    {               reduce using rule 72 (term -> ID .)
    ID              reduce using rule 72 (term -> ID .)
    PRINT           reduce using rule 72 (term -> ID .)
    CONTINUE        reduce using rule 72 (term -> ID .)
    BREAK           reduce using rule 72 (term -> ID .)
    RETURN          reduce using rule 72 (term -> ID .)
    IF              reduce using rule 72 (term -> ID .)
    FOR             reduce using rule 72 (term -> ID .)
    WHILE           reduce using rule 72 (term -> ID .)


state 78

    (44) expression -> ID dot_operation . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    ID              shift and go to state 77
    [               shift and go to state 49

    term                           shift and go to state 113
    vector                         shift and go to state 76

state 79

    (46) dot_operation -> DOTADD .

    (               reduce using rule 46 (dot_operation -> DOTADD .)
    INTNUM          reduce using rule 46 (dot_operation -> DOTADD .)
    FLOATNUM        reduce using rule 46 (dot_operation -> DOTADD .)
    STR             reduce using rule 46 (dot_operation -> DOTADD .)
    ID              reduce using rule 46 (dot_operation -> DOTADD .)
    [               reduce using rule 46 (dot_operation -> DOTADD .)


state 80

    (47) dot_operation -> DOTSUB .

    (               reduce using rule 47 (dot_operation -> DOTSUB .)
    INTNUM          reduce using rule 47 (dot_operation -> DOTSUB .)
    FLOATNUM        reduce using rule 47 (dot_operation -> DOTSUB .)
    STR             reduce using rule 47 (dot_operation -> DOTSUB .)
    ID              reduce using rule 47 (dot_operation -> DOTSUB .)
    [               reduce using rule 47 (dot_operation -> DOTSUB .)


state 81

    (48) dot_operation -> DOTMUL .

    (               reduce using rule 48 (dot_operation -> DOTMUL .)
    INTNUM          reduce using rule 48 (dot_operation -> DOTMUL .)
    FLOATNUM        reduce using rule 48 (dot_operation -> DOTMUL .)
    STR             reduce using rule 48 (dot_operation -> DOTMUL .)
    ID              reduce using rule 48 (dot_operation -> DOTMUL .)
    [               reduce using rule 48 (dot_operation -> DOTMUL .)


state 82

    (49) dot_operation -> DOTDIV .

    (               reduce using rule 49 (dot_operation -> DOTDIV .)
    INTNUM          reduce using rule 49 (dot_operation -> DOTDIV .)
    FLOATNUM        reduce using rule 49 (dot_operation -> DOTDIV .)
    STR             reduce using rule 49 (dot_operation -> DOTDIV .)
    ID              reduce using rule 49 (dot_operation -> DOTDIV .)
    [               reduce using rule 49 (dot_operation -> DOTDIV .)


state 83

    (45) expression -> vector dot_operation . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    ID              shift and go to state 77
    [               shift and go to state 49

    vector                         shift and go to state 76
    term                           shift and go to state 114

state 84

    (50) vector -> [ vector_contents . ]
    (52) vector_contents -> vector_contents . , vector_element

    ]               shift and go to state 115
    ,               shift and go to state 116


state 85

    (51) vector -> [ ] .

    DOTADD          reduce using rule 51 (vector -> [ ] .)
    DOTSUB          reduce using rule 51 (vector -> [ ] .)
    DOTMUL          reduce using rule 51 (vector -> [ ] .)
    DOTDIV          reduce using rule 51 (vector -> [ ] .)
    +               reduce using rule 51 (vector -> [ ] .)
    -               reduce using rule 51 (vector -> [ ] .)
    /               reduce using rule 51 (vector -> [ ] .)
    *               reduce using rule 51 (vector -> [ ] .)
    EQL             reduce using rule 51 (vector -> [ ] .)
    NEQ             reduce using rule 51 (vector -> [ ] .)
    GT              reduce using rule 51 (vector -> [ ] .)
    GTE             reduce using rule 51 (vector -> [ ] .)
    LT              reduce using rule 51 (vector -> [ ] .)
    LTE             reduce using rule 51 (vector -> [ ] .)
    TRANSPOSE       reduce using rule 51 (vector -> [ ] .)
    ,               reduce using rule 51 (vector -> [ ] .)
    ;               reduce using rule 51 (vector -> [ ] .)
    :               reduce using rule 51 (vector -> [ ] .)
    ]               reduce using rule 51 (vector -> [ ] .)
    )               reduce using rule 51 (vector -> [ ] .)
    {               reduce using rule 51 (vector -> [ ] .)
    ID              reduce using rule 51 (vector -> [ ] .)
    PRINT           reduce using rule 51 (vector -> [ ] .)
    CONTINUE        reduce using rule 51 (vector -> [ ] .)
    BREAK           reduce using rule 51 (vector -> [ ] .)
    RETURN          reduce using rule 51 (vector -> [ ] .)
    IF              reduce using rule 51 (vector -> [ ] .)
    FOR             reduce using rule 51 (vector -> [ ] .)
    WHILE           reduce using rule 51 (vector -> [ ] .)


state 86

    (53) vector_contents -> vector_element .

    ]               reduce using rule 53 (vector_contents -> vector_element .)
    ,               reduce using rule 53 (vector_contents -> vector_element .)


state 87

    (54) vector_element -> term .

    ]               reduce using rule 54 (vector_element -> term .)
    ,               reduce using rule 54 (vector_element -> term .)


state 88

    (62) if -> IF condition nested .
    (63) if -> IF condition nested . ELSE nested

    ID              reduce using rule 62 (if -> IF condition nested .)
    PRINT           reduce using rule 62 (if -> IF condition nested .)
    CONTINUE        reduce using rule 62 (if -> IF condition nested .)
    BREAK           reduce using rule 62 (if -> IF condition nested .)
    RETURN          reduce using rule 62 (if -> IF condition nested .)
    IF              reduce using rule 62 (if -> IF condition nested .)
    FOR             reduce using rule 62 (if -> IF condition nested .)
    WHILE           reduce using rule 62 (if -> IF condition nested .)
    $end            reduce using rule 62 (if -> IF condition nested .)
    }               reduce using rule 62 (if -> IF condition nested .)
    ELSE            shift and go to state 117

  ! ELSE            [ reduce using rule 62 (if -> IF condition nested .) ]


state 89

    (65) nested -> { . statements_list }
    (3) statements_list -> . statements_list statement
    (4) statements_list -> . statement
    (5) statement -> . assignment ;
    (6) statement -> . print ;
    (7) statement -> . continue ;
    (8) statement -> . break ;
    (9) statement -> . return ;
    (10) statement -> . if
    (11) statement -> . for
    (12) statement -> . while
    (21) assignment -> . ID assign_symbol expression
    (22) assignment -> . ID slice assign_symbol expression
    (18) print -> . PRINT coma_separated
    (17) continue -> . CONTINUE
    (15) break -> . BREAK
    (16) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (13) for -> . FOR ID ASSIGN expression : expression nested
    (14) while -> . WHILE condition nested

    ID              shift and go to state 13
    PRINT           shift and go to state 14
    CONTINUE        shift and go to state 15
    BREAK           shift and go to state 16
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 20

    statements_list                shift and go to state 118
    statement                      shift and go to state 4
    assignment                     shift and go to state 5
    print                          shift and go to state 6
    continue                       shift and go to state 7
    break                          shift and go to state 8
    return                         shift and go to state 9
    if                             shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12

state 90

    (66) nested -> statement .

    ELSE            reduce using rule 66 (nested -> statement .)
    ID              reduce using rule 66 (nested -> statement .)
    PRINT           reduce using rule 66 (nested -> statement .)
    CONTINUE        reduce using rule 66 (nested -> statement .)
    BREAK           reduce using rule 66 (nested -> statement .)
    RETURN          reduce using rule 66 (nested -> statement .)
    IF              reduce using rule 66 (nested -> statement .)
    FOR             reduce using rule 66 (nested -> statement .)
    WHILE           reduce using rule 66 (nested -> statement .)
    $end            reduce using rule 66 (nested -> statement .)
    }               reduce using rule 66 (nested -> statement .)


state 91

    (64) condition -> ( expression . )
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    )               shift and go to state 119
    +               shift and go to state 62
    -               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    EQL             shift and go to state 66
    NEQ             shift and go to state 67
    GT              shift and go to state 68
    GTE             shift and go to state 69
    LT              shift and go to state 70
    LTE             shift and go to state 71
    TRANSPOSE       shift and go to state 72


state 92

    (13) for -> FOR ID ASSIGN . expression : expression nested
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    [               shift and go to state 49

    expression                     shift and go to state 120
    built_in_function              shift and go to state 37
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 93

    (14) while -> WHILE condition nested .

    ID              reduce using rule 14 (while -> WHILE condition nested .)
    PRINT           reduce using rule 14 (while -> WHILE condition nested .)
    CONTINUE        reduce using rule 14 (while -> WHILE condition nested .)
    BREAK           reduce using rule 14 (while -> WHILE condition nested .)
    RETURN          reduce using rule 14 (while -> WHILE condition nested .)
    IF              reduce using rule 14 (while -> WHILE condition nested .)
    FOR             reduce using rule 14 (while -> WHILE condition nested .)
    WHILE           reduce using rule 14 (while -> WHILE condition nested .)
    $end            reduce using rule 14 (while -> WHILE condition nested .)
    ELSE            reduce using rule 14 (while -> WHILE condition nested .)
    }               reduce using rule 14 (while -> WHILE condition nested .)


state 94

    (22) assignment -> ID slice assign_symbol expression .
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    ;               reduce using rule 22 (assignment -> ID slice assign_symbol expression .)
    +               shift and go to state 62
    -               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    EQL             shift and go to state 66
    NEQ             shift and go to state 67
    GT              shift and go to state 68
    GTE             shift and go to state 69
    LT              shift and go to state 70
    LTE             shift and go to state 71
    TRANSPOSE       shift and go to state 72


state 95

    (55) slice -> [ slice_contents ] .

    ASSIGN          reduce using rule 55 (slice -> [ slice_contents ] .)
    SUBASSIGN       reduce using rule 55 (slice -> [ slice_contents ] .)
    ADDASSIGN       reduce using rule 55 (slice -> [ slice_contents ] .)
    DIVASSIGN       reduce using rule 55 (slice -> [ slice_contents ] .)
    MULTASSIGN      reduce using rule 55 (slice -> [ slice_contents ] .)


state 96

    (56) slice_contents -> slice_contents , . range
    (58) range -> . expression : expression
    (59) range -> . expression :
    (60) range -> . : expression
    (61) range -> . expression
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    :               shift and go to state 60
    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    [               shift and go to state 49

    range                          shift and go to state 121
    expression                     shift and go to state 59
    built_in_function              shift and go to state 37
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 97

    (58) range -> expression : . expression
    (59) range -> expression : .
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    ]               reduce using rule 59 (range -> expression : .)
    ,               reduce using rule 59 (range -> expression : .)
    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    [               shift and go to state 49

    expression                     shift and go to state 122
    built_in_function              shift and go to state 37
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 98

    (60) range -> : expression .
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    ]               reduce using rule 60 (range -> : expression .)
    ,               reduce using rule 60 (range -> : expression .)
    +               shift and go to state 62
    -               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    EQL             shift and go to state 66
    NEQ             shift and go to state 67
    GT              shift and go to state 68
    GTE             shift and go to state 69
    LT              shift and go to state 70
    LTE             shift and go to state 71
    TRANSPOSE       shift and go to state 72


state 99

    (19) coma_separated -> coma_separated , expression .
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    ,               reduce using rule 19 (coma_separated -> coma_separated , expression .)
    ;               reduce using rule 19 (coma_separated -> coma_separated , expression .)
    +               shift and go to state 62
    -               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    EQL             shift and go to state 66
    NEQ             shift and go to state 67
    GT              shift and go to state 68
    GTE             shift and go to state 69
    LT              shift and go to state 70
    LTE             shift and go to state 71
    TRANSPOSE       shift and go to state 72


state 100

    (32) expression -> expression + term .

    +               reduce using rule 32 (expression -> expression + term .)
    -               reduce using rule 32 (expression -> expression + term .)
    /               reduce using rule 32 (expression -> expression + term .)
    *               reduce using rule 32 (expression -> expression + term .)
    EQL             reduce using rule 32 (expression -> expression + term .)
    NEQ             reduce using rule 32 (expression -> expression + term .)
    GT              reduce using rule 32 (expression -> expression + term .)
    GTE             reduce using rule 32 (expression -> expression + term .)
    LT              reduce using rule 32 (expression -> expression + term .)
    LTE             reduce using rule 32 (expression -> expression + term .)
    TRANSPOSE       reduce using rule 32 (expression -> expression + term .)
    ,               reduce using rule 32 (expression -> expression + term .)
    ;               reduce using rule 32 (expression -> expression + term .)
    :               reduce using rule 32 (expression -> expression + term .)
    ]               reduce using rule 32 (expression -> expression + term .)
    )               reduce using rule 32 (expression -> expression + term .)
    {               reduce using rule 32 (expression -> expression + term .)
    ID              reduce using rule 32 (expression -> expression + term .)
    PRINT           reduce using rule 32 (expression -> expression + term .)
    CONTINUE        reduce using rule 32 (expression -> expression + term .)
    BREAK           reduce using rule 32 (expression -> expression + term .)
    RETURN          reduce using rule 32 (expression -> expression + term .)
    IF              reduce using rule 32 (expression -> expression + term .)
    FOR             reduce using rule 32 (expression -> expression + term .)
    WHILE           reduce using rule 32 (expression -> expression + term .)


state 101

    (33) expression -> expression - term .

    +               reduce using rule 33 (expression -> expression - term .)
    -               reduce using rule 33 (expression -> expression - term .)
    /               reduce using rule 33 (expression -> expression - term .)
    *               reduce using rule 33 (expression -> expression - term .)
    EQL             reduce using rule 33 (expression -> expression - term .)
    NEQ             reduce using rule 33 (expression -> expression - term .)
    GT              reduce using rule 33 (expression -> expression - term .)
    GTE             reduce using rule 33 (expression -> expression - term .)
    LT              reduce using rule 33 (expression -> expression - term .)
    LTE             reduce using rule 33 (expression -> expression - term .)
    TRANSPOSE       reduce using rule 33 (expression -> expression - term .)
    ,               reduce using rule 33 (expression -> expression - term .)
    ;               reduce using rule 33 (expression -> expression - term .)
    :               reduce using rule 33 (expression -> expression - term .)
    ]               reduce using rule 33 (expression -> expression - term .)
    )               reduce using rule 33 (expression -> expression - term .)
    {               reduce using rule 33 (expression -> expression - term .)
    ID              reduce using rule 33 (expression -> expression - term .)
    PRINT           reduce using rule 33 (expression -> expression - term .)
    CONTINUE        reduce using rule 33 (expression -> expression - term .)
    BREAK           reduce using rule 33 (expression -> expression - term .)
    RETURN          reduce using rule 33 (expression -> expression - term .)
    IF              reduce using rule 33 (expression -> expression - term .)
    FOR             reduce using rule 33 (expression -> expression - term .)
    WHILE           reduce using rule 33 (expression -> expression - term .)


state 102

    (34) expression -> expression / term .

    +               reduce using rule 34 (expression -> expression / term .)
    -               reduce using rule 34 (expression -> expression / term .)
    /               reduce using rule 34 (expression -> expression / term .)
    *               reduce using rule 34 (expression -> expression / term .)
    EQL             reduce using rule 34 (expression -> expression / term .)
    NEQ             reduce using rule 34 (expression -> expression / term .)
    GT              reduce using rule 34 (expression -> expression / term .)
    GTE             reduce using rule 34 (expression -> expression / term .)
    LT              reduce using rule 34 (expression -> expression / term .)
    LTE             reduce using rule 34 (expression -> expression / term .)
    TRANSPOSE       reduce using rule 34 (expression -> expression / term .)
    ,               reduce using rule 34 (expression -> expression / term .)
    ;               reduce using rule 34 (expression -> expression / term .)
    :               reduce using rule 34 (expression -> expression / term .)
    ]               reduce using rule 34 (expression -> expression / term .)
    )               reduce using rule 34 (expression -> expression / term .)
    {               reduce using rule 34 (expression -> expression / term .)
    ID              reduce using rule 34 (expression -> expression / term .)
    PRINT           reduce using rule 34 (expression -> expression / term .)
    CONTINUE        reduce using rule 34 (expression -> expression / term .)
    BREAK           reduce using rule 34 (expression -> expression / term .)
    RETURN          reduce using rule 34 (expression -> expression / term .)
    IF              reduce using rule 34 (expression -> expression / term .)
    FOR             reduce using rule 34 (expression -> expression / term .)
    WHILE           reduce using rule 34 (expression -> expression / term .)


state 103

    (35) expression -> expression * term .

    +               reduce using rule 35 (expression -> expression * term .)
    -               reduce using rule 35 (expression -> expression * term .)
    /               reduce using rule 35 (expression -> expression * term .)
    *               reduce using rule 35 (expression -> expression * term .)
    EQL             reduce using rule 35 (expression -> expression * term .)
    NEQ             reduce using rule 35 (expression -> expression * term .)
    GT              reduce using rule 35 (expression -> expression * term .)
    GTE             reduce using rule 35 (expression -> expression * term .)
    LT              reduce using rule 35 (expression -> expression * term .)
    LTE             reduce using rule 35 (expression -> expression * term .)
    TRANSPOSE       reduce using rule 35 (expression -> expression * term .)
    ,               reduce using rule 35 (expression -> expression * term .)
    ;               reduce using rule 35 (expression -> expression * term .)
    :               reduce using rule 35 (expression -> expression * term .)
    ]               reduce using rule 35 (expression -> expression * term .)
    )               reduce using rule 35 (expression -> expression * term .)
    {               reduce using rule 35 (expression -> expression * term .)
    ID              reduce using rule 35 (expression -> expression * term .)
    PRINT           reduce using rule 35 (expression -> expression * term .)
    CONTINUE        reduce using rule 35 (expression -> expression * term .)
    BREAK           reduce using rule 35 (expression -> expression * term .)
    RETURN          reduce using rule 35 (expression -> expression * term .)
    IF              reduce using rule 35 (expression -> expression * term .)
    FOR             reduce using rule 35 (expression -> expression * term .)
    WHILE           reduce using rule 35 (expression -> expression * term .)


state 104

    (36) expression -> expression EQL term .

    +               reduce using rule 36 (expression -> expression EQL term .)
    -               reduce using rule 36 (expression -> expression EQL term .)
    /               reduce using rule 36 (expression -> expression EQL term .)
    *               reduce using rule 36 (expression -> expression EQL term .)
    EQL             reduce using rule 36 (expression -> expression EQL term .)
    NEQ             reduce using rule 36 (expression -> expression EQL term .)
    GT              reduce using rule 36 (expression -> expression EQL term .)
    GTE             reduce using rule 36 (expression -> expression EQL term .)
    LT              reduce using rule 36 (expression -> expression EQL term .)
    LTE             reduce using rule 36 (expression -> expression EQL term .)
    TRANSPOSE       reduce using rule 36 (expression -> expression EQL term .)
    ,               reduce using rule 36 (expression -> expression EQL term .)
    ;               reduce using rule 36 (expression -> expression EQL term .)
    :               reduce using rule 36 (expression -> expression EQL term .)
    ]               reduce using rule 36 (expression -> expression EQL term .)
    )               reduce using rule 36 (expression -> expression EQL term .)
    {               reduce using rule 36 (expression -> expression EQL term .)
    ID              reduce using rule 36 (expression -> expression EQL term .)
    PRINT           reduce using rule 36 (expression -> expression EQL term .)
    CONTINUE        reduce using rule 36 (expression -> expression EQL term .)
    BREAK           reduce using rule 36 (expression -> expression EQL term .)
    RETURN          reduce using rule 36 (expression -> expression EQL term .)
    IF              reduce using rule 36 (expression -> expression EQL term .)
    FOR             reduce using rule 36 (expression -> expression EQL term .)
    WHILE           reduce using rule 36 (expression -> expression EQL term .)


state 105

    (37) expression -> expression NEQ term .

    +               reduce using rule 37 (expression -> expression NEQ term .)
    -               reduce using rule 37 (expression -> expression NEQ term .)
    /               reduce using rule 37 (expression -> expression NEQ term .)
    *               reduce using rule 37 (expression -> expression NEQ term .)
    EQL             reduce using rule 37 (expression -> expression NEQ term .)
    NEQ             reduce using rule 37 (expression -> expression NEQ term .)
    GT              reduce using rule 37 (expression -> expression NEQ term .)
    GTE             reduce using rule 37 (expression -> expression NEQ term .)
    LT              reduce using rule 37 (expression -> expression NEQ term .)
    LTE             reduce using rule 37 (expression -> expression NEQ term .)
    TRANSPOSE       reduce using rule 37 (expression -> expression NEQ term .)
    ,               reduce using rule 37 (expression -> expression NEQ term .)
    ;               reduce using rule 37 (expression -> expression NEQ term .)
    :               reduce using rule 37 (expression -> expression NEQ term .)
    ]               reduce using rule 37 (expression -> expression NEQ term .)
    )               reduce using rule 37 (expression -> expression NEQ term .)
    {               reduce using rule 37 (expression -> expression NEQ term .)
    ID              reduce using rule 37 (expression -> expression NEQ term .)
    PRINT           reduce using rule 37 (expression -> expression NEQ term .)
    CONTINUE        reduce using rule 37 (expression -> expression NEQ term .)
    BREAK           reduce using rule 37 (expression -> expression NEQ term .)
    RETURN          reduce using rule 37 (expression -> expression NEQ term .)
    IF              reduce using rule 37 (expression -> expression NEQ term .)
    FOR             reduce using rule 37 (expression -> expression NEQ term .)
    WHILE           reduce using rule 37 (expression -> expression NEQ term .)


state 106

    (38) expression -> expression GT term .

    +               reduce using rule 38 (expression -> expression GT term .)
    -               reduce using rule 38 (expression -> expression GT term .)
    /               reduce using rule 38 (expression -> expression GT term .)
    *               reduce using rule 38 (expression -> expression GT term .)
    EQL             reduce using rule 38 (expression -> expression GT term .)
    NEQ             reduce using rule 38 (expression -> expression GT term .)
    GT              reduce using rule 38 (expression -> expression GT term .)
    GTE             reduce using rule 38 (expression -> expression GT term .)
    LT              reduce using rule 38 (expression -> expression GT term .)
    LTE             reduce using rule 38 (expression -> expression GT term .)
    TRANSPOSE       reduce using rule 38 (expression -> expression GT term .)
    ,               reduce using rule 38 (expression -> expression GT term .)
    ;               reduce using rule 38 (expression -> expression GT term .)
    :               reduce using rule 38 (expression -> expression GT term .)
    ]               reduce using rule 38 (expression -> expression GT term .)
    )               reduce using rule 38 (expression -> expression GT term .)
    {               reduce using rule 38 (expression -> expression GT term .)
    ID              reduce using rule 38 (expression -> expression GT term .)
    PRINT           reduce using rule 38 (expression -> expression GT term .)
    CONTINUE        reduce using rule 38 (expression -> expression GT term .)
    BREAK           reduce using rule 38 (expression -> expression GT term .)
    RETURN          reduce using rule 38 (expression -> expression GT term .)
    IF              reduce using rule 38 (expression -> expression GT term .)
    FOR             reduce using rule 38 (expression -> expression GT term .)
    WHILE           reduce using rule 38 (expression -> expression GT term .)


state 107

    (39) expression -> expression GTE term .

    +               reduce using rule 39 (expression -> expression GTE term .)
    -               reduce using rule 39 (expression -> expression GTE term .)
    /               reduce using rule 39 (expression -> expression GTE term .)
    *               reduce using rule 39 (expression -> expression GTE term .)
    EQL             reduce using rule 39 (expression -> expression GTE term .)
    NEQ             reduce using rule 39 (expression -> expression GTE term .)
    GT              reduce using rule 39 (expression -> expression GTE term .)
    GTE             reduce using rule 39 (expression -> expression GTE term .)
    LT              reduce using rule 39 (expression -> expression GTE term .)
    LTE             reduce using rule 39 (expression -> expression GTE term .)
    TRANSPOSE       reduce using rule 39 (expression -> expression GTE term .)
    ,               reduce using rule 39 (expression -> expression GTE term .)
    ;               reduce using rule 39 (expression -> expression GTE term .)
    :               reduce using rule 39 (expression -> expression GTE term .)
    ]               reduce using rule 39 (expression -> expression GTE term .)
    )               reduce using rule 39 (expression -> expression GTE term .)
    {               reduce using rule 39 (expression -> expression GTE term .)
    ID              reduce using rule 39 (expression -> expression GTE term .)
    PRINT           reduce using rule 39 (expression -> expression GTE term .)
    CONTINUE        reduce using rule 39 (expression -> expression GTE term .)
    BREAK           reduce using rule 39 (expression -> expression GTE term .)
    RETURN          reduce using rule 39 (expression -> expression GTE term .)
    IF              reduce using rule 39 (expression -> expression GTE term .)
    FOR             reduce using rule 39 (expression -> expression GTE term .)
    WHILE           reduce using rule 39 (expression -> expression GTE term .)


state 108

    (40) expression -> expression LT term .

    +               reduce using rule 40 (expression -> expression LT term .)
    -               reduce using rule 40 (expression -> expression LT term .)
    /               reduce using rule 40 (expression -> expression LT term .)
    *               reduce using rule 40 (expression -> expression LT term .)
    EQL             reduce using rule 40 (expression -> expression LT term .)
    NEQ             reduce using rule 40 (expression -> expression LT term .)
    GT              reduce using rule 40 (expression -> expression LT term .)
    GTE             reduce using rule 40 (expression -> expression LT term .)
    LT              reduce using rule 40 (expression -> expression LT term .)
    LTE             reduce using rule 40 (expression -> expression LT term .)
    TRANSPOSE       reduce using rule 40 (expression -> expression LT term .)
    ,               reduce using rule 40 (expression -> expression LT term .)
    ;               reduce using rule 40 (expression -> expression LT term .)
    :               reduce using rule 40 (expression -> expression LT term .)
    ]               reduce using rule 40 (expression -> expression LT term .)
    )               reduce using rule 40 (expression -> expression LT term .)
    {               reduce using rule 40 (expression -> expression LT term .)
    ID              reduce using rule 40 (expression -> expression LT term .)
    PRINT           reduce using rule 40 (expression -> expression LT term .)
    CONTINUE        reduce using rule 40 (expression -> expression LT term .)
    BREAK           reduce using rule 40 (expression -> expression LT term .)
    RETURN          reduce using rule 40 (expression -> expression LT term .)
    IF              reduce using rule 40 (expression -> expression LT term .)
    FOR             reduce using rule 40 (expression -> expression LT term .)
    WHILE           reduce using rule 40 (expression -> expression LT term .)


state 109

    (41) expression -> expression LTE term .

    +               reduce using rule 41 (expression -> expression LTE term .)
    -               reduce using rule 41 (expression -> expression LTE term .)
    /               reduce using rule 41 (expression -> expression LTE term .)
    *               reduce using rule 41 (expression -> expression LTE term .)
    EQL             reduce using rule 41 (expression -> expression LTE term .)
    NEQ             reduce using rule 41 (expression -> expression LTE term .)
    GT              reduce using rule 41 (expression -> expression LTE term .)
    GTE             reduce using rule 41 (expression -> expression LTE term .)
    LT              reduce using rule 41 (expression -> expression LTE term .)
    LTE             reduce using rule 41 (expression -> expression LTE term .)
    TRANSPOSE       reduce using rule 41 (expression -> expression LTE term .)
    ,               reduce using rule 41 (expression -> expression LTE term .)
    ;               reduce using rule 41 (expression -> expression LTE term .)
    :               reduce using rule 41 (expression -> expression LTE term .)
    ]               reduce using rule 41 (expression -> expression LTE term .)
    )               reduce using rule 41 (expression -> expression LTE term .)
    {               reduce using rule 41 (expression -> expression LTE term .)
    ID              reduce using rule 41 (expression -> expression LTE term .)
    PRINT           reduce using rule 41 (expression -> expression LTE term .)
    CONTINUE        reduce using rule 41 (expression -> expression LTE term .)
    BREAK           reduce using rule 41 (expression -> expression LTE term .)
    RETURN          reduce using rule 41 (expression -> expression LTE term .)
    IF              reduce using rule 41 (expression -> expression LTE term .)
    FOR             reduce using rule 41 (expression -> expression LTE term .)
    WHILE           reduce using rule 41 (expression -> expression LTE term .)


state 110

    (28) expression -> built_in_function ( expression_list . )
    (29) expression_list -> expression_list . , expression

    )               shift and go to state 123
    ,               shift and go to state 124


state 111

    (30) expression_list -> expression .
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    )               reduce using rule 30 (expression_list -> expression .)
    ,               reduce using rule 30 (expression_list -> expression .)
    +               shift and go to state 62
    -               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    EQL             shift and go to state 66
    NEQ             shift and go to state 67
    GT              shift and go to state 68
    GTE             shift and go to state 69
    LT              shift and go to state 70
    LTE             shift and go to state 71
    TRANSPOSE       shift and go to state 72


state 112

    (67) term -> ( expression ) .

    +               reduce using rule 67 (term -> ( expression ) .)
    -               reduce using rule 67 (term -> ( expression ) .)
    /               reduce using rule 67 (term -> ( expression ) .)
    *               reduce using rule 67 (term -> ( expression ) .)
    EQL             reduce using rule 67 (term -> ( expression ) .)
    NEQ             reduce using rule 67 (term -> ( expression ) .)
    GT              reduce using rule 67 (term -> ( expression ) .)
    GTE             reduce using rule 67 (term -> ( expression ) .)
    LT              reduce using rule 67 (term -> ( expression ) .)
    LTE             reduce using rule 67 (term -> ( expression ) .)
    TRANSPOSE       reduce using rule 67 (term -> ( expression ) .)
    ,               reduce using rule 67 (term -> ( expression ) .)
    ;               reduce using rule 67 (term -> ( expression ) .)
    :               reduce using rule 67 (term -> ( expression ) .)
    ]               reduce using rule 67 (term -> ( expression ) .)
    )               reduce using rule 67 (term -> ( expression ) .)
    {               reduce using rule 67 (term -> ( expression ) .)
    ID              reduce using rule 67 (term -> ( expression ) .)
    PRINT           reduce using rule 67 (term -> ( expression ) .)
    CONTINUE        reduce using rule 67 (term -> ( expression ) .)
    BREAK           reduce using rule 67 (term -> ( expression ) .)
    RETURN          reduce using rule 67 (term -> ( expression ) .)
    IF              reduce using rule 67 (term -> ( expression ) .)
    FOR             reduce using rule 67 (term -> ( expression ) .)
    WHILE           reduce using rule 67 (term -> ( expression ) .)


state 113

    (44) expression -> ID dot_operation term .

    +               reduce using rule 44 (expression -> ID dot_operation term .)
    -               reduce using rule 44 (expression -> ID dot_operation term .)
    /               reduce using rule 44 (expression -> ID dot_operation term .)
    *               reduce using rule 44 (expression -> ID dot_operation term .)
    EQL             reduce using rule 44 (expression -> ID dot_operation term .)
    NEQ             reduce using rule 44 (expression -> ID dot_operation term .)
    GT              reduce using rule 44 (expression -> ID dot_operation term .)
    GTE             reduce using rule 44 (expression -> ID dot_operation term .)
    LT              reduce using rule 44 (expression -> ID dot_operation term .)
    LTE             reduce using rule 44 (expression -> ID dot_operation term .)
    TRANSPOSE       reduce using rule 44 (expression -> ID dot_operation term .)
    ,               reduce using rule 44 (expression -> ID dot_operation term .)
    ;               reduce using rule 44 (expression -> ID dot_operation term .)
    :               reduce using rule 44 (expression -> ID dot_operation term .)
    ]               reduce using rule 44 (expression -> ID dot_operation term .)
    )               reduce using rule 44 (expression -> ID dot_operation term .)
    {               reduce using rule 44 (expression -> ID dot_operation term .)
    ID              reduce using rule 44 (expression -> ID dot_operation term .)
    PRINT           reduce using rule 44 (expression -> ID dot_operation term .)
    CONTINUE        reduce using rule 44 (expression -> ID dot_operation term .)
    BREAK           reduce using rule 44 (expression -> ID dot_operation term .)
    RETURN          reduce using rule 44 (expression -> ID dot_operation term .)
    IF              reduce using rule 44 (expression -> ID dot_operation term .)
    FOR             reduce using rule 44 (expression -> ID dot_operation term .)
    WHILE           reduce using rule 44 (expression -> ID dot_operation term .)


state 114

    (45) expression -> vector dot_operation term .

    +               reduce using rule 45 (expression -> vector dot_operation term .)
    -               reduce using rule 45 (expression -> vector dot_operation term .)
    /               reduce using rule 45 (expression -> vector dot_operation term .)
    *               reduce using rule 45 (expression -> vector dot_operation term .)
    EQL             reduce using rule 45 (expression -> vector dot_operation term .)
    NEQ             reduce using rule 45 (expression -> vector dot_operation term .)
    GT              reduce using rule 45 (expression -> vector dot_operation term .)
    GTE             reduce using rule 45 (expression -> vector dot_operation term .)
    LT              reduce using rule 45 (expression -> vector dot_operation term .)
    LTE             reduce using rule 45 (expression -> vector dot_operation term .)
    TRANSPOSE       reduce using rule 45 (expression -> vector dot_operation term .)
    ,               reduce using rule 45 (expression -> vector dot_operation term .)
    ;               reduce using rule 45 (expression -> vector dot_operation term .)
    :               reduce using rule 45 (expression -> vector dot_operation term .)
    ]               reduce using rule 45 (expression -> vector dot_operation term .)
    )               reduce using rule 45 (expression -> vector dot_operation term .)
    {               reduce using rule 45 (expression -> vector dot_operation term .)
    ID              reduce using rule 45 (expression -> vector dot_operation term .)
    PRINT           reduce using rule 45 (expression -> vector dot_operation term .)
    CONTINUE        reduce using rule 45 (expression -> vector dot_operation term .)
    BREAK           reduce using rule 45 (expression -> vector dot_operation term .)
    RETURN          reduce using rule 45 (expression -> vector dot_operation term .)
    IF              reduce using rule 45 (expression -> vector dot_operation term .)
    FOR             reduce using rule 45 (expression -> vector dot_operation term .)
    WHILE           reduce using rule 45 (expression -> vector dot_operation term .)


state 115

    (50) vector -> [ vector_contents ] .

    DOTADD          reduce using rule 50 (vector -> [ vector_contents ] .)
    DOTSUB          reduce using rule 50 (vector -> [ vector_contents ] .)
    DOTMUL          reduce using rule 50 (vector -> [ vector_contents ] .)
    DOTDIV          reduce using rule 50 (vector -> [ vector_contents ] .)
    +               reduce using rule 50 (vector -> [ vector_contents ] .)
    -               reduce using rule 50 (vector -> [ vector_contents ] .)
    /               reduce using rule 50 (vector -> [ vector_contents ] .)
    *               reduce using rule 50 (vector -> [ vector_contents ] .)
    EQL             reduce using rule 50 (vector -> [ vector_contents ] .)
    NEQ             reduce using rule 50 (vector -> [ vector_contents ] .)
    GT              reduce using rule 50 (vector -> [ vector_contents ] .)
    GTE             reduce using rule 50 (vector -> [ vector_contents ] .)
    LT              reduce using rule 50 (vector -> [ vector_contents ] .)
    LTE             reduce using rule 50 (vector -> [ vector_contents ] .)
    TRANSPOSE       reduce using rule 50 (vector -> [ vector_contents ] .)
    ,               reduce using rule 50 (vector -> [ vector_contents ] .)
    ;               reduce using rule 50 (vector -> [ vector_contents ] .)
    :               reduce using rule 50 (vector -> [ vector_contents ] .)
    ]               reduce using rule 50 (vector -> [ vector_contents ] .)
    )               reduce using rule 50 (vector -> [ vector_contents ] .)
    {               reduce using rule 50 (vector -> [ vector_contents ] .)
    ID              reduce using rule 50 (vector -> [ vector_contents ] .)
    PRINT           reduce using rule 50 (vector -> [ vector_contents ] .)
    CONTINUE        reduce using rule 50 (vector -> [ vector_contents ] .)
    BREAK           reduce using rule 50 (vector -> [ vector_contents ] .)
    RETURN          reduce using rule 50 (vector -> [ vector_contents ] .)
    IF              reduce using rule 50 (vector -> [ vector_contents ] .)
    FOR             reduce using rule 50 (vector -> [ vector_contents ] .)
    WHILE           reduce using rule 50 (vector -> [ vector_contents ] .)


state 116

    (52) vector_contents -> vector_contents , . vector_element
    (54) vector_element -> . term
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    ID              shift and go to state 77
    [               shift and go to state 49

    vector_element                 shift and go to state 125
    term                           shift and go to state 87
    vector                         shift and go to state 76

state 117

    (63) if -> IF condition nested ELSE . nested
    (65) nested -> . { statements_list }
    (66) nested -> . statement
    (5) statement -> . assignment ;
    (6) statement -> . print ;
    (7) statement -> . continue ;
    (8) statement -> . break ;
    (9) statement -> . return ;
    (10) statement -> . if
    (11) statement -> . for
    (12) statement -> . while
    (21) assignment -> . ID assign_symbol expression
    (22) assignment -> . ID slice assign_symbol expression
    (18) print -> . PRINT coma_separated
    (17) continue -> . CONTINUE
    (15) break -> . BREAK
    (16) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (13) for -> . FOR ID ASSIGN expression : expression nested
    (14) while -> . WHILE condition nested

    {               shift and go to state 89
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    CONTINUE        shift and go to state 15
    BREAK           shift and go to state 16
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 20

    nested                         shift and go to state 126
    statement                      shift and go to state 90
    assignment                     shift and go to state 5
    print                          shift and go to state 6
    continue                       shift and go to state 7
    break                          shift and go to state 8
    return                         shift and go to state 9
    if                             shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12

state 118

    (65) nested -> { statements_list . }
    (3) statements_list -> statements_list . statement
    (5) statement -> . assignment ;
    (6) statement -> . print ;
    (7) statement -> . continue ;
    (8) statement -> . break ;
    (9) statement -> . return ;
    (10) statement -> . if
    (11) statement -> . for
    (12) statement -> . while
    (21) assignment -> . ID assign_symbol expression
    (22) assignment -> . ID slice assign_symbol expression
    (18) print -> . PRINT coma_separated
    (17) continue -> . CONTINUE
    (15) break -> . BREAK
    (16) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (13) for -> . FOR ID ASSIGN expression : expression nested
    (14) while -> . WHILE condition nested

    }               shift and go to state 127
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    CONTINUE        shift and go to state 15
    BREAK           shift and go to state 16
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 20

    statement                      shift and go to state 21
    assignment                     shift and go to state 5
    print                          shift and go to state 6
    continue                       shift and go to state 7
    break                          shift and go to state 8
    return                         shift and go to state 9
    if                             shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12

state 119

    (64) condition -> ( expression ) .

    {               reduce using rule 64 (condition -> ( expression ) .)
    ID              reduce using rule 64 (condition -> ( expression ) .)
    PRINT           reduce using rule 64 (condition -> ( expression ) .)
    CONTINUE        reduce using rule 64 (condition -> ( expression ) .)
    BREAK           reduce using rule 64 (condition -> ( expression ) .)
    RETURN          reduce using rule 64 (condition -> ( expression ) .)
    IF              reduce using rule 64 (condition -> ( expression ) .)
    FOR             reduce using rule 64 (condition -> ( expression ) .)
    WHILE           reduce using rule 64 (condition -> ( expression ) .)


state 120

    (13) for -> FOR ID ASSIGN expression . : expression nested
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    :               shift and go to state 128
    +               shift and go to state 62
    -               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    EQL             shift and go to state 66
    NEQ             shift and go to state 67
    GT              shift and go to state 68
    GTE             shift and go to state 69
    LT              shift and go to state 70
    LTE             shift and go to state 71
    TRANSPOSE       shift and go to state 72


state 121

    (56) slice_contents -> slice_contents , range .

    ]               reduce using rule 56 (slice_contents -> slice_contents , range .)
    ,               reduce using rule 56 (slice_contents -> slice_contents , range .)


state 122

    (58) range -> expression : expression .
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    ]               reduce using rule 58 (range -> expression : expression .)
    ,               reduce using rule 58 (range -> expression : expression .)
    +               shift and go to state 62
    -               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    EQL             shift and go to state 66
    NEQ             shift and go to state 67
    GT              shift and go to state 68
    GTE             shift and go to state 69
    LT              shift and go to state 70
    LTE             shift and go to state 71
    TRANSPOSE       shift and go to state 72


state 123

    (28) expression -> built_in_function ( expression_list ) .

    +               reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    -               reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    /               reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    *               reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    EQL             reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    NEQ             reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    GT              reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    GTE             reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    LT              reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    LTE             reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    TRANSPOSE       reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    ,               reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    ;               reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    :               reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    ]               reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    )               reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    {               reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    ID              reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    PRINT           reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    CONTINUE        reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    BREAK           reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    RETURN          reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    IF              reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    FOR             reduce using rule 28 (expression -> built_in_function ( expression_list ) .)
    WHILE           reduce using rule 28 (expression -> built_in_function ( expression_list ) .)


state 124

    (29) expression_list -> expression_list , . expression
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    [               shift and go to state 49

    expression                     shift and go to state 129
    built_in_function              shift and go to state 37
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 125

    (52) vector_contents -> vector_contents , vector_element .

    ]               reduce using rule 52 (vector_contents -> vector_contents , vector_element .)
    ,               reduce using rule 52 (vector_contents -> vector_contents , vector_element .)


state 126

    (63) if -> IF condition nested ELSE nested .

    ID              reduce using rule 63 (if -> IF condition nested ELSE nested .)
    PRINT           reduce using rule 63 (if -> IF condition nested ELSE nested .)
    CONTINUE        reduce using rule 63 (if -> IF condition nested ELSE nested .)
    BREAK           reduce using rule 63 (if -> IF condition nested ELSE nested .)
    RETURN          reduce using rule 63 (if -> IF condition nested ELSE nested .)
    IF              reduce using rule 63 (if -> IF condition nested ELSE nested .)
    FOR             reduce using rule 63 (if -> IF condition nested ELSE nested .)
    WHILE           reduce using rule 63 (if -> IF condition nested ELSE nested .)
    $end            reduce using rule 63 (if -> IF condition nested ELSE nested .)
    ELSE            reduce using rule 63 (if -> IF condition nested ELSE nested .)
    }               reduce using rule 63 (if -> IF condition nested ELSE nested .)


state 127

    (65) nested -> { statements_list } .

    ELSE            reduce using rule 65 (nested -> { statements_list } .)
    ID              reduce using rule 65 (nested -> { statements_list } .)
    PRINT           reduce using rule 65 (nested -> { statements_list } .)
    CONTINUE        reduce using rule 65 (nested -> { statements_list } .)
    BREAK           reduce using rule 65 (nested -> { statements_list } .)
    RETURN          reduce using rule 65 (nested -> { statements_list } .)
    IF              reduce using rule 65 (nested -> { statements_list } .)
    FOR             reduce using rule 65 (nested -> { statements_list } .)
    WHILE           reduce using rule 65 (nested -> { statements_list } .)
    $end            reduce using rule 65 (nested -> { statements_list } .)
    }               reduce using rule 65 (nested -> { statements_list } .)


state 128

    (13) for -> FOR ID ASSIGN expression : . expression nested
    (28) expression -> . built_in_function ( expression_list )
    (31) expression -> . term
    (32) expression -> . expression + term
    (33) expression -> . expression - term
    (34) expression -> . expression / term
    (35) expression -> . expression * term
    (36) expression -> . expression EQL term
    (37) expression -> . expression NEQ term
    (38) expression -> . expression GT term
    (39) expression -> . expression GTE term
    (40) expression -> . expression LT term
    (41) expression -> . expression LTE term
    (42) expression -> . - term
    (43) expression -> . expression TRANSPOSE
    (44) expression -> . ID dot_operation term
    (45) expression -> . vector dot_operation term
    (73) built_in_function -> . EYE
    (74) built_in_function -> . ONES
    (75) built_in_function -> . ZEROS
    (67) term -> . ( expression )
    (68) term -> . vector
    (69) term -> . INTNUM
    (70) term -> . FLOATNUM
    (71) term -> . STR
    (72) term -> . ID
    (50) vector -> . [ vector_contents ]
    (51) vector -> . [ ]

    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    FLOATNUM        shift and go to state 47
    STR             shift and go to state 48
    [               shift and go to state 49

    expression                     shift and go to state 130
    built_in_function              shift and go to state 37
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 129

    (29) expression_list -> expression_list , expression .
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE

    )               reduce using rule 29 (expression_list -> expression_list , expression .)
    ,               reduce using rule 29 (expression_list -> expression_list , expression .)
    +               shift and go to state 62
    -               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    EQL             shift and go to state 66
    NEQ             shift and go to state 67
    GT              shift and go to state 68
    GTE             shift and go to state 69
    LT              shift and go to state 70
    LTE             shift and go to state 71
    TRANSPOSE       shift and go to state 72


state 130

    (13) for -> FOR ID ASSIGN expression : expression . nested
    (32) expression -> expression . + term
    (33) expression -> expression . - term
    (34) expression -> expression . / term
    (35) expression -> expression . * term
    (36) expression -> expression . EQL term
    (37) expression -> expression . NEQ term
    (38) expression -> expression . GT term
    (39) expression -> expression . GTE term
    (40) expression -> expression . LT term
    (41) expression -> expression . LTE term
    (43) expression -> expression . TRANSPOSE
    (65) nested -> . { statements_list }
    (66) nested -> . statement
    (5) statement -> . assignment ;
    (6) statement -> . print ;
    (7) statement -> . continue ;
    (8) statement -> . break ;
    (9) statement -> . return ;
    (10) statement -> . if
    (11) statement -> . for
    (12) statement -> . while
    (21) assignment -> . ID assign_symbol expression
    (22) assignment -> . ID slice assign_symbol expression
    (18) print -> . PRINT coma_separated
    (17) continue -> . CONTINUE
    (15) break -> . BREAK
    (16) return -> . RETURN expression
    (62) if -> . IF condition nested
    (63) if -> . IF condition nested ELSE nested
    (13) for -> . FOR ID ASSIGN expression : expression nested
    (14) while -> . WHILE condition nested

    +               shift and go to state 62
    -               shift and go to state 63
    /               shift and go to state 64
    *               shift and go to state 65
    EQL             shift and go to state 66
    NEQ             shift and go to state 67
    GT              shift and go to state 68
    GTE             shift and go to state 69
    LT              shift and go to state 70
    LTE             shift and go to state 71
    TRANSPOSE       shift and go to state 72
    {               shift and go to state 89
    ID              shift and go to state 13
    PRINT           shift and go to state 14
    CONTINUE        shift and go to state 15
    BREAK           shift and go to state 16
    RETURN          shift and go to state 17
    IF              shift and go to state 18
    FOR             shift and go to state 19
    WHILE           shift and go to state 20

    nested                         shift and go to state 131
    statement                      shift and go to state 90
    assignment                     shift and go to state 5
    print                          shift and go to state 6
    continue                       shift and go to state 7
    break                          shift and go to state 8
    return                         shift and go to state 9
    if                             shift and go to state 10
    for                            shift and go to state 11
    while                          shift and go to state 12

state 131

    (13) for -> FOR ID ASSIGN expression : expression nested .

    ID              reduce using rule 13 (for -> FOR ID ASSIGN expression : expression nested .)
    PRINT           reduce using rule 13 (for -> FOR ID ASSIGN expression : expression nested .)
    CONTINUE        reduce using rule 13 (for -> FOR ID ASSIGN expression : expression nested .)
    BREAK           reduce using rule 13 (for -> FOR ID ASSIGN expression : expression nested .)
    RETURN          reduce using rule 13 (for -> FOR ID ASSIGN expression : expression nested .)
    IF              reduce using rule 13 (for -> FOR ID ASSIGN expression : expression nested .)
    FOR             reduce using rule 13 (for -> FOR ID ASSIGN expression : expression nested .)
    WHILE           reduce using rule 13 (for -> FOR ID ASSIGN expression : expression nested .)
    $end            reduce using rule 13 (for -> FOR ID ASSIGN expression : expression nested .)
    ELSE            reduce using rule 13 (for -> FOR ID ASSIGN expression : expression nested .)
    }               reduce using rule 13 (for -> FOR ID ASSIGN expression : expression nested .)

