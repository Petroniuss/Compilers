
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "startnonassocIFxnonassocELSEnonassocEQLNEQGTGTELTLTEleft+-left/*rightUMINUSleftTRANSPOSEADDASSIGN ASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQL EYE FLOATNUM FOR GT GTE ID IF INTNUM LT LTE MULTASSIGN NEQ ONES PRINT RETURN STR SUBASSIGN TRANSPOSE WHILE ZEROS\n        start : statements\n    \n        statements : statements statement\n    \n        statements : statement\n    \n        statement : assignment ';'\n                  | print ';'\n                  | continue ';'\n                  | break ';'\n                  | return ';'\n                  | if\n                  | for\n                  | while\n                  | nested_statements\n    \n        for : FOR ID ASSIGN expression ':' expression nested\n    \n        while : WHILE condition nested\n    \n        break : BREAK\n    \n        return : RETURN expression\n    \n        continue : CONTINUE\n    \n        print : PRINT coma_separated\n    \n        coma_separated : coma_separated ',' expression\n    \n        coma_separated : expression\n    \n        assignment : ID assign_symbol expression\n    \n        assignment : ID slice assign_symbol expression\n    \n        assign_symbol : ASSIGN\n                      | SUBASSIGN\n                      | ADDASSIGN\n                      | DIVASSIGN\n                      | MULTASSIGN\n    \n        expression : built_in_function '(' expression_list ')'\n    \n        expression_list : expression_list ',' expression\n    \n        expression_list : expression\n    \n        expression : term\n    \n        expression : expression '+' term\n                   | expression '-' term\n                   | expression '/' term\n                   | expression '*' term\n    \n        expression : expression EQL term\n                   | expression NEQ term\n                   | expression GT term\n                   | expression GTE term\n                   | expression LT term\n                   | expression LTE term \n    \n        expression : '-' term %prec UMINUS\n    \n        expression : expression TRANSPOSE\n    \n        expression : ID dot_operation term\n    \n        expression : vector dot_operation term\n    \n         dot_operation : DOTADD\n                       | DOTSUB\n                       | DOTMUL\n                       | DOTDIV\n    \n        vector : '[' vector_contents ']'\n    \n        vector : '[' ']'\n    \n        vector_contents : vector_contents ',' vector_element\n    \n        vector_contents : vector_element\n    \n        vector_element : term\n    \n        slice : '[' slice_contents ']'\n    \n        slice_contents : slice_contents ',' range\n    \n        slice_contents : range\n    \n        range : expression ':' expression\n    \n        range : expression ':'\n    \n        range : ':' expression\n    \n        range : expression\n    \n        if : IF condition nested %prec IFx\n    \n        if : IF condition nested ELSE nested\n    \n        condition : '(' expression ')'\n    \n        nested : statement\n    \n        nested_statements : nested_empty\n                          | nested_statements_list\n    \n        nested_statements_list : '{' statements '}'\n    \n        nested_empty : '{' '}'\n    \n        term : '(' expression ')'\n    \n        term : vector\n    \n        term : INTNUM\n    \n        term : FLOATNUM\n    \n        term : STR\n    \n        term : ID\n    \n        built_in_function : EYE\n                          | ONES\n                          | ZEROS\n    "
    
_lr_action_items = {'ID':([0,2,3,9,10,11,12,14,17,19,21,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37,41,42,43,44,45,49,50,51,52,54,55,57,58,59,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,82,83,84,85,86,87,88,90,93,94,96,97,98,101,102,105,106,107,108,109,110,111,112,113,114,117,118,119,120,121,122,123,127,128,130,131,133,134,],[13,13,-3,-9,-10,-11,-12,44,44,56,-66,-67,13,-2,-4,-5,-6,-7,-8,44,-23,-24,-25,-26,-27,44,44,-31,82,-75,-71,-72,-73,-74,82,13,44,13,-69,13,44,44,44,82,82,82,82,82,82,82,82,82,82,-43,44,-42,-71,-75,82,-46,-47,-48,-49,82,-51,-62,-65,44,-14,-68,44,44,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-70,-44,-45,-50,82,13,-64,-28,44,-63,44,13,-13,]),'PRINT':([0,2,3,9,10,11,12,21,22,23,24,25,26,27,28,29,42,44,45,49,50,51,54,57,58,59,77,80,81,82,90,93,94,97,98,105,106,107,108,109,110,111,112,113,114,117,118,119,120,122,123,127,130,133,134,],[14,14,-3,-9,-10,-11,-12,-66,-67,14,-2,-4,-5,-6,-7,-8,-31,-75,-71,-72,-73,-74,14,14,-69,14,-43,-42,-71,-75,-51,-62,-65,-14,-68,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-70,-44,-45,-50,14,-64,-28,-63,14,-13,]),'CONTINUE':([0,2,3,9,10,11,12,21,22,23,24,25,26,27,28,29,42,44,45,49,50,51,54,57,58,59,77,80,81,82,90,93,94,97,98,105,106,107,108,109,110,111,112,113,114,117,118,119,120,122,123,127,130,133,134,],[15,15,-3,-9,-10,-11,-12,-66,-67,15,-2,-4,-5,-6,-7,-8,-31,-75,-71,-72,-73,-74,15,15,-69,15,-43,-42,-71,-75,-51,-62,-65,-14,-68,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-70,-44,-45,-50,15,-64,-28,-63,15,-13,]),'BREAK':([0,2,3,9,10,11,12,21,22,23,24,25,26,27,28,29,42,44,45,49,50,51,54,57,58,59,77,80,81,82,90,93,94,97,98,105,106,107,108,109,110,111,112,113,114,117,118,119,120,122,123,127,130,133,134,],[16,16,-3,-9,-10,-11,-12,-66,-67,16,-2,-4,-5,-6,-7,-8,-31,-75,-71,-72,-73,-74,16,16,-69,16,-43,-42,-71,-75,-51,-62,-65,-14,-68,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-70,-44,-45,-50,16,-64,-28,-63,16,-13,]),'RETURN':([0,2,3,9,10,11,12,21,22,23,24,25,26,27,28,29,42,44,45,49,50,51,54,57,58,59,77,80,81,82,90,93,94,97,98,105,106,107,108,109,110,111,112,113,114,117,118,119,120,122,123,127,130,133,134,],[17,17,-3,-9,-10,-11,-12,-66,-67,17,-2,-4,-5,-6,-7,-8,-31,-75,-71,-72,-73,-74,17,17,-69,17,-43,-42,-71,-75,-51,-62,-65,-14,-68,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-70,-44,-45,-50,17,-64,-28,-63,17,-13,]),'IF':([0,2,3,9,10,11,12,21,22,23,24,25,26,27,28,29,42,44,45,49,50,51,54,57,58,59,77,80,81,82,90,93,94,97,98,105,106,107,108,109,110,111,112,113,114,117,118,119,120,122,123,127,130,133,134,],[18,18,-3,-9,-10,-11,-12,-66,-67,18,-2,-4,-5,-6,-7,-8,-31,-75,-71,-72,-73,-74,18,18,-69,18,-43,-42,-71,-75,-51,-62,-65,-14,-68,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-70,-44,-45,-50,18,-64,-28,-63,18,-13,]),'FOR':([0,2,3,9,10,11,12,21,22,23,24,25,26,27,28,29,42,44,45,49,50,51,54,57,58,59,77,80,81,82,90,93,94,97,98,105,106,107,108,109,110,111,112,113,114,117,118,119,120,122,123,127,130,133,134,],[19,19,-3,-9,-10,-11,-12,-66,-67,19,-2,-4,-5,-6,-7,-8,-31,-75,-71,-72,-73,-74,19,19,-69,19,-43,-42,-71,-75,-51,-62,-65,-14,-68,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-70,-44,-45,-50,19,-64,-28,-63,19,-13,]),'WHILE':([0,2,3,9,10,11,12,21,22,23,24,25,26,27,28,29,42,44,45,49,50,51,54,57,58,59,77,80,81,82,90,93,94,97,98,105,106,107,108,109,110,111,112,113,114,117,118,119,120,122,123,127,130,133,134,],[20,20,-3,-9,-10,-11,-12,-66,-67,20,-2,-4,-5,-6,-7,-8,-31,-75,-71,-72,-73,-74,20,20,-69,20,-43,-42,-71,-75,-51,-62,-65,-14,-68,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-70,-44,-45,-50,20,-64,-28,-63,20,-13,]),'{':([0,2,3,9,10,11,12,21,22,23,24,25,26,27,28,29,42,44,45,49,50,51,54,57,58,59,77,80,81,82,90,93,94,97,98,105,106,107,108,109,110,111,112,113,114,117,118,119,120,122,123,127,130,133,134,],[23,23,-3,-9,-10,-11,-12,-66,-67,23,-2,-4,-5,-6,-7,-8,-31,-75,-71,-72,-73,-74,23,23,-69,23,-43,-42,-71,-75,-51,-62,-65,-14,-68,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-70,-44,-45,-50,23,-64,-28,-63,23,-13,]),'$end':([1,2,3,9,10,11,12,21,22,24,25,26,27,28,29,58,93,94,97,98,130,134,],[0,-1,-3,-9,-10,-11,-12,-66,-67,-2,-4,-5,-6,-7,-8,-69,-62,-65,-14,-68,-63,-13,]),'}':([3,9,10,11,12,21,22,23,24,25,26,27,28,29,58,59,93,94,97,98,130,134,],[-3,-9,-10,-11,-12,-66,-67,58,-2,-4,-5,-6,-7,-8,-69,98,-62,-65,-14,-68,-63,-13,]),';':([4,5,6,7,8,15,16,38,39,42,44,45,49,50,51,53,60,77,80,81,82,90,99,104,105,106,107,108,109,110,111,112,113,114,117,118,119,120,127,],[25,26,27,28,29,-17,-15,-18,-20,-31,-75,-71,-72,-73,-74,-16,-21,-43,-42,-71,-75,-51,-22,-19,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-70,-44,-45,-50,-28,]),'ELSE':([9,10,11,12,21,22,25,26,27,28,29,58,93,94,97,98,130,134,],[-9,-10,-11,-12,-66,-67,-4,-5,-6,-7,-8,-69,122,-65,-14,-68,-63,-13,]),'ASSIGN':([13,31,56,100,],[32,32,96,-55,]),'SUBASSIGN':([13,31,100,],[33,33,-55,]),'ADDASSIGN':([13,31,100,],[34,34,-55,]),'DIVASSIGN':([13,31,100,],[35,35,-55,]),'MULTASSIGN':([13,31,100,],[36,36,-55,]),'[':([13,14,17,30,32,33,34,35,36,37,41,43,52,55,61,65,66,67,68,69,70,71,72,73,74,75,76,78,83,84,85,86,87,88,96,101,102,121,128,131,],[37,52,52,52,-23,-24,-25,-26,-27,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-46,-47,-48,-49,52,52,52,52,52,52,52,]),'-':([14,17,30,32,33,34,35,36,37,39,41,42,44,45,49,50,51,53,55,60,61,64,65,66,77,78,79,80,81,82,90,95,96,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,124,126,127,128,131,132,133,],[43,43,43,-23,-24,-25,-26,-27,43,68,43,-31,-75,-71,-72,-73,-74,68,43,68,43,68,43,43,-43,43,68,-42,-71,-75,-51,68,43,68,43,43,68,68,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,68,-70,-44,-45,-50,68,68,-28,43,43,68,68,]),'EYE':([14,17,30,32,33,34,35,36,37,41,55,61,65,66,78,96,101,102,128,131,],[46,46,46,-23,-24,-25,-26,-27,46,46,46,46,46,46,46,46,46,46,46,46,]),'ONES':([14,17,30,32,33,34,35,36,37,41,55,61,65,66,78,96,101,102,128,131,],[47,47,47,-23,-24,-25,-26,-27,47,47,47,47,47,47,47,47,47,47,47,47,]),'ZEROS':([14,17,30,32,33,34,35,36,37,41,55,61,65,66,78,96,101,102,128,131,],[48,48,48,-23,-24,-25,-26,-27,48,48,48,48,48,48,48,48,48,48,48,48,]),'(':([14,17,18,20,30,32,33,34,35,36,37,40,41,43,46,47,48,52,55,61,65,66,67,68,69,70,71,72,73,74,75,76,78,83,84,85,86,87,88,96,101,102,121,128,131,],[41,41,55,55,41,-23,-24,-25,-26,-27,41,78,41,41,-76,-77,-78,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-46,-47,-48,-49,41,41,41,41,41,41,41,]),'INTNUM':([14,17,30,32,33,34,35,36,37,41,43,52,55,61,65,66,67,68,69,70,71,72,73,74,75,76,78,83,84,85,86,87,88,96,101,102,121,128,131,],[49,49,49,-23,-24,-25,-26,-27,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-46,-47,-48,-49,49,49,49,49,49,49,49,]),'FLOATNUM':([14,17,30,32,33,34,35,36,37,41,43,52,55,61,65,66,67,68,69,70,71,72,73,74,75,76,78,83,84,85,86,87,88,96,101,102,121,128,131,],[50,50,50,-23,-24,-25,-26,-27,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-46,-47,-48,-49,50,50,50,50,50,50,50,]),'STR':([14,17,30,32,33,34,35,36,37,41,43,52,55,61,65,66,67,68,69,70,71,72,73,74,75,76,78,83,84,85,86,87,88,96,101,102,121,128,131,],[51,51,51,-23,-24,-25,-26,-27,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-46,-47,-48,-49,51,51,51,51,51,51,51,]),':':([37,42,44,45,49,50,51,64,77,80,81,82,90,101,105,106,107,108,109,110,111,112,113,114,117,118,119,120,124,127,],[65,-31,-75,-71,-72,-73,-74,102,-43,-42,-71,-75,-51,65,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-70,-44,-45,-50,131,-28,]),',':([38,39,42,44,45,49,50,51,62,63,64,77,80,81,82,89,90,91,92,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,125,126,127,129,132,],[66,-20,-31,-75,-71,-72,-73,-74,101,-57,-61,-43,-42,-71,-75,121,-51,-53,-54,-59,-60,-19,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,128,-30,-70,-44,-45,-50,-56,-58,-28,-52,-29,]),'+':([39,42,44,45,49,50,51,53,60,64,77,79,80,81,82,90,95,99,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,124,126,127,132,133,],[67,-31,-75,-71,-72,-73,-74,67,67,67,-43,67,-42,-71,-75,-51,67,67,67,67,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,67,-70,-44,-45,-50,67,67,-28,67,67,]),'/':([39,42,44,45,49,50,51,53,60,64,77,79,80,81,82,90,95,99,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,124,126,127,132,133,],[69,-31,-75,-71,-72,-73,-74,69,69,69,-43,69,-42,-71,-75,-51,69,69,69,69,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,69,-70,-44,-45,-50,69,69,-28,69,69,]),'*':([39,42,44,45,49,50,51,53,60,64,77,79,80,81,82,90,95,99,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,124,126,127,132,133,],[70,-31,-75,-71,-72,-73,-74,70,70,70,-43,70,-42,-71,-75,-51,70,70,70,70,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,70,-70,-44,-45,-50,70,70,-28,70,70,]),'EQL':([39,42,44,45,49,50,51,53,60,64,77,79,80,81,82,90,95,99,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,124,126,127,132,133,],[71,-31,-75,-71,-72,-73,-74,71,71,71,-43,71,-42,-71,-75,-51,71,71,71,71,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,71,-70,-44,-45,-50,71,71,-28,71,71,]),'NEQ':([39,42,44,45,49,50,51,53,60,64,77,79,80,81,82,90,95,99,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,124,126,127,132,133,],[72,-31,-75,-71,-72,-73,-74,72,72,72,-43,72,-42,-71,-75,-51,72,72,72,72,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,72,-70,-44,-45,-50,72,72,-28,72,72,]),'GT':([39,42,44,45,49,50,51,53,60,64,77,79,80,81,82,90,95,99,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,124,126,127,132,133,],[73,-31,-75,-71,-72,-73,-74,73,73,73,-43,73,-42,-71,-75,-51,73,73,73,73,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,73,-70,-44,-45,-50,73,73,-28,73,73,]),'GTE':([39,42,44,45,49,50,51,53,60,64,77,79,80,81,82,90,95,99,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,124,126,127,132,133,],[74,-31,-75,-71,-72,-73,-74,74,74,74,-43,74,-42,-71,-75,-51,74,74,74,74,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,74,-70,-44,-45,-50,74,74,-28,74,74,]),'LT':([39,42,44,45,49,50,51,53,60,64,77,79,80,81,82,90,95,99,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,124,126,127,132,133,],[75,-31,-75,-71,-72,-73,-74,75,75,75,-43,75,-42,-71,-75,-51,75,75,75,75,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,75,-70,-44,-45,-50,75,75,-28,75,75,]),'LTE':([39,42,44,45,49,50,51,53,60,64,77,79,80,81,82,90,95,99,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,124,126,127,132,133,],[76,-31,-75,-71,-72,-73,-74,76,76,76,-43,76,-42,-71,-75,-51,76,76,76,76,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,76,-70,-44,-45,-50,76,76,-28,76,76,]),'TRANSPOSE':([39,42,44,45,49,50,51,53,60,64,77,79,80,81,82,90,95,99,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,124,126,127,132,133,],[77,-31,-75,-71,-72,-73,-74,77,77,77,-43,77,-42,-71,-75,-51,77,77,77,77,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,77,-70,-44,-45,-50,77,77,-28,77,77,]),']':([42,44,45,49,50,51,52,62,63,64,77,80,81,82,89,90,91,92,102,103,105,106,107,108,109,110,111,112,113,114,117,118,119,120,125,126,127,129,],[-31,-75,-71,-72,-73,-74,90,100,-57,-61,-43,-42,-71,-75,120,-51,-53,-54,-59,-60,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-70,-44,-45,-50,-56,-58,-28,-52,]),')':([42,44,45,49,50,51,77,79,80,81,82,90,95,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,127,132,],[-31,-75,-71,-72,-73,-74,-43,117,-42,-71,-75,-51,123,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,127,-30,-70,-44,-45,-50,-28,-29,]),'DOTADD':([44,45,90,120,],[84,84,-51,-50,]),'DOTSUB':([44,45,90,120,],[85,85,-51,-50,]),'DOTMUL':([44,45,90,120,],[86,86,-51,-50,]),'DOTDIV':([44,45,90,120,],[87,87,-51,-50,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'statements':([0,23,],[2,59,]),'statement':([0,2,23,54,57,59,122,133,],[3,24,3,94,94,24,94,94,]),'assignment':([0,2,23,54,57,59,122,133,],[4,4,4,4,4,4,4,4,]),'print':([0,2,23,54,57,59,122,133,],[5,5,5,5,5,5,5,5,]),'continue':([0,2,23,54,57,59,122,133,],[6,6,6,6,6,6,6,6,]),'break':([0,2,23,54,57,59,122,133,],[7,7,7,7,7,7,7,7,]),'return':([0,2,23,54,57,59,122,133,],[8,8,8,8,8,8,8,8,]),'if':([0,2,23,54,57,59,122,133,],[9,9,9,9,9,9,9,9,]),'for':([0,2,23,54,57,59,122,133,],[10,10,10,10,10,10,10,10,]),'while':([0,2,23,54,57,59,122,133,],[11,11,11,11,11,11,11,11,]),'nested_statements':([0,2,23,54,57,59,122,133,],[12,12,12,12,12,12,12,12,]),'nested_empty':([0,2,23,54,57,59,122,133,],[21,21,21,21,21,21,21,21,]),'nested_statements_list':([0,2,23,54,57,59,122,133,],[22,22,22,22,22,22,22,22,]),'assign_symbol':([13,31,],[30,61,]),'slice':([13,],[31,]),'coma_separated':([14,],[38,]),'expression':([14,17,30,37,41,55,61,65,66,78,96,101,102,128,131,],[39,53,60,64,79,95,99,103,104,116,124,64,126,132,133,]),'built_in_function':([14,17,30,37,41,55,61,65,66,78,96,101,102,128,131,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'term':([14,17,30,37,41,43,52,55,61,65,66,67,68,69,70,71,72,73,74,75,76,78,83,88,96,101,102,121,128,131,],[42,42,42,42,42,80,92,42,42,42,42,105,106,107,108,109,110,111,112,113,114,42,118,119,42,42,42,92,42,42,]),'vector':([14,17,30,37,41,43,52,55,61,65,66,67,68,69,70,71,72,73,74,75,76,78,83,88,96,101,102,121,128,131,],[45,45,45,45,45,81,81,45,45,45,45,81,81,81,81,81,81,81,81,81,81,45,81,81,45,45,45,81,45,45,]),'condition':([18,20,],[54,57,]),'slice_contents':([37,],[62,]),'range':([37,101,],[63,125,]),'dot_operation':([44,45,],[83,88,]),'vector_contents':([52,],[89,]),'vector_element':([52,121,],[91,129,]),'nested':([54,57,122,133,],[93,97,130,134,]),'expression_list':([78,],[115,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> statements','start',1,'p_start','Parser.py',34),
  ('statements -> statements statement','statements',2,'p_statements','Parser.py',41),
  ('statements -> statement','statements',1,'p_statements_list_single','Parser.py',49),
  ('statement -> assignment ;','statement',2,'p_statement','Parser.py',56),
  ('statement -> print ;','statement',2,'p_statement','Parser.py',57),
  ('statement -> continue ;','statement',2,'p_statement','Parser.py',58),
  ('statement -> break ;','statement',2,'p_statement','Parser.py',59),
  ('statement -> return ;','statement',2,'p_statement','Parser.py',60),
  ('statement -> if','statement',1,'p_statement','Parser.py',61),
  ('statement -> for','statement',1,'p_statement','Parser.py',62),
  ('statement -> while','statement',1,'p_statement','Parser.py',63),
  ('statement -> nested_statements','statement',1,'p_statement','Parser.py',64),
  ('for -> FOR ID ASSIGN expression : expression nested','for',7,'p_for','Parser.py',71),
  ('while -> WHILE condition nested','while',3,'p_while','Parser.py',78),
  ('break -> BREAK','break',1,'p_break','Parser.py',85),
  ('return -> RETURN expression','return',2,'p_return','Parser.py',92),
  ('continue -> CONTINUE','continue',1,'p_continue','Parser.py',99),
  ('print -> PRINT coma_separated','print',2,'p_print','Parser.py',106),
  ('coma_separated -> coma_separated , expression','coma_separated',3,'p_coma_separated','Parser.py',113),
  ('coma_separated -> expression','coma_separated',1,'p_coma_separated_single','Parser.py',121),
  ('assignment -> ID assign_symbol expression','assignment',3,'p_assignment','Parser.py',128),
  ('assignment -> ID slice assign_symbol expression','assignment',4,'p_slice_assignment','Parser.py',135),
  ('assign_symbol -> ASSIGN','assign_symbol',1,'p_assign','Parser.py',142),
  ('assign_symbol -> SUBASSIGN','assign_symbol',1,'p_assign','Parser.py',143),
  ('assign_symbol -> ADDASSIGN','assign_symbol',1,'p_assign','Parser.py',144),
  ('assign_symbol -> DIVASSIGN','assign_symbol',1,'p_assign','Parser.py',145),
  ('assign_symbol -> MULTASSIGN','assign_symbol',1,'p_assign','Parser.py',146),
  ('expression -> built_in_function ( expression_list )','expression',4,'p_expression_function_call','Parser.py',153),
  ('expression_list -> expression_list , expression','expression_list',3,'p_expression_list','Parser.py',160),
  ('expression_list -> expression','expression_list',1,'p_expression_list_single','Parser.py',167),
  ('expression -> term','expression',1,'p_expression_term','Parser.py',174),
  ('expression -> expression + term','expression',3,'p_expression_binary_ops','Parser.py',181),
  ('expression -> expression - term','expression',3,'p_expression_binary_ops','Parser.py',182),
  ('expression -> expression / term','expression',3,'p_expression_binary_ops','Parser.py',183),
  ('expression -> expression * term','expression',3,'p_expression_binary_ops','Parser.py',184),
  ('expression -> expression EQL term','expression',3,'p_expression_relational_ops','Parser.py',191),
  ('expression -> expression NEQ term','expression',3,'p_expression_relational_ops','Parser.py',192),
  ('expression -> expression GT term','expression',3,'p_expression_relational_ops','Parser.py',193),
  ('expression -> expression GTE term','expression',3,'p_expression_relational_ops','Parser.py',194),
  ('expression -> expression LT term','expression',3,'p_expression_relational_ops','Parser.py',195),
  ('expression -> expression LTE term','expression',3,'p_expression_relational_ops','Parser.py',196),
  ('expression -> - term','expression',2,'p_expression_unary','Parser.py',203),
  ('expression -> expression TRANSPOSE','expression',2,'p_vector_transpose','Parser.py',210),
  ('expression -> ID dot_operation term','expression',3,'p_expression_id_func_call','Parser.py',217),
  ('expression -> vector dot_operation term','expression',3,'p_expression_vector_func_call','Parser.py',225),
  ('dot_operation -> DOTADD','dot_operation',1,'p_dot_operation','Parser.py',232),
  ('dot_operation -> DOTSUB','dot_operation',1,'p_dot_operation','Parser.py',233),
  ('dot_operation -> DOTMUL','dot_operation',1,'p_dot_operation','Parser.py',234),
  ('dot_operation -> DOTDIV','dot_operation',1,'p_dot_operation','Parser.py',235),
  ('vector -> [ vector_contents ]','vector',3,'p_vector','Parser.py',242),
  ('vector -> [ ]','vector',2,'p_vector_empty','Parser.py',249),
  ('vector_contents -> vector_contents , vector_element','vector_contents',3,'p_vector_contents_list','Parser.py',256),
  ('vector_contents -> vector_element','vector_contents',1,'p_vector_contents_single','Parser.py',264),
  ('vector_element -> term','vector_element',1,'p_vector_element','Parser.py',271),
  ('slice -> [ slice_contents ]','slice',3,'p_slice','Parser.py',278),
  ('slice_contents -> slice_contents , range','slice_contents',3,'p_slice_contents','Parser.py',285),
  ('slice_contents -> range','slice_contents',1,'p_slice_contents_single','Parser.py',293),
  ('range -> expression : expression','range',3,'p_range','Parser.py',300),
  ('range -> expression :','range',2,'p_range_startless','Parser.py',307),
  ('range -> : expression','range',2,'p_range_endless','Parser.py',314),
  ('range -> expression','range',1,'p_range_simple','Parser.py',321),
  ('if -> IF condition nested','if',3,'p_if','Parser.py',328),
  ('if -> IF condition nested ELSE nested','if',5,'p_if_else','Parser.py',335),
  ('condition -> ( expression )','condition',3,'p_condition','Parser.py',342),
  ('nested -> statement','nested',1,'p_nested','Parser.py',349),
  ('nested_statements -> nested_empty','nested_statements',1,'p_nested_statements','Parser.py',357),
  ('nested_statements -> nested_statements_list','nested_statements',1,'p_nested_statements','Parser.py',358),
  ('nested_statements_list -> { statements }','nested_statements_list',3,'p_nested_statements_list','Parser.py',365),
  ('nested_empty -> { }','nested_empty',2,'p_nested_statements_empty','Parser.py',376),
  ('term -> ( expression )','term',3,'p_term','Parser.py',383),
  ('term -> vector','term',1,'p_term_vector','Parser.py',390),
  ('term -> INTNUM','term',1,'p_term_primitive_int','Parser.py',397),
  ('term -> FLOATNUM','term',1,'p_term_primitive_float','Parser.py',404),
  ('term -> STR','term',1,'p_term_primitive_str','Parser.py',411),
  ('term -> ID','term',1,'p_term_id','Parser.py',418),
  ('built_in_function -> EYE','built_in_function',1,'p_built_in_function','Parser.py',425),
  ('built_in_function -> ONES','built_in_function',1,'p_built_in_function','Parser.py',426),
  ('built_in_function -> ZEROS','built_in_function',1,'p_built_in_function','Parser.py',427),
]
