Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> statements
Rule 2     statements -> statement
Rule 3     statements -> statements statement
Rule 4     statement -> assignment ;
Rule 5     statement -> print ;
Rule 6     statement -> continue ;
Rule 7     statement -> break ;
Rule 8     statement -> return ;
Rule 9     statement -> if_statement
Rule 10    statement -> for
Rule 11    statement -> while
Rule 12    for -> FOR ID ASSIGN expression : expression nested
Rule 13    while -> WHILE condition nested
Rule 14    break -> BREAK
Rule 15    return -> RETURN expression
Rule 16    continue -> CONTINUE
Rule 17    print -> PRINT coma_separated
Rule 18    coma_separated -> expression
Rule 19    coma_separated -> coma_separated , expression
Rule 20    assignment -> ID assign_symbol expression
Rule 21    assignment -> ID slice assign_symbol expression
Rule 22    assign_symbol -> ASSIGN
Rule 23    assign_symbol -> SUBASSIGN
Rule 24    assign_symbol -> ADDASSIGN
Rule 25    assign_symbol -> DIVASSIGN
Rule 26    assign_symbol -> MULTASSIGN
Rule 27    expression -> built_in_function ( term )
Rule 28    expression -> term
Rule 29    expression -> expression + term
Rule 30    expression -> expression - term
Rule 31    expression -> expression / term
Rule 32    expression -> expression * term
Rule 33    expression -> expression EQL term
Rule 34    expression -> expression NEQ term
Rule 35    expression -> expression GT term
Rule 36    expression -> expression GTE term
Rule 37    expression -> expression LT term
Rule 38    expression -> expression LTE term
Rule 39    expression -> - term
Rule 40    vector -> ID TRANSPOSE
Rule 41    vector -> vector TRANSPOSE
Rule 42    expression -> ID dot_operation term
Rule 43    expression -> vector dot_operation term
Rule 44    dot_operation -> DOTADD
Rule 45    dot_operation -> DOTSUB
Rule 46    dot_operation -> DOTMUL
Rule 47    dot_operation -> DOTDIV
Rule 48    vector -> [ vector_contents ]
Rule 49    vector_contents -> vector_element
Rule 50    vector_contents -> vector_contents , vector_element
Rule 51    vector_element -> term
Rule 52    slice -> [ slice_contents ]
Rule 53    slice_contents -> range
Rule 54    slice_contents -> slice_contents , range
Rule 55    range -> term : term
Rule 56    range -> term :
Rule 57    range -> : term
Rule 58    range -> term
Rule 59    if_statement -> if optional_else_ifs optional_else
Rule 60    if -> IF condition nested
Rule 61    optional_else_ifs -> else_ifs
Rule 62    optional_else_ifs -> <empty>
Rule 63    else_ifs -> else_if
Rule 64    else_ifs -> else_ifs else_if
Rule 65    else_if -> ELSE IF condition nested
Rule 66    optional_else -> else
Rule 67    optional_else -> <empty>
Rule 68    else -> ELSE nested
Rule 69    condition -> ( expression )
Rule 70    nested -> { statements }
Rule 71    nested -> statement
Rule 72    term -> ( expression )
Rule 73    term -> vector
Rule 74    term -> INTNUM
Rule 75    term -> STR
Rule 76    term -> FLOATNUM
Rule 77    term -> ID
Rule 78    built_in_function -> EYE
Rule 79    built_in_function -> ONES
Rule 80    built_in_function -> ZEROS

Terminals, with rules where they appear

(                    : 27 69 72
)                    : 27 69 72
*                    : 32
+                    : 29
,                    : 19 50 54
-                    : 30 39
/                    : 31
:                    : 12 55 56 57
;                    : 4 5 6 7 8
ADDASSIGN            : 24
ASSIGN               : 12 22
BREAK                : 14
CONTINUE             : 16
DIVASSIGN            : 25
DOTADD               : 44
DOTDIV               : 47
DOTMUL               : 46
DOTSUB               : 45
ELSE                 : 65 68
EQL                  : 33
EYE                  : 78
FLOATNUM             : 76
FOR                  : 12
GT                   : 35
GTE                  : 36
ID                   : 12 20 21 40 42 77
IF                   : 60 65
INTNUM               : 74
LT                   : 37
LTE                  : 38
MULTASSIGN           : 26
NEQ                  : 34
ONES                 : 79
PRINT                : 17
RETURN               : 15
STR                  : 75
SUBASSIGN            : 23
TRANSPOSE            : 40 41
WHILE                : 13
ZEROS                : 80
[                    : 48 52
]                    : 48 52
error                : 
{                    : 70
}                    : 70

Nonterminals, with rules where they appear

assign_symbol        : 20 21
assignment           : 4
break                : 7
built_in_function    : 27
coma_separated       : 17 19
condition            : 13 60 65
continue             : 6
dot_operation        : 42 43
else                 : 66
else_if              : 63 64
else_ifs             : 61 64
expression           : 12 12 15 18 19 20 21 29 30 31 32 33 34 35 36 37 38 69 72
for                  : 10
if                   : 59
if_statement         : 9
nested               : 12 13 60 65 68
optional_else        : 59
optional_else_ifs    : 59
print                : 5
range                : 53 54
return               : 8
slice                : 21
slice_contents       : 52 54
start                : 0
statement            : 2 3 71
statements           : 1 3 70
term                 : 27 28 29 30 31 32 33 34 35 36 37 38 39 42 43 51 55 55 56 57 58
vector               : 41 43 73
vector_contents      : 48 50
vector_element       : 49 50
while                : 11

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . statements
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if_statement
    (10) statement -> . for
    (11) statement -> . while
    (20) assignment -> . ID assign_symbol expression
    (21) assignment -> . ID slice assign_symbol expression
    (17) print -> . PRINT coma_separated
    (16) continue -> . CONTINUE
    (14) break -> . BREAK
    (15) return -> . RETURN expression
    (59) if_statement -> . if optional_else_ifs optional_else
    (12) for -> . FOR ID ASSIGN expression : expression nested
    (13) while -> . WHILE condition nested
    (60) if -> . IF condition nested

    ID              shift and go to state 12
    PRINT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    RETURN          shift and go to state 16
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20

    start                          shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if_statement                   shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 17

state 1

    (0) S' -> start .



state 2

    (1) start -> statements .
    (3) statements -> statements . statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if_statement
    (10) statement -> . for
    (11) statement -> . while
    (20) assignment -> . ID assign_symbol expression
    (21) assignment -> . ID slice assign_symbol expression
    (17) print -> . PRINT coma_separated
    (16) continue -> . CONTINUE
    (14) break -> . BREAK
    (15) return -> . RETURN expression
    (59) if_statement -> . if optional_else_ifs optional_else
    (12) for -> . FOR ID ASSIGN expression : expression nested
    (13) while -> . WHILE condition nested
    (60) if -> . IF condition nested

    $end            reduce using rule 1 (start -> statements .)
    ID              shift and go to state 12
    PRINT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    RETURN          shift and go to state 16
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20

    statement                      shift and go to state 21
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if_statement                   shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 17

state 3

    (2) statements -> statement .

    ID              reduce using rule 2 (statements -> statement .)
    PRINT           reduce using rule 2 (statements -> statement .)
    CONTINUE        reduce using rule 2 (statements -> statement .)
    BREAK           reduce using rule 2 (statements -> statement .)
    RETURN          reduce using rule 2 (statements -> statement .)
    FOR             reduce using rule 2 (statements -> statement .)
    WHILE           reduce using rule 2 (statements -> statement .)
    IF              reduce using rule 2 (statements -> statement .)
    $end            reduce using rule 2 (statements -> statement .)
    }               reduce using rule 2 (statements -> statement .)


state 4

    (4) statement -> assignment . ;

    ;               shift and go to state 22


state 5

    (5) statement -> print . ;

    ;               shift and go to state 23


state 6

    (6) statement -> continue . ;

    ;               shift and go to state 24


state 7

    (7) statement -> break . ;

    ;               shift and go to state 25


state 8

    (8) statement -> return . ;

    ;               shift and go to state 26


state 9

    (9) statement -> if_statement .

    ID              reduce using rule 9 (statement -> if_statement .)
    PRINT           reduce using rule 9 (statement -> if_statement .)
    CONTINUE        reduce using rule 9 (statement -> if_statement .)
    BREAK           reduce using rule 9 (statement -> if_statement .)
    RETURN          reduce using rule 9 (statement -> if_statement .)
    FOR             reduce using rule 9 (statement -> if_statement .)
    WHILE           reduce using rule 9 (statement -> if_statement .)
    IF              reduce using rule 9 (statement -> if_statement .)
    $end            reduce using rule 9 (statement -> if_statement .)
    ELSE            reduce using rule 9 (statement -> if_statement .)
    }               reduce using rule 9 (statement -> if_statement .)


state 10

    (10) statement -> for .

    ID              reduce using rule 10 (statement -> for .)
    PRINT           reduce using rule 10 (statement -> for .)
    CONTINUE        reduce using rule 10 (statement -> for .)
    BREAK           reduce using rule 10 (statement -> for .)
    RETURN          reduce using rule 10 (statement -> for .)
    FOR             reduce using rule 10 (statement -> for .)
    WHILE           reduce using rule 10 (statement -> for .)
    IF              reduce using rule 10 (statement -> for .)
    $end            reduce using rule 10 (statement -> for .)
    ELSE            reduce using rule 10 (statement -> for .)
    }               reduce using rule 10 (statement -> for .)


state 11

    (11) statement -> while .

    ID              reduce using rule 11 (statement -> while .)
    PRINT           reduce using rule 11 (statement -> while .)
    CONTINUE        reduce using rule 11 (statement -> while .)
    BREAK           reduce using rule 11 (statement -> while .)
    RETURN          reduce using rule 11 (statement -> while .)
    FOR             reduce using rule 11 (statement -> while .)
    WHILE           reduce using rule 11 (statement -> while .)
    IF              reduce using rule 11 (statement -> while .)
    $end            reduce using rule 11 (statement -> while .)
    ELSE            reduce using rule 11 (statement -> while .)
    }               reduce using rule 11 (statement -> while .)


state 12

    (20) assignment -> ID . assign_symbol expression
    (21) assignment -> ID . slice assign_symbol expression
    (22) assign_symbol -> . ASSIGN
    (23) assign_symbol -> . SUBASSIGN
    (24) assign_symbol -> . ADDASSIGN
    (25) assign_symbol -> . DIVASSIGN
    (26) assign_symbol -> . MULTASSIGN
    (52) slice -> . [ slice_contents ]

    ASSIGN          shift and go to state 29
    SUBASSIGN       shift and go to state 30
    ADDASSIGN       shift and go to state 31
    DIVASSIGN       shift and go to state 32
    MULTASSIGN      shift and go to state 33
    [               shift and go to state 34

    assign_symbol                  shift and go to state 27
    slice                          shift and go to state 28

state 13

    (17) print -> PRINT . coma_separated
    (18) coma_separated -> . expression
    (19) coma_separated -> . coma_separated , expression
    (27) expression -> . built_in_function ( term )
    (28) expression -> . term
    (29) expression -> . expression + term
    (30) expression -> . expression - term
    (31) expression -> . expression / term
    (32) expression -> . expression * term
    (33) expression -> . expression EQL term
    (34) expression -> . expression NEQ term
    (35) expression -> . expression GT term
    (36) expression -> . expression GTE term
    (37) expression -> . expression LT term
    (38) expression -> . expression LTE term
    (39) expression -> . - term
    (42) expression -> . ID dot_operation term
    (43) expression -> . vector dot_operation term
    (78) built_in_function -> . EYE
    (79) built_in_function -> . ONES
    (80) built_in_function -> . ZEROS
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    [               shift and go to state 49

    coma_separated                 shift and go to state 35
    expression                     shift and go to state 36
    built_in_function              shift and go to state 37
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 14

    (16) continue -> CONTINUE .

    ;               reduce using rule 16 (continue -> CONTINUE .)


state 15

    (14) break -> BREAK .

    ;               reduce using rule 14 (break -> BREAK .)


state 16

    (15) return -> RETURN . expression
    (27) expression -> . built_in_function ( term )
    (28) expression -> . term
    (29) expression -> . expression + term
    (30) expression -> . expression - term
    (31) expression -> . expression / term
    (32) expression -> . expression * term
    (33) expression -> . expression EQL term
    (34) expression -> . expression NEQ term
    (35) expression -> . expression GT term
    (36) expression -> . expression GTE term
    (37) expression -> . expression LT term
    (38) expression -> . expression LTE term
    (39) expression -> . - term
    (42) expression -> . ID dot_operation term
    (43) expression -> . vector dot_operation term
    (78) built_in_function -> . EYE
    (79) built_in_function -> . ONES
    (80) built_in_function -> . ZEROS
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    [               shift and go to state 49

    expression                     shift and go to state 50
    built_in_function              shift and go to state 37
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 17

    (59) if_statement -> if . optional_else_ifs optional_else
    (61) optional_else_ifs -> . else_ifs
    (62) optional_else_ifs -> .
    (63) else_ifs -> . else_if
    (64) else_ifs -> . else_ifs else_if
    (65) else_if -> . ELSE IF condition nested

    ID              reduce using rule 62 (optional_else_ifs -> .)
    PRINT           reduce using rule 62 (optional_else_ifs -> .)
    CONTINUE        reduce using rule 62 (optional_else_ifs -> .)
    BREAK           reduce using rule 62 (optional_else_ifs -> .)
    RETURN          reduce using rule 62 (optional_else_ifs -> .)
    FOR             reduce using rule 62 (optional_else_ifs -> .)
    WHILE           reduce using rule 62 (optional_else_ifs -> .)
    IF              reduce using rule 62 (optional_else_ifs -> .)
    $end            reduce using rule 62 (optional_else_ifs -> .)
    }               reduce using rule 62 (optional_else_ifs -> .)
    ELSE            shift and go to state 54

  ! ELSE            [ reduce using rule 62 (optional_else_ifs -> .) ]

    optional_else_ifs              shift and go to state 51
    else_ifs                       shift and go to state 52
    else_if                        shift and go to state 53

state 18

    (12) for -> FOR . ID ASSIGN expression : expression nested

    ID              shift and go to state 55


state 19

    (13) while -> WHILE . condition nested
    (69) condition -> . ( expression )

    (               shift and go to state 57

    condition                      shift and go to state 56

state 20

    (60) if -> IF . condition nested
    (69) condition -> . ( expression )

    (               shift and go to state 57

    condition                      shift and go to state 58

state 21

    (3) statements -> statements statement .

    ID              reduce using rule 3 (statements -> statements statement .)
    PRINT           reduce using rule 3 (statements -> statements statement .)
    CONTINUE        reduce using rule 3 (statements -> statements statement .)
    BREAK           reduce using rule 3 (statements -> statements statement .)
    RETURN          reduce using rule 3 (statements -> statements statement .)
    FOR             reduce using rule 3 (statements -> statements statement .)
    WHILE           reduce using rule 3 (statements -> statements statement .)
    IF              reduce using rule 3 (statements -> statements statement .)
    $end            reduce using rule 3 (statements -> statements statement .)
    }               reduce using rule 3 (statements -> statements statement .)


state 22

    (4) statement -> assignment ; .

    ID              reduce using rule 4 (statement -> assignment ; .)
    PRINT           reduce using rule 4 (statement -> assignment ; .)
    CONTINUE        reduce using rule 4 (statement -> assignment ; .)
    BREAK           reduce using rule 4 (statement -> assignment ; .)
    RETURN          reduce using rule 4 (statement -> assignment ; .)
    FOR             reduce using rule 4 (statement -> assignment ; .)
    WHILE           reduce using rule 4 (statement -> assignment ; .)
    IF              reduce using rule 4 (statement -> assignment ; .)
    $end            reduce using rule 4 (statement -> assignment ; .)
    ELSE            reduce using rule 4 (statement -> assignment ; .)
    }               reduce using rule 4 (statement -> assignment ; .)


state 23

    (5) statement -> print ; .

    ID              reduce using rule 5 (statement -> print ; .)
    PRINT           reduce using rule 5 (statement -> print ; .)
    CONTINUE        reduce using rule 5 (statement -> print ; .)
    BREAK           reduce using rule 5 (statement -> print ; .)
    RETURN          reduce using rule 5 (statement -> print ; .)
    FOR             reduce using rule 5 (statement -> print ; .)
    WHILE           reduce using rule 5 (statement -> print ; .)
    IF              reduce using rule 5 (statement -> print ; .)
    $end            reduce using rule 5 (statement -> print ; .)
    ELSE            reduce using rule 5 (statement -> print ; .)
    }               reduce using rule 5 (statement -> print ; .)


state 24

    (6) statement -> continue ; .

    ID              reduce using rule 6 (statement -> continue ; .)
    PRINT           reduce using rule 6 (statement -> continue ; .)
    CONTINUE        reduce using rule 6 (statement -> continue ; .)
    BREAK           reduce using rule 6 (statement -> continue ; .)
    RETURN          reduce using rule 6 (statement -> continue ; .)
    FOR             reduce using rule 6 (statement -> continue ; .)
    WHILE           reduce using rule 6 (statement -> continue ; .)
    IF              reduce using rule 6 (statement -> continue ; .)
    $end            reduce using rule 6 (statement -> continue ; .)
    ELSE            reduce using rule 6 (statement -> continue ; .)
    }               reduce using rule 6 (statement -> continue ; .)


state 25

    (7) statement -> break ; .

    ID              reduce using rule 7 (statement -> break ; .)
    PRINT           reduce using rule 7 (statement -> break ; .)
    CONTINUE        reduce using rule 7 (statement -> break ; .)
    BREAK           reduce using rule 7 (statement -> break ; .)
    RETURN          reduce using rule 7 (statement -> break ; .)
    FOR             reduce using rule 7 (statement -> break ; .)
    WHILE           reduce using rule 7 (statement -> break ; .)
    IF              reduce using rule 7 (statement -> break ; .)
    $end            reduce using rule 7 (statement -> break ; .)
    ELSE            reduce using rule 7 (statement -> break ; .)
    }               reduce using rule 7 (statement -> break ; .)


state 26

    (8) statement -> return ; .

    ID              reduce using rule 8 (statement -> return ; .)
    PRINT           reduce using rule 8 (statement -> return ; .)
    CONTINUE        reduce using rule 8 (statement -> return ; .)
    BREAK           reduce using rule 8 (statement -> return ; .)
    RETURN          reduce using rule 8 (statement -> return ; .)
    FOR             reduce using rule 8 (statement -> return ; .)
    WHILE           reduce using rule 8 (statement -> return ; .)
    IF              reduce using rule 8 (statement -> return ; .)
    $end            reduce using rule 8 (statement -> return ; .)
    ELSE            reduce using rule 8 (statement -> return ; .)
    }               reduce using rule 8 (statement -> return ; .)


state 27

    (20) assignment -> ID assign_symbol . expression
    (27) expression -> . built_in_function ( term )
    (28) expression -> . term
    (29) expression -> . expression + term
    (30) expression -> . expression - term
    (31) expression -> . expression / term
    (32) expression -> . expression * term
    (33) expression -> . expression EQL term
    (34) expression -> . expression NEQ term
    (35) expression -> . expression GT term
    (36) expression -> . expression GTE term
    (37) expression -> . expression LT term
    (38) expression -> . expression LTE term
    (39) expression -> . - term
    (42) expression -> . ID dot_operation term
    (43) expression -> . vector dot_operation term
    (78) built_in_function -> . EYE
    (79) built_in_function -> . ONES
    (80) built_in_function -> . ZEROS
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    [               shift and go to state 49

    expression                     shift and go to state 59
    built_in_function              shift and go to state 37
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 28

    (21) assignment -> ID slice . assign_symbol expression
    (22) assign_symbol -> . ASSIGN
    (23) assign_symbol -> . SUBASSIGN
    (24) assign_symbol -> . ADDASSIGN
    (25) assign_symbol -> . DIVASSIGN
    (26) assign_symbol -> . MULTASSIGN

    ASSIGN          shift and go to state 29
    SUBASSIGN       shift and go to state 30
    ADDASSIGN       shift and go to state 31
    DIVASSIGN       shift and go to state 32
    MULTASSIGN      shift and go to state 33

    assign_symbol                  shift and go to state 60

state 29

    (22) assign_symbol -> ASSIGN .

    -               reduce using rule 22 (assign_symbol -> ASSIGN .)
    ID              reduce using rule 22 (assign_symbol -> ASSIGN .)
    EYE             reduce using rule 22 (assign_symbol -> ASSIGN .)
    ONES            reduce using rule 22 (assign_symbol -> ASSIGN .)
    ZEROS           reduce using rule 22 (assign_symbol -> ASSIGN .)
    (               reduce using rule 22 (assign_symbol -> ASSIGN .)
    INTNUM          reduce using rule 22 (assign_symbol -> ASSIGN .)
    STR             reduce using rule 22 (assign_symbol -> ASSIGN .)
    FLOATNUM        reduce using rule 22 (assign_symbol -> ASSIGN .)
    [               reduce using rule 22 (assign_symbol -> ASSIGN .)


state 30

    (23) assign_symbol -> SUBASSIGN .

    -               reduce using rule 23 (assign_symbol -> SUBASSIGN .)
    ID              reduce using rule 23 (assign_symbol -> SUBASSIGN .)
    EYE             reduce using rule 23 (assign_symbol -> SUBASSIGN .)
    ONES            reduce using rule 23 (assign_symbol -> SUBASSIGN .)
    ZEROS           reduce using rule 23 (assign_symbol -> SUBASSIGN .)
    (               reduce using rule 23 (assign_symbol -> SUBASSIGN .)
    INTNUM          reduce using rule 23 (assign_symbol -> SUBASSIGN .)
    STR             reduce using rule 23 (assign_symbol -> SUBASSIGN .)
    FLOATNUM        reduce using rule 23 (assign_symbol -> SUBASSIGN .)
    [               reduce using rule 23 (assign_symbol -> SUBASSIGN .)


state 31

    (24) assign_symbol -> ADDASSIGN .

    -               reduce using rule 24 (assign_symbol -> ADDASSIGN .)
    ID              reduce using rule 24 (assign_symbol -> ADDASSIGN .)
    EYE             reduce using rule 24 (assign_symbol -> ADDASSIGN .)
    ONES            reduce using rule 24 (assign_symbol -> ADDASSIGN .)
    ZEROS           reduce using rule 24 (assign_symbol -> ADDASSIGN .)
    (               reduce using rule 24 (assign_symbol -> ADDASSIGN .)
    INTNUM          reduce using rule 24 (assign_symbol -> ADDASSIGN .)
    STR             reduce using rule 24 (assign_symbol -> ADDASSIGN .)
    FLOATNUM        reduce using rule 24 (assign_symbol -> ADDASSIGN .)
    [               reduce using rule 24 (assign_symbol -> ADDASSIGN .)


state 32

    (25) assign_symbol -> DIVASSIGN .

    -               reduce using rule 25 (assign_symbol -> DIVASSIGN .)
    ID              reduce using rule 25 (assign_symbol -> DIVASSIGN .)
    EYE             reduce using rule 25 (assign_symbol -> DIVASSIGN .)
    ONES            reduce using rule 25 (assign_symbol -> DIVASSIGN .)
    ZEROS           reduce using rule 25 (assign_symbol -> DIVASSIGN .)
    (               reduce using rule 25 (assign_symbol -> DIVASSIGN .)
    INTNUM          reduce using rule 25 (assign_symbol -> DIVASSIGN .)
    STR             reduce using rule 25 (assign_symbol -> DIVASSIGN .)
    FLOATNUM        reduce using rule 25 (assign_symbol -> DIVASSIGN .)
    [               reduce using rule 25 (assign_symbol -> DIVASSIGN .)


state 33

    (26) assign_symbol -> MULTASSIGN .

    -               reduce using rule 26 (assign_symbol -> MULTASSIGN .)
    ID              reduce using rule 26 (assign_symbol -> MULTASSIGN .)
    EYE             reduce using rule 26 (assign_symbol -> MULTASSIGN .)
    ONES            reduce using rule 26 (assign_symbol -> MULTASSIGN .)
    ZEROS           reduce using rule 26 (assign_symbol -> MULTASSIGN .)
    (               reduce using rule 26 (assign_symbol -> MULTASSIGN .)
    INTNUM          reduce using rule 26 (assign_symbol -> MULTASSIGN .)
    STR             reduce using rule 26 (assign_symbol -> MULTASSIGN .)
    FLOATNUM        reduce using rule 26 (assign_symbol -> MULTASSIGN .)
    [               reduce using rule 26 (assign_symbol -> MULTASSIGN .)


state 34

    (52) slice -> [ . slice_contents ]
    (53) slice_contents -> . range
    (54) slice_contents -> . slice_contents , range
    (55) range -> . term : term
    (56) range -> . term :
    (57) range -> . : term
    (58) range -> . term
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    :               shift and go to state 64
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    ID              shift and go to state 66
    [               shift and go to state 49

    slice_contents                 shift and go to state 61
    range                          shift and go to state 62
    term                           shift and go to state 63
    vector                         shift and go to state 65

state 35

    (17) print -> PRINT coma_separated .
    (19) coma_separated -> coma_separated . , expression

    ;               reduce using rule 17 (print -> PRINT coma_separated .)
    ,               shift and go to state 67


state 36

    (18) coma_separated -> expression .
    (29) expression -> expression . + term
    (30) expression -> expression . - term
    (31) expression -> expression . / term
    (32) expression -> expression . * term
    (33) expression -> expression . EQL term
    (34) expression -> expression . NEQ term
    (35) expression -> expression . GT term
    (36) expression -> expression . GTE term
    (37) expression -> expression . LT term
    (38) expression -> expression . LTE term

    ,               reduce using rule 18 (coma_separated -> expression .)
    ;               reduce using rule 18 (coma_separated -> expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    EQL             shift and go to state 72
    NEQ             shift and go to state 73
    GT              shift and go to state 74
    GTE             shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77


state 37

    (27) expression -> built_in_function . ( term )

    (               shift and go to state 78


state 38

    (72) term -> ( . expression )
    (27) expression -> . built_in_function ( term )
    (28) expression -> . term
    (29) expression -> . expression + term
    (30) expression -> . expression - term
    (31) expression -> . expression / term
    (32) expression -> . expression * term
    (33) expression -> . expression EQL term
    (34) expression -> . expression NEQ term
    (35) expression -> . expression GT term
    (36) expression -> . expression GTE term
    (37) expression -> . expression LT term
    (38) expression -> . expression LTE term
    (39) expression -> . - term
    (42) expression -> . ID dot_operation term
    (43) expression -> . vector dot_operation term
    (78) built_in_function -> . EYE
    (79) built_in_function -> . ONES
    (80) built_in_function -> . ZEROS
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    [               shift and go to state 49

    expression                     shift and go to state 79
    built_in_function              shift and go to state 37
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 39

    (28) expression -> term .

    +               reduce using rule 28 (expression -> term .)
    -               reduce using rule 28 (expression -> term .)
    /               reduce using rule 28 (expression -> term .)
    *               reduce using rule 28 (expression -> term .)
    EQL             reduce using rule 28 (expression -> term .)
    NEQ             reduce using rule 28 (expression -> term .)
    GT              reduce using rule 28 (expression -> term .)
    GTE             reduce using rule 28 (expression -> term .)
    LT              reduce using rule 28 (expression -> term .)
    LTE             reduce using rule 28 (expression -> term .)
    ,               reduce using rule 28 (expression -> term .)
    ;               reduce using rule 28 (expression -> term .)
    )               reduce using rule 28 (expression -> term .)
    :               reduce using rule 28 (expression -> term .)
    {               reduce using rule 28 (expression -> term .)
    ID              reduce using rule 28 (expression -> term .)
    PRINT           reduce using rule 28 (expression -> term .)
    CONTINUE        reduce using rule 28 (expression -> term .)
    BREAK           reduce using rule 28 (expression -> term .)
    RETURN          reduce using rule 28 (expression -> term .)
    FOR             reduce using rule 28 (expression -> term .)
    WHILE           reduce using rule 28 (expression -> term .)
    IF              reduce using rule 28 (expression -> term .)


state 40

    (39) expression -> - . term
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    ID              shift and go to state 66
    [               shift and go to state 49

    term                           shift and go to state 80
    vector                         shift and go to state 65

state 41

    (42) expression -> ID . dot_operation term
    (77) term -> ID .
    (40) vector -> ID . TRANSPOSE
    (44) dot_operation -> . DOTADD
    (45) dot_operation -> . DOTSUB
    (46) dot_operation -> . DOTMUL
    (47) dot_operation -> . DOTDIV

    +               reduce using rule 77 (term -> ID .)
    -               reduce using rule 77 (term -> ID .)
    /               reduce using rule 77 (term -> ID .)
    *               reduce using rule 77 (term -> ID .)
    EQL             reduce using rule 77 (term -> ID .)
    NEQ             reduce using rule 77 (term -> ID .)
    GT              reduce using rule 77 (term -> ID .)
    GTE             reduce using rule 77 (term -> ID .)
    LT              reduce using rule 77 (term -> ID .)
    LTE             reduce using rule 77 (term -> ID .)
    ,               reduce using rule 77 (term -> ID .)
    ;               reduce using rule 77 (term -> ID .)
    )               reduce using rule 77 (term -> ID .)
    :               reduce using rule 77 (term -> ID .)
    {               reduce using rule 77 (term -> ID .)
    ID              reduce using rule 77 (term -> ID .)
    PRINT           reduce using rule 77 (term -> ID .)
    CONTINUE        reduce using rule 77 (term -> ID .)
    BREAK           reduce using rule 77 (term -> ID .)
    RETURN          reduce using rule 77 (term -> ID .)
    FOR             reduce using rule 77 (term -> ID .)
    WHILE           reduce using rule 77 (term -> ID .)
    IF              reduce using rule 77 (term -> ID .)
    TRANSPOSE       shift and go to state 82
    DOTADD          shift and go to state 83
    DOTSUB          shift and go to state 84
    DOTMUL          shift and go to state 85
    DOTDIV          shift and go to state 86

    dot_operation                  shift and go to state 81

state 42

    (43) expression -> vector . dot_operation term
    (73) term -> vector .
    (41) vector -> vector . TRANSPOSE
    (44) dot_operation -> . DOTADD
    (45) dot_operation -> . DOTSUB
    (46) dot_operation -> . DOTMUL
    (47) dot_operation -> . DOTDIV

    +               reduce using rule 73 (term -> vector .)
    -               reduce using rule 73 (term -> vector .)
    /               reduce using rule 73 (term -> vector .)
    *               reduce using rule 73 (term -> vector .)
    EQL             reduce using rule 73 (term -> vector .)
    NEQ             reduce using rule 73 (term -> vector .)
    GT              reduce using rule 73 (term -> vector .)
    GTE             reduce using rule 73 (term -> vector .)
    LT              reduce using rule 73 (term -> vector .)
    LTE             reduce using rule 73 (term -> vector .)
    ,               reduce using rule 73 (term -> vector .)
    ;               reduce using rule 73 (term -> vector .)
    )               reduce using rule 73 (term -> vector .)
    :               reduce using rule 73 (term -> vector .)
    {               reduce using rule 73 (term -> vector .)
    ID              reduce using rule 73 (term -> vector .)
    PRINT           reduce using rule 73 (term -> vector .)
    CONTINUE        reduce using rule 73 (term -> vector .)
    BREAK           reduce using rule 73 (term -> vector .)
    RETURN          reduce using rule 73 (term -> vector .)
    FOR             reduce using rule 73 (term -> vector .)
    WHILE           reduce using rule 73 (term -> vector .)
    IF              reduce using rule 73 (term -> vector .)
    TRANSPOSE       shift and go to state 88
    DOTADD          shift and go to state 83
    DOTSUB          shift and go to state 84
    DOTMUL          shift and go to state 85
    DOTDIV          shift and go to state 86

    dot_operation                  shift and go to state 87

state 43

    (78) built_in_function -> EYE .

    (               reduce using rule 78 (built_in_function -> EYE .)


state 44

    (79) built_in_function -> ONES .

    (               reduce using rule 79 (built_in_function -> ONES .)


state 45

    (80) built_in_function -> ZEROS .

    (               reduce using rule 80 (built_in_function -> ZEROS .)


state 46

    (74) term -> INTNUM .

    +               reduce using rule 74 (term -> INTNUM .)
    -               reduce using rule 74 (term -> INTNUM .)
    /               reduce using rule 74 (term -> INTNUM .)
    *               reduce using rule 74 (term -> INTNUM .)
    EQL             reduce using rule 74 (term -> INTNUM .)
    NEQ             reduce using rule 74 (term -> INTNUM .)
    GT              reduce using rule 74 (term -> INTNUM .)
    GTE             reduce using rule 74 (term -> INTNUM .)
    LT              reduce using rule 74 (term -> INTNUM .)
    LTE             reduce using rule 74 (term -> INTNUM .)
    ,               reduce using rule 74 (term -> INTNUM .)
    ;               reduce using rule 74 (term -> INTNUM .)
    :               reduce using rule 74 (term -> INTNUM .)
    ]               reduce using rule 74 (term -> INTNUM .)
    )               reduce using rule 74 (term -> INTNUM .)
    {               reduce using rule 74 (term -> INTNUM .)
    ID              reduce using rule 74 (term -> INTNUM .)
    PRINT           reduce using rule 74 (term -> INTNUM .)
    CONTINUE        reduce using rule 74 (term -> INTNUM .)
    BREAK           reduce using rule 74 (term -> INTNUM .)
    RETURN          reduce using rule 74 (term -> INTNUM .)
    FOR             reduce using rule 74 (term -> INTNUM .)
    WHILE           reduce using rule 74 (term -> INTNUM .)
    IF              reduce using rule 74 (term -> INTNUM .)


state 47

    (75) term -> STR .

    +               reduce using rule 75 (term -> STR .)
    -               reduce using rule 75 (term -> STR .)
    /               reduce using rule 75 (term -> STR .)
    *               reduce using rule 75 (term -> STR .)
    EQL             reduce using rule 75 (term -> STR .)
    NEQ             reduce using rule 75 (term -> STR .)
    GT              reduce using rule 75 (term -> STR .)
    GTE             reduce using rule 75 (term -> STR .)
    LT              reduce using rule 75 (term -> STR .)
    LTE             reduce using rule 75 (term -> STR .)
    ,               reduce using rule 75 (term -> STR .)
    ;               reduce using rule 75 (term -> STR .)
    :               reduce using rule 75 (term -> STR .)
    ]               reduce using rule 75 (term -> STR .)
    )               reduce using rule 75 (term -> STR .)
    {               reduce using rule 75 (term -> STR .)
    ID              reduce using rule 75 (term -> STR .)
    PRINT           reduce using rule 75 (term -> STR .)
    CONTINUE        reduce using rule 75 (term -> STR .)
    BREAK           reduce using rule 75 (term -> STR .)
    RETURN          reduce using rule 75 (term -> STR .)
    FOR             reduce using rule 75 (term -> STR .)
    WHILE           reduce using rule 75 (term -> STR .)
    IF              reduce using rule 75 (term -> STR .)


state 48

    (76) term -> FLOATNUM .

    +               reduce using rule 76 (term -> FLOATNUM .)
    -               reduce using rule 76 (term -> FLOATNUM .)
    /               reduce using rule 76 (term -> FLOATNUM .)
    *               reduce using rule 76 (term -> FLOATNUM .)
    EQL             reduce using rule 76 (term -> FLOATNUM .)
    NEQ             reduce using rule 76 (term -> FLOATNUM .)
    GT              reduce using rule 76 (term -> FLOATNUM .)
    GTE             reduce using rule 76 (term -> FLOATNUM .)
    LT              reduce using rule 76 (term -> FLOATNUM .)
    LTE             reduce using rule 76 (term -> FLOATNUM .)
    ,               reduce using rule 76 (term -> FLOATNUM .)
    ;               reduce using rule 76 (term -> FLOATNUM .)
    :               reduce using rule 76 (term -> FLOATNUM .)
    ]               reduce using rule 76 (term -> FLOATNUM .)
    )               reduce using rule 76 (term -> FLOATNUM .)
    {               reduce using rule 76 (term -> FLOATNUM .)
    ID              reduce using rule 76 (term -> FLOATNUM .)
    PRINT           reduce using rule 76 (term -> FLOATNUM .)
    CONTINUE        reduce using rule 76 (term -> FLOATNUM .)
    BREAK           reduce using rule 76 (term -> FLOATNUM .)
    RETURN          reduce using rule 76 (term -> FLOATNUM .)
    FOR             reduce using rule 76 (term -> FLOATNUM .)
    WHILE           reduce using rule 76 (term -> FLOATNUM .)
    IF              reduce using rule 76 (term -> FLOATNUM .)


state 49

    (48) vector -> [ . vector_contents ]
    (49) vector_contents -> . vector_element
    (50) vector_contents -> . vector_contents , vector_element
    (51) vector_element -> . term
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    ID              shift and go to state 66
    [               shift and go to state 49

    vector_contents                shift and go to state 89
    vector_element                 shift and go to state 90
    term                           shift and go to state 91
    vector                         shift and go to state 65

state 50

    (15) return -> RETURN expression .
    (29) expression -> expression . + term
    (30) expression -> expression . - term
    (31) expression -> expression . / term
    (32) expression -> expression . * term
    (33) expression -> expression . EQL term
    (34) expression -> expression . NEQ term
    (35) expression -> expression . GT term
    (36) expression -> expression . GTE term
    (37) expression -> expression . LT term
    (38) expression -> expression . LTE term

    ;               reduce using rule 15 (return -> RETURN expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    EQL             shift and go to state 72
    NEQ             shift and go to state 73
    GT              shift and go to state 74
    GTE             shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77


state 51

    (59) if_statement -> if optional_else_ifs . optional_else
    (66) optional_else -> . else
    (67) optional_else -> .
    (68) else -> . ELSE nested

    ID              reduce using rule 67 (optional_else -> .)
    PRINT           reduce using rule 67 (optional_else -> .)
    CONTINUE        reduce using rule 67 (optional_else -> .)
    BREAK           reduce using rule 67 (optional_else -> .)
    RETURN          reduce using rule 67 (optional_else -> .)
    FOR             reduce using rule 67 (optional_else -> .)
    WHILE           reduce using rule 67 (optional_else -> .)
    IF              reduce using rule 67 (optional_else -> .)
    $end            reduce using rule 67 (optional_else -> .)
    }               reduce using rule 67 (optional_else -> .)
    ELSE            shift and go to state 94

  ! ELSE            [ reduce using rule 67 (optional_else -> .) ]

    optional_else                  shift and go to state 92
    else                           shift and go to state 93

state 52

    (61) optional_else_ifs -> else_ifs .
    (64) else_ifs -> else_ifs . else_if
    (65) else_if -> . ELSE IF condition nested

  ! shift/reduce conflict for ELSE resolved as shift
    ID              reduce using rule 61 (optional_else_ifs -> else_ifs .)
    PRINT           reduce using rule 61 (optional_else_ifs -> else_ifs .)
    CONTINUE        reduce using rule 61 (optional_else_ifs -> else_ifs .)
    BREAK           reduce using rule 61 (optional_else_ifs -> else_ifs .)
    RETURN          reduce using rule 61 (optional_else_ifs -> else_ifs .)
    FOR             reduce using rule 61 (optional_else_ifs -> else_ifs .)
    WHILE           reduce using rule 61 (optional_else_ifs -> else_ifs .)
    IF              reduce using rule 61 (optional_else_ifs -> else_ifs .)
    $end            reduce using rule 61 (optional_else_ifs -> else_ifs .)
    }               reduce using rule 61 (optional_else_ifs -> else_ifs .)
    ELSE            shift and go to state 54

  ! ELSE            [ reduce using rule 61 (optional_else_ifs -> else_ifs .) ]

    else_if                        shift and go to state 95

state 53

    (63) else_ifs -> else_if .

    ELSE            reduce using rule 63 (else_ifs -> else_if .)
    ID              reduce using rule 63 (else_ifs -> else_if .)
    PRINT           reduce using rule 63 (else_ifs -> else_if .)
    CONTINUE        reduce using rule 63 (else_ifs -> else_if .)
    BREAK           reduce using rule 63 (else_ifs -> else_if .)
    RETURN          reduce using rule 63 (else_ifs -> else_if .)
    FOR             reduce using rule 63 (else_ifs -> else_if .)
    WHILE           reduce using rule 63 (else_ifs -> else_if .)
    IF              reduce using rule 63 (else_ifs -> else_if .)
    $end            reduce using rule 63 (else_ifs -> else_if .)
    }               reduce using rule 63 (else_ifs -> else_if .)


state 54

    (65) else_if -> ELSE . IF condition nested

    IF              shift and go to state 96


state 55

    (12) for -> FOR ID . ASSIGN expression : expression nested

    ASSIGN          shift and go to state 97


state 56

    (13) while -> WHILE condition . nested
    (70) nested -> . { statements }
    (71) nested -> . statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if_statement
    (10) statement -> . for
    (11) statement -> . while
    (20) assignment -> . ID assign_symbol expression
    (21) assignment -> . ID slice assign_symbol expression
    (17) print -> . PRINT coma_separated
    (16) continue -> . CONTINUE
    (14) break -> . BREAK
    (15) return -> . RETURN expression
    (59) if_statement -> . if optional_else_ifs optional_else
    (12) for -> . FOR ID ASSIGN expression : expression nested
    (13) while -> . WHILE condition nested
    (60) if -> . IF condition nested

    {               shift and go to state 99
    ID              shift and go to state 12
    PRINT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    RETURN          shift and go to state 16
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20

    nested                         shift and go to state 98
    statement                      shift and go to state 100
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if_statement                   shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 17

state 57

    (69) condition -> ( . expression )
    (27) expression -> . built_in_function ( term )
    (28) expression -> . term
    (29) expression -> . expression + term
    (30) expression -> . expression - term
    (31) expression -> . expression / term
    (32) expression -> . expression * term
    (33) expression -> . expression EQL term
    (34) expression -> . expression NEQ term
    (35) expression -> . expression GT term
    (36) expression -> . expression GTE term
    (37) expression -> . expression LT term
    (38) expression -> . expression LTE term
    (39) expression -> . - term
    (42) expression -> . ID dot_operation term
    (43) expression -> . vector dot_operation term
    (78) built_in_function -> . EYE
    (79) built_in_function -> . ONES
    (80) built_in_function -> . ZEROS
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    [               shift and go to state 49

    expression                     shift and go to state 101
    built_in_function              shift and go to state 37
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 58

    (60) if -> IF condition . nested
    (70) nested -> . { statements }
    (71) nested -> . statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if_statement
    (10) statement -> . for
    (11) statement -> . while
    (20) assignment -> . ID assign_symbol expression
    (21) assignment -> . ID slice assign_symbol expression
    (17) print -> . PRINT coma_separated
    (16) continue -> . CONTINUE
    (14) break -> . BREAK
    (15) return -> . RETURN expression
    (59) if_statement -> . if optional_else_ifs optional_else
    (12) for -> . FOR ID ASSIGN expression : expression nested
    (13) while -> . WHILE condition nested
    (60) if -> . IF condition nested

    {               shift and go to state 99
    ID              shift and go to state 12
    PRINT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    RETURN          shift and go to state 16
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20

    nested                         shift and go to state 102
    statement                      shift and go to state 100
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if_statement                   shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 17

state 59

    (20) assignment -> ID assign_symbol expression .
    (29) expression -> expression . + term
    (30) expression -> expression . - term
    (31) expression -> expression . / term
    (32) expression -> expression . * term
    (33) expression -> expression . EQL term
    (34) expression -> expression . NEQ term
    (35) expression -> expression . GT term
    (36) expression -> expression . GTE term
    (37) expression -> expression . LT term
    (38) expression -> expression . LTE term

    ;               reduce using rule 20 (assignment -> ID assign_symbol expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    EQL             shift and go to state 72
    NEQ             shift and go to state 73
    GT              shift and go to state 74
    GTE             shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77


state 60

    (21) assignment -> ID slice assign_symbol . expression
    (27) expression -> . built_in_function ( term )
    (28) expression -> . term
    (29) expression -> . expression + term
    (30) expression -> . expression - term
    (31) expression -> . expression / term
    (32) expression -> . expression * term
    (33) expression -> . expression EQL term
    (34) expression -> . expression NEQ term
    (35) expression -> . expression GT term
    (36) expression -> . expression GTE term
    (37) expression -> . expression LT term
    (38) expression -> . expression LTE term
    (39) expression -> . - term
    (42) expression -> . ID dot_operation term
    (43) expression -> . vector dot_operation term
    (78) built_in_function -> . EYE
    (79) built_in_function -> . ONES
    (80) built_in_function -> . ZEROS
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    [               shift and go to state 49

    expression                     shift and go to state 103
    built_in_function              shift and go to state 37
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 61

    (52) slice -> [ slice_contents . ]
    (54) slice_contents -> slice_contents . , range

    ]               shift and go to state 104
    ,               shift and go to state 105


state 62

    (53) slice_contents -> range .

    ]               reduce using rule 53 (slice_contents -> range .)
    ,               reduce using rule 53 (slice_contents -> range .)


state 63

    (55) range -> term . : term
    (56) range -> term . :
    (58) range -> term .

    :               shift and go to state 106
    ]               reduce using rule 58 (range -> term .)
    ,               reduce using rule 58 (range -> term .)


state 64

    (57) range -> : . term
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    ID              shift and go to state 66
    [               shift and go to state 49

    term                           shift and go to state 107
    vector                         shift and go to state 65

state 65

    (73) term -> vector .
    (41) vector -> vector . TRANSPOSE

    :               reduce using rule 73 (term -> vector .)
    ]               reduce using rule 73 (term -> vector .)
    ,               reduce using rule 73 (term -> vector .)
    +               reduce using rule 73 (term -> vector .)
    -               reduce using rule 73 (term -> vector .)
    /               reduce using rule 73 (term -> vector .)
    *               reduce using rule 73 (term -> vector .)
    EQL             reduce using rule 73 (term -> vector .)
    NEQ             reduce using rule 73 (term -> vector .)
    GT              reduce using rule 73 (term -> vector .)
    GTE             reduce using rule 73 (term -> vector .)
    LT              reduce using rule 73 (term -> vector .)
    LTE             reduce using rule 73 (term -> vector .)
    ;               reduce using rule 73 (term -> vector .)
    )               reduce using rule 73 (term -> vector .)
    {               reduce using rule 73 (term -> vector .)
    ID              reduce using rule 73 (term -> vector .)
    PRINT           reduce using rule 73 (term -> vector .)
    CONTINUE        reduce using rule 73 (term -> vector .)
    BREAK           reduce using rule 73 (term -> vector .)
    RETURN          reduce using rule 73 (term -> vector .)
    FOR             reduce using rule 73 (term -> vector .)
    WHILE           reduce using rule 73 (term -> vector .)
    IF              reduce using rule 73 (term -> vector .)
    TRANSPOSE       shift and go to state 88


state 66

    (77) term -> ID .
    (40) vector -> ID . TRANSPOSE

    :               reduce using rule 77 (term -> ID .)
    ]               reduce using rule 77 (term -> ID .)
    ,               reduce using rule 77 (term -> ID .)
    +               reduce using rule 77 (term -> ID .)
    -               reduce using rule 77 (term -> ID .)
    /               reduce using rule 77 (term -> ID .)
    *               reduce using rule 77 (term -> ID .)
    EQL             reduce using rule 77 (term -> ID .)
    NEQ             reduce using rule 77 (term -> ID .)
    GT              reduce using rule 77 (term -> ID .)
    GTE             reduce using rule 77 (term -> ID .)
    LT              reduce using rule 77 (term -> ID .)
    LTE             reduce using rule 77 (term -> ID .)
    ;               reduce using rule 77 (term -> ID .)
    )               reduce using rule 77 (term -> ID .)
    {               reduce using rule 77 (term -> ID .)
    ID              reduce using rule 77 (term -> ID .)
    PRINT           reduce using rule 77 (term -> ID .)
    CONTINUE        reduce using rule 77 (term -> ID .)
    BREAK           reduce using rule 77 (term -> ID .)
    RETURN          reduce using rule 77 (term -> ID .)
    FOR             reduce using rule 77 (term -> ID .)
    WHILE           reduce using rule 77 (term -> ID .)
    IF              reduce using rule 77 (term -> ID .)
    TRANSPOSE       shift and go to state 82


state 67

    (19) coma_separated -> coma_separated , . expression
    (27) expression -> . built_in_function ( term )
    (28) expression -> . term
    (29) expression -> . expression + term
    (30) expression -> . expression - term
    (31) expression -> . expression / term
    (32) expression -> . expression * term
    (33) expression -> . expression EQL term
    (34) expression -> . expression NEQ term
    (35) expression -> . expression GT term
    (36) expression -> . expression GTE term
    (37) expression -> . expression LT term
    (38) expression -> . expression LTE term
    (39) expression -> . - term
    (42) expression -> . ID dot_operation term
    (43) expression -> . vector dot_operation term
    (78) built_in_function -> . EYE
    (79) built_in_function -> . ONES
    (80) built_in_function -> . ZEROS
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    [               shift and go to state 49

    expression                     shift and go to state 108
    built_in_function              shift and go to state 37
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 68

    (29) expression -> expression + . term
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    ID              shift and go to state 66
    [               shift and go to state 49

    term                           shift and go to state 109
    vector                         shift and go to state 65

state 69

    (30) expression -> expression - . term
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    ID              shift and go to state 66
    [               shift and go to state 49

    term                           shift and go to state 110
    vector                         shift and go to state 65

state 70

    (31) expression -> expression / . term
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    ID              shift and go to state 66
    [               shift and go to state 49

    term                           shift and go to state 111
    vector                         shift and go to state 65

state 71

    (32) expression -> expression * . term
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    ID              shift and go to state 66
    [               shift and go to state 49

    term                           shift and go to state 112
    vector                         shift and go to state 65

state 72

    (33) expression -> expression EQL . term
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    ID              shift and go to state 66
    [               shift and go to state 49

    term                           shift and go to state 113
    vector                         shift and go to state 65

state 73

    (34) expression -> expression NEQ . term
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    ID              shift and go to state 66
    [               shift and go to state 49

    term                           shift and go to state 114
    vector                         shift and go to state 65

state 74

    (35) expression -> expression GT . term
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    ID              shift and go to state 66
    [               shift and go to state 49

    term                           shift and go to state 115
    vector                         shift and go to state 65

state 75

    (36) expression -> expression GTE . term
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    ID              shift and go to state 66
    [               shift and go to state 49

    term                           shift and go to state 116
    vector                         shift and go to state 65

state 76

    (37) expression -> expression LT . term
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    ID              shift and go to state 66
    [               shift and go to state 49

    term                           shift and go to state 117
    vector                         shift and go to state 65

state 77

    (38) expression -> expression LTE . term
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    ID              shift and go to state 66
    [               shift and go to state 49

    term                           shift and go to state 118
    vector                         shift and go to state 65

state 78

    (27) expression -> built_in_function ( . term )
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    ID              shift and go to state 66
    [               shift and go to state 49

    term                           shift and go to state 119
    vector                         shift and go to state 65

state 79

    (72) term -> ( expression . )
    (29) expression -> expression . + term
    (30) expression -> expression . - term
    (31) expression -> expression . / term
    (32) expression -> expression . * term
    (33) expression -> expression . EQL term
    (34) expression -> expression . NEQ term
    (35) expression -> expression . GT term
    (36) expression -> expression . GTE term
    (37) expression -> expression . LT term
    (38) expression -> expression . LTE term

    )               shift and go to state 120
    +               shift and go to state 68
    -               shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    EQL             shift and go to state 72
    NEQ             shift and go to state 73
    GT              shift and go to state 74
    GTE             shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77


state 80

    (39) expression -> - term .

    +               reduce using rule 39 (expression -> - term .)
    -               reduce using rule 39 (expression -> - term .)
    /               reduce using rule 39 (expression -> - term .)
    *               reduce using rule 39 (expression -> - term .)
    EQL             reduce using rule 39 (expression -> - term .)
    NEQ             reduce using rule 39 (expression -> - term .)
    GT              reduce using rule 39 (expression -> - term .)
    GTE             reduce using rule 39 (expression -> - term .)
    LT              reduce using rule 39 (expression -> - term .)
    LTE             reduce using rule 39 (expression -> - term .)
    ,               reduce using rule 39 (expression -> - term .)
    ;               reduce using rule 39 (expression -> - term .)
    )               reduce using rule 39 (expression -> - term .)
    :               reduce using rule 39 (expression -> - term .)
    {               reduce using rule 39 (expression -> - term .)
    ID              reduce using rule 39 (expression -> - term .)
    PRINT           reduce using rule 39 (expression -> - term .)
    CONTINUE        reduce using rule 39 (expression -> - term .)
    BREAK           reduce using rule 39 (expression -> - term .)
    RETURN          reduce using rule 39 (expression -> - term .)
    FOR             reduce using rule 39 (expression -> - term .)
    WHILE           reduce using rule 39 (expression -> - term .)
    IF              reduce using rule 39 (expression -> - term .)


state 81

    (42) expression -> ID dot_operation . term
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    ID              shift and go to state 66
    [               shift and go to state 49

    term                           shift and go to state 121
    vector                         shift and go to state 65

state 82

    (40) vector -> ID TRANSPOSE .

    TRANSPOSE       reduce using rule 40 (vector -> ID TRANSPOSE .)
    DOTADD          reduce using rule 40 (vector -> ID TRANSPOSE .)
    DOTSUB          reduce using rule 40 (vector -> ID TRANSPOSE .)
    DOTMUL          reduce using rule 40 (vector -> ID TRANSPOSE .)
    DOTDIV          reduce using rule 40 (vector -> ID TRANSPOSE .)
    +               reduce using rule 40 (vector -> ID TRANSPOSE .)
    -               reduce using rule 40 (vector -> ID TRANSPOSE .)
    /               reduce using rule 40 (vector -> ID TRANSPOSE .)
    *               reduce using rule 40 (vector -> ID TRANSPOSE .)
    EQL             reduce using rule 40 (vector -> ID TRANSPOSE .)
    NEQ             reduce using rule 40 (vector -> ID TRANSPOSE .)
    GT              reduce using rule 40 (vector -> ID TRANSPOSE .)
    GTE             reduce using rule 40 (vector -> ID TRANSPOSE .)
    LT              reduce using rule 40 (vector -> ID TRANSPOSE .)
    LTE             reduce using rule 40 (vector -> ID TRANSPOSE .)
    ,               reduce using rule 40 (vector -> ID TRANSPOSE .)
    ;               reduce using rule 40 (vector -> ID TRANSPOSE .)
    :               reduce using rule 40 (vector -> ID TRANSPOSE .)
    ]               reduce using rule 40 (vector -> ID TRANSPOSE .)
    )               reduce using rule 40 (vector -> ID TRANSPOSE .)
    {               reduce using rule 40 (vector -> ID TRANSPOSE .)
    ID              reduce using rule 40 (vector -> ID TRANSPOSE .)
    PRINT           reduce using rule 40 (vector -> ID TRANSPOSE .)
    CONTINUE        reduce using rule 40 (vector -> ID TRANSPOSE .)
    BREAK           reduce using rule 40 (vector -> ID TRANSPOSE .)
    RETURN          reduce using rule 40 (vector -> ID TRANSPOSE .)
    FOR             reduce using rule 40 (vector -> ID TRANSPOSE .)
    WHILE           reduce using rule 40 (vector -> ID TRANSPOSE .)
    IF              reduce using rule 40 (vector -> ID TRANSPOSE .)


state 83

    (44) dot_operation -> DOTADD .

    (               reduce using rule 44 (dot_operation -> DOTADD .)
    INTNUM          reduce using rule 44 (dot_operation -> DOTADD .)
    STR             reduce using rule 44 (dot_operation -> DOTADD .)
    FLOATNUM        reduce using rule 44 (dot_operation -> DOTADD .)
    ID              reduce using rule 44 (dot_operation -> DOTADD .)
    [               reduce using rule 44 (dot_operation -> DOTADD .)


state 84

    (45) dot_operation -> DOTSUB .

    (               reduce using rule 45 (dot_operation -> DOTSUB .)
    INTNUM          reduce using rule 45 (dot_operation -> DOTSUB .)
    STR             reduce using rule 45 (dot_operation -> DOTSUB .)
    FLOATNUM        reduce using rule 45 (dot_operation -> DOTSUB .)
    ID              reduce using rule 45 (dot_operation -> DOTSUB .)
    [               reduce using rule 45 (dot_operation -> DOTSUB .)


state 85

    (46) dot_operation -> DOTMUL .

    (               reduce using rule 46 (dot_operation -> DOTMUL .)
    INTNUM          reduce using rule 46 (dot_operation -> DOTMUL .)
    STR             reduce using rule 46 (dot_operation -> DOTMUL .)
    FLOATNUM        reduce using rule 46 (dot_operation -> DOTMUL .)
    ID              reduce using rule 46 (dot_operation -> DOTMUL .)
    [               reduce using rule 46 (dot_operation -> DOTMUL .)


state 86

    (47) dot_operation -> DOTDIV .

    (               reduce using rule 47 (dot_operation -> DOTDIV .)
    INTNUM          reduce using rule 47 (dot_operation -> DOTDIV .)
    STR             reduce using rule 47 (dot_operation -> DOTDIV .)
    FLOATNUM        reduce using rule 47 (dot_operation -> DOTDIV .)
    ID              reduce using rule 47 (dot_operation -> DOTDIV .)
    [               reduce using rule 47 (dot_operation -> DOTDIV .)


state 87

    (43) expression -> vector dot_operation . term
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    ID              shift and go to state 66
    [               shift and go to state 49

    vector                         shift and go to state 65
    term                           shift and go to state 122

state 88

    (41) vector -> vector TRANSPOSE .

    TRANSPOSE       reduce using rule 41 (vector -> vector TRANSPOSE .)
    DOTADD          reduce using rule 41 (vector -> vector TRANSPOSE .)
    DOTSUB          reduce using rule 41 (vector -> vector TRANSPOSE .)
    DOTMUL          reduce using rule 41 (vector -> vector TRANSPOSE .)
    DOTDIV          reduce using rule 41 (vector -> vector TRANSPOSE .)
    +               reduce using rule 41 (vector -> vector TRANSPOSE .)
    -               reduce using rule 41 (vector -> vector TRANSPOSE .)
    /               reduce using rule 41 (vector -> vector TRANSPOSE .)
    *               reduce using rule 41 (vector -> vector TRANSPOSE .)
    EQL             reduce using rule 41 (vector -> vector TRANSPOSE .)
    NEQ             reduce using rule 41 (vector -> vector TRANSPOSE .)
    GT              reduce using rule 41 (vector -> vector TRANSPOSE .)
    GTE             reduce using rule 41 (vector -> vector TRANSPOSE .)
    LT              reduce using rule 41 (vector -> vector TRANSPOSE .)
    LTE             reduce using rule 41 (vector -> vector TRANSPOSE .)
    ,               reduce using rule 41 (vector -> vector TRANSPOSE .)
    ;               reduce using rule 41 (vector -> vector TRANSPOSE .)
    :               reduce using rule 41 (vector -> vector TRANSPOSE .)
    ]               reduce using rule 41 (vector -> vector TRANSPOSE .)
    )               reduce using rule 41 (vector -> vector TRANSPOSE .)
    {               reduce using rule 41 (vector -> vector TRANSPOSE .)
    ID              reduce using rule 41 (vector -> vector TRANSPOSE .)
    PRINT           reduce using rule 41 (vector -> vector TRANSPOSE .)
    CONTINUE        reduce using rule 41 (vector -> vector TRANSPOSE .)
    BREAK           reduce using rule 41 (vector -> vector TRANSPOSE .)
    RETURN          reduce using rule 41 (vector -> vector TRANSPOSE .)
    FOR             reduce using rule 41 (vector -> vector TRANSPOSE .)
    WHILE           reduce using rule 41 (vector -> vector TRANSPOSE .)
    IF              reduce using rule 41 (vector -> vector TRANSPOSE .)


state 89

    (48) vector -> [ vector_contents . ]
    (50) vector_contents -> vector_contents . , vector_element

    ]               shift and go to state 123
    ,               shift and go to state 124


state 90

    (49) vector_contents -> vector_element .

    ]               reduce using rule 49 (vector_contents -> vector_element .)
    ,               reduce using rule 49 (vector_contents -> vector_element .)


state 91

    (51) vector_element -> term .

    ]               reduce using rule 51 (vector_element -> term .)
    ,               reduce using rule 51 (vector_element -> term .)


state 92

    (59) if_statement -> if optional_else_ifs optional_else .

    ID              reduce using rule 59 (if_statement -> if optional_else_ifs optional_else .)
    PRINT           reduce using rule 59 (if_statement -> if optional_else_ifs optional_else .)
    CONTINUE        reduce using rule 59 (if_statement -> if optional_else_ifs optional_else .)
    BREAK           reduce using rule 59 (if_statement -> if optional_else_ifs optional_else .)
    RETURN          reduce using rule 59 (if_statement -> if optional_else_ifs optional_else .)
    FOR             reduce using rule 59 (if_statement -> if optional_else_ifs optional_else .)
    WHILE           reduce using rule 59 (if_statement -> if optional_else_ifs optional_else .)
    IF              reduce using rule 59 (if_statement -> if optional_else_ifs optional_else .)
    $end            reduce using rule 59 (if_statement -> if optional_else_ifs optional_else .)
    ELSE            reduce using rule 59 (if_statement -> if optional_else_ifs optional_else .)
    }               reduce using rule 59 (if_statement -> if optional_else_ifs optional_else .)


state 93

    (66) optional_else -> else .

    ELSE            reduce using rule 66 (optional_else -> else .)
    ID              reduce using rule 66 (optional_else -> else .)
    PRINT           reduce using rule 66 (optional_else -> else .)
    CONTINUE        reduce using rule 66 (optional_else -> else .)
    BREAK           reduce using rule 66 (optional_else -> else .)
    RETURN          reduce using rule 66 (optional_else -> else .)
    FOR             reduce using rule 66 (optional_else -> else .)
    WHILE           reduce using rule 66 (optional_else -> else .)
    IF              reduce using rule 66 (optional_else -> else .)
    $end            reduce using rule 66 (optional_else -> else .)
    }               reduce using rule 66 (optional_else -> else .)


state 94

    (68) else -> ELSE . nested
    (70) nested -> . { statements }
    (71) nested -> . statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if_statement
    (10) statement -> . for
    (11) statement -> . while
    (20) assignment -> . ID assign_symbol expression
    (21) assignment -> . ID slice assign_symbol expression
    (17) print -> . PRINT coma_separated
    (16) continue -> . CONTINUE
    (14) break -> . BREAK
    (15) return -> . RETURN expression
    (59) if_statement -> . if optional_else_ifs optional_else
    (12) for -> . FOR ID ASSIGN expression : expression nested
    (13) while -> . WHILE condition nested
    (60) if -> . IF condition nested

    {               shift and go to state 99
    ID              shift and go to state 12
    PRINT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    RETURN          shift and go to state 16
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20

    nested                         shift and go to state 125
    statement                      shift and go to state 100
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if_statement                   shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 17

state 95

    (64) else_ifs -> else_ifs else_if .

    ELSE            reduce using rule 64 (else_ifs -> else_ifs else_if .)
    ID              reduce using rule 64 (else_ifs -> else_ifs else_if .)
    PRINT           reduce using rule 64 (else_ifs -> else_ifs else_if .)
    CONTINUE        reduce using rule 64 (else_ifs -> else_ifs else_if .)
    BREAK           reduce using rule 64 (else_ifs -> else_ifs else_if .)
    RETURN          reduce using rule 64 (else_ifs -> else_ifs else_if .)
    FOR             reduce using rule 64 (else_ifs -> else_ifs else_if .)
    WHILE           reduce using rule 64 (else_ifs -> else_ifs else_if .)
    IF              reduce using rule 64 (else_ifs -> else_ifs else_if .)
    $end            reduce using rule 64 (else_ifs -> else_ifs else_if .)
    }               reduce using rule 64 (else_ifs -> else_ifs else_if .)


state 96

    (65) else_if -> ELSE IF . condition nested
    (69) condition -> . ( expression )

    (               shift and go to state 57

    condition                      shift and go to state 126

state 97

    (12) for -> FOR ID ASSIGN . expression : expression nested
    (27) expression -> . built_in_function ( term )
    (28) expression -> . term
    (29) expression -> . expression + term
    (30) expression -> . expression - term
    (31) expression -> . expression / term
    (32) expression -> . expression * term
    (33) expression -> . expression EQL term
    (34) expression -> . expression NEQ term
    (35) expression -> . expression GT term
    (36) expression -> . expression GTE term
    (37) expression -> . expression LT term
    (38) expression -> . expression LTE term
    (39) expression -> . - term
    (42) expression -> . ID dot_operation term
    (43) expression -> . vector dot_operation term
    (78) built_in_function -> . EYE
    (79) built_in_function -> . ONES
    (80) built_in_function -> . ZEROS
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    [               shift and go to state 49

    expression                     shift and go to state 127
    built_in_function              shift and go to state 37
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 98

    (13) while -> WHILE condition nested .

    ID              reduce using rule 13 (while -> WHILE condition nested .)
    PRINT           reduce using rule 13 (while -> WHILE condition nested .)
    CONTINUE        reduce using rule 13 (while -> WHILE condition nested .)
    BREAK           reduce using rule 13 (while -> WHILE condition nested .)
    RETURN          reduce using rule 13 (while -> WHILE condition nested .)
    FOR             reduce using rule 13 (while -> WHILE condition nested .)
    WHILE           reduce using rule 13 (while -> WHILE condition nested .)
    IF              reduce using rule 13 (while -> WHILE condition nested .)
    $end            reduce using rule 13 (while -> WHILE condition nested .)
    ELSE            reduce using rule 13 (while -> WHILE condition nested .)
    }               reduce using rule 13 (while -> WHILE condition nested .)


state 99

    (70) nested -> { . statements }
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if_statement
    (10) statement -> . for
    (11) statement -> . while
    (20) assignment -> . ID assign_symbol expression
    (21) assignment -> . ID slice assign_symbol expression
    (17) print -> . PRINT coma_separated
    (16) continue -> . CONTINUE
    (14) break -> . BREAK
    (15) return -> . RETURN expression
    (59) if_statement -> . if optional_else_ifs optional_else
    (12) for -> . FOR ID ASSIGN expression : expression nested
    (13) while -> . WHILE condition nested
    (60) if -> . IF condition nested

    ID              shift and go to state 12
    PRINT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    RETURN          shift and go to state 16
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20

    statements                     shift and go to state 128
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if_statement                   shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 17

state 100

    (71) nested -> statement .

    ELSE            reduce using rule 71 (nested -> statement .)
    ID              reduce using rule 71 (nested -> statement .)
    PRINT           reduce using rule 71 (nested -> statement .)
    CONTINUE        reduce using rule 71 (nested -> statement .)
    BREAK           reduce using rule 71 (nested -> statement .)
    RETURN          reduce using rule 71 (nested -> statement .)
    FOR             reduce using rule 71 (nested -> statement .)
    WHILE           reduce using rule 71 (nested -> statement .)
    IF              reduce using rule 71 (nested -> statement .)
    $end            reduce using rule 71 (nested -> statement .)
    }               reduce using rule 71 (nested -> statement .)


state 101

    (69) condition -> ( expression . )
    (29) expression -> expression . + term
    (30) expression -> expression . - term
    (31) expression -> expression . / term
    (32) expression -> expression . * term
    (33) expression -> expression . EQL term
    (34) expression -> expression . NEQ term
    (35) expression -> expression . GT term
    (36) expression -> expression . GTE term
    (37) expression -> expression . LT term
    (38) expression -> expression . LTE term

    )               shift and go to state 129
    +               shift and go to state 68
    -               shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    EQL             shift and go to state 72
    NEQ             shift and go to state 73
    GT              shift and go to state 74
    GTE             shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77


state 102

    (60) if -> IF condition nested .

    ELSE            reduce using rule 60 (if -> IF condition nested .)
    ID              reduce using rule 60 (if -> IF condition nested .)
    PRINT           reduce using rule 60 (if -> IF condition nested .)
    CONTINUE        reduce using rule 60 (if -> IF condition nested .)
    BREAK           reduce using rule 60 (if -> IF condition nested .)
    RETURN          reduce using rule 60 (if -> IF condition nested .)
    FOR             reduce using rule 60 (if -> IF condition nested .)
    WHILE           reduce using rule 60 (if -> IF condition nested .)
    IF              reduce using rule 60 (if -> IF condition nested .)
    $end            reduce using rule 60 (if -> IF condition nested .)
    }               reduce using rule 60 (if -> IF condition nested .)


state 103

    (21) assignment -> ID slice assign_symbol expression .
    (29) expression -> expression . + term
    (30) expression -> expression . - term
    (31) expression -> expression . / term
    (32) expression -> expression . * term
    (33) expression -> expression . EQL term
    (34) expression -> expression . NEQ term
    (35) expression -> expression . GT term
    (36) expression -> expression . GTE term
    (37) expression -> expression . LT term
    (38) expression -> expression . LTE term

    ;               reduce using rule 21 (assignment -> ID slice assign_symbol expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    EQL             shift and go to state 72
    NEQ             shift and go to state 73
    GT              shift and go to state 74
    GTE             shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77


state 104

    (52) slice -> [ slice_contents ] .

    ASSIGN          reduce using rule 52 (slice -> [ slice_contents ] .)
    SUBASSIGN       reduce using rule 52 (slice -> [ slice_contents ] .)
    ADDASSIGN       reduce using rule 52 (slice -> [ slice_contents ] .)
    DIVASSIGN       reduce using rule 52 (slice -> [ slice_contents ] .)
    MULTASSIGN      reduce using rule 52 (slice -> [ slice_contents ] .)


state 105

    (54) slice_contents -> slice_contents , . range
    (55) range -> . term : term
    (56) range -> . term :
    (57) range -> . : term
    (58) range -> . term
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    :               shift and go to state 64
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    ID              shift and go to state 66
    [               shift and go to state 49

    range                          shift and go to state 130
    term                           shift and go to state 63
    vector                         shift and go to state 65

state 106

    (55) range -> term : . term
    (56) range -> term : .
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    ]               reduce using rule 56 (range -> term : .)
    ,               reduce using rule 56 (range -> term : .)
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    ID              shift and go to state 66
    [               shift and go to state 49

    term                           shift and go to state 131
    vector                         shift and go to state 65

state 107

    (57) range -> : term .

    ]               reduce using rule 57 (range -> : term .)
    ,               reduce using rule 57 (range -> : term .)


state 108

    (19) coma_separated -> coma_separated , expression .
    (29) expression -> expression . + term
    (30) expression -> expression . - term
    (31) expression -> expression . / term
    (32) expression -> expression . * term
    (33) expression -> expression . EQL term
    (34) expression -> expression . NEQ term
    (35) expression -> expression . GT term
    (36) expression -> expression . GTE term
    (37) expression -> expression . LT term
    (38) expression -> expression . LTE term

    ,               reduce using rule 19 (coma_separated -> coma_separated , expression .)
    ;               reduce using rule 19 (coma_separated -> coma_separated , expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    EQL             shift and go to state 72
    NEQ             shift and go to state 73
    GT              shift and go to state 74
    GTE             shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77


state 109

    (29) expression -> expression + term .

    +               reduce using rule 29 (expression -> expression + term .)
    -               reduce using rule 29 (expression -> expression + term .)
    /               reduce using rule 29 (expression -> expression + term .)
    *               reduce using rule 29 (expression -> expression + term .)
    EQL             reduce using rule 29 (expression -> expression + term .)
    NEQ             reduce using rule 29 (expression -> expression + term .)
    GT              reduce using rule 29 (expression -> expression + term .)
    GTE             reduce using rule 29 (expression -> expression + term .)
    LT              reduce using rule 29 (expression -> expression + term .)
    LTE             reduce using rule 29 (expression -> expression + term .)
    ,               reduce using rule 29 (expression -> expression + term .)
    ;               reduce using rule 29 (expression -> expression + term .)
    )               reduce using rule 29 (expression -> expression + term .)
    :               reduce using rule 29 (expression -> expression + term .)
    {               reduce using rule 29 (expression -> expression + term .)
    ID              reduce using rule 29 (expression -> expression + term .)
    PRINT           reduce using rule 29 (expression -> expression + term .)
    CONTINUE        reduce using rule 29 (expression -> expression + term .)
    BREAK           reduce using rule 29 (expression -> expression + term .)
    RETURN          reduce using rule 29 (expression -> expression + term .)
    FOR             reduce using rule 29 (expression -> expression + term .)
    WHILE           reduce using rule 29 (expression -> expression + term .)
    IF              reduce using rule 29 (expression -> expression + term .)


state 110

    (30) expression -> expression - term .

    +               reduce using rule 30 (expression -> expression - term .)
    -               reduce using rule 30 (expression -> expression - term .)
    /               reduce using rule 30 (expression -> expression - term .)
    *               reduce using rule 30 (expression -> expression - term .)
    EQL             reduce using rule 30 (expression -> expression - term .)
    NEQ             reduce using rule 30 (expression -> expression - term .)
    GT              reduce using rule 30 (expression -> expression - term .)
    GTE             reduce using rule 30 (expression -> expression - term .)
    LT              reduce using rule 30 (expression -> expression - term .)
    LTE             reduce using rule 30 (expression -> expression - term .)
    ,               reduce using rule 30 (expression -> expression - term .)
    ;               reduce using rule 30 (expression -> expression - term .)
    )               reduce using rule 30 (expression -> expression - term .)
    :               reduce using rule 30 (expression -> expression - term .)
    {               reduce using rule 30 (expression -> expression - term .)
    ID              reduce using rule 30 (expression -> expression - term .)
    PRINT           reduce using rule 30 (expression -> expression - term .)
    CONTINUE        reduce using rule 30 (expression -> expression - term .)
    BREAK           reduce using rule 30 (expression -> expression - term .)
    RETURN          reduce using rule 30 (expression -> expression - term .)
    FOR             reduce using rule 30 (expression -> expression - term .)
    WHILE           reduce using rule 30 (expression -> expression - term .)
    IF              reduce using rule 30 (expression -> expression - term .)


state 111

    (31) expression -> expression / term .

    +               reduce using rule 31 (expression -> expression / term .)
    -               reduce using rule 31 (expression -> expression / term .)
    /               reduce using rule 31 (expression -> expression / term .)
    *               reduce using rule 31 (expression -> expression / term .)
    EQL             reduce using rule 31 (expression -> expression / term .)
    NEQ             reduce using rule 31 (expression -> expression / term .)
    GT              reduce using rule 31 (expression -> expression / term .)
    GTE             reduce using rule 31 (expression -> expression / term .)
    LT              reduce using rule 31 (expression -> expression / term .)
    LTE             reduce using rule 31 (expression -> expression / term .)
    ,               reduce using rule 31 (expression -> expression / term .)
    ;               reduce using rule 31 (expression -> expression / term .)
    )               reduce using rule 31 (expression -> expression / term .)
    :               reduce using rule 31 (expression -> expression / term .)
    {               reduce using rule 31 (expression -> expression / term .)
    ID              reduce using rule 31 (expression -> expression / term .)
    PRINT           reduce using rule 31 (expression -> expression / term .)
    CONTINUE        reduce using rule 31 (expression -> expression / term .)
    BREAK           reduce using rule 31 (expression -> expression / term .)
    RETURN          reduce using rule 31 (expression -> expression / term .)
    FOR             reduce using rule 31 (expression -> expression / term .)
    WHILE           reduce using rule 31 (expression -> expression / term .)
    IF              reduce using rule 31 (expression -> expression / term .)


state 112

    (32) expression -> expression * term .

    +               reduce using rule 32 (expression -> expression * term .)
    -               reduce using rule 32 (expression -> expression * term .)
    /               reduce using rule 32 (expression -> expression * term .)
    *               reduce using rule 32 (expression -> expression * term .)
    EQL             reduce using rule 32 (expression -> expression * term .)
    NEQ             reduce using rule 32 (expression -> expression * term .)
    GT              reduce using rule 32 (expression -> expression * term .)
    GTE             reduce using rule 32 (expression -> expression * term .)
    LT              reduce using rule 32 (expression -> expression * term .)
    LTE             reduce using rule 32 (expression -> expression * term .)
    ,               reduce using rule 32 (expression -> expression * term .)
    ;               reduce using rule 32 (expression -> expression * term .)
    )               reduce using rule 32 (expression -> expression * term .)
    :               reduce using rule 32 (expression -> expression * term .)
    {               reduce using rule 32 (expression -> expression * term .)
    ID              reduce using rule 32 (expression -> expression * term .)
    PRINT           reduce using rule 32 (expression -> expression * term .)
    CONTINUE        reduce using rule 32 (expression -> expression * term .)
    BREAK           reduce using rule 32 (expression -> expression * term .)
    RETURN          reduce using rule 32 (expression -> expression * term .)
    FOR             reduce using rule 32 (expression -> expression * term .)
    WHILE           reduce using rule 32 (expression -> expression * term .)
    IF              reduce using rule 32 (expression -> expression * term .)


state 113

    (33) expression -> expression EQL term .

    +               reduce using rule 33 (expression -> expression EQL term .)
    -               reduce using rule 33 (expression -> expression EQL term .)
    /               reduce using rule 33 (expression -> expression EQL term .)
    *               reduce using rule 33 (expression -> expression EQL term .)
    EQL             reduce using rule 33 (expression -> expression EQL term .)
    NEQ             reduce using rule 33 (expression -> expression EQL term .)
    GT              reduce using rule 33 (expression -> expression EQL term .)
    GTE             reduce using rule 33 (expression -> expression EQL term .)
    LT              reduce using rule 33 (expression -> expression EQL term .)
    LTE             reduce using rule 33 (expression -> expression EQL term .)
    ,               reduce using rule 33 (expression -> expression EQL term .)
    ;               reduce using rule 33 (expression -> expression EQL term .)
    )               reduce using rule 33 (expression -> expression EQL term .)
    :               reduce using rule 33 (expression -> expression EQL term .)
    {               reduce using rule 33 (expression -> expression EQL term .)
    ID              reduce using rule 33 (expression -> expression EQL term .)
    PRINT           reduce using rule 33 (expression -> expression EQL term .)
    CONTINUE        reduce using rule 33 (expression -> expression EQL term .)
    BREAK           reduce using rule 33 (expression -> expression EQL term .)
    RETURN          reduce using rule 33 (expression -> expression EQL term .)
    FOR             reduce using rule 33 (expression -> expression EQL term .)
    WHILE           reduce using rule 33 (expression -> expression EQL term .)
    IF              reduce using rule 33 (expression -> expression EQL term .)


state 114

    (34) expression -> expression NEQ term .

    +               reduce using rule 34 (expression -> expression NEQ term .)
    -               reduce using rule 34 (expression -> expression NEQ term .)
    /               reduce using rule 34 (expression -> expression NEQ term .)
    *               reduce using rule 34 (expression -> expression NEQ term .)
    EQL             reduce using rule 34 (expression -> expression NEQ term .)
    NEQ             reduce using rule 34 (expression -> expression NEQ term .)
    GT              reduce using rule 34 (expression -> expression NEQ term .)
    GTE             reduce using rule 34 (expression -> expression NEQ term .)
    LT              reduce using rule 34 (expression -> expression NEQ term .)
    LTE             reduce using rule 34 (expression -> expression NEQ term .)
    ,               reduce using rule 34 (expression -> expression NEQ term .)
    ;               reduce using rule 34 (expression -> expression NEQ term .)
    )               reduce using rule 34 (expression -> expression NEQ term .)
    :               reduce using rule 34 (expression -> expression NEQ term .)
    {               reduce using rule 34 (expression -> expression NEQ term .)
    ID              reduce using rule 34 (expression -> expression NEQ term .)
    PRINT           reduce using rule 34 (expression -> expression NEQ term .)
    CONTINUE        reduce using rule 34 (expression -> expression NEQ term .)
    BREAK           reduce using rule 34 (expression -> expression NEQ term .)
    RETURN          reduce using rule 34 (expression -> expression NEQ term .)
    FOR             reduce using rule 34 (expression -> expression NEQ term .)
    WHILE           reduce using rule 34 (expression -> expression NEQ term .)
    IF              reduce using rule 34 (expression -> expression NEQ term .)


state 115

    (35) expression -> expression GT term .

    +               reduce using rule 35 (expression -> expression GT term .)
    -               reduce using rule 35 (expression -> expression GT term .)
    /               reduce using rule 35 (expression -> expression GT term .)
    *               reduce using rule 35 (expression -> expression GT term .)
    EQL             reduce using rule 35 (expression -> expression GT term .)
    NEQ             reduce using rule 35 (expression -> expression GT term .)
    GT              reduce using rule 35 (expression -> expression GT term .)
    GTE             reduce using rule 35 (expression -> expression GT term .)
    LT              reduce using rule 35 (expression -> expression GT term .)
    LTE             reduce using rule 35 (expression -> expression GT term .)
    ,               reduce using rule 35 (expression -> expression GT term .)
    ;               reduce using rule 35 (expression -> expression GT term .)
    )               reduce using rule 35 (expression -> expression GT term .)
    :               reduce using rule 35 (expression -> expression GT term .)
    {               reduce using rule 35 (expression -> expression GT term .)
    ID              reduce using rule 35 (expression -> expression GT term .)
    PRINT           reduce using rule 35 (expression -> expression GT term .)
    CONTINUE        reduce using rule 35 (expression -> expression GT term .)
    BREAK           reduce using rule 35 (expression -> expression GT term .)
    RETURN          reduce using rule 35 (expression -> expression GT term .)
    FOR             reduce using rule 35 (expression -> expression GT term .)
    WHILE           reduce using rule 35 (expression -> expression GT term .)
    IF              reduce using rule 35 (expression -> expression GT term .)


state 116

    (36) expression -> expression GTE term .

    +               reduce using rule 36 (expression -> expression GTE term .)
    -               reduce using rule 36 (expression -> expression GTE term .)
    /               reduce using rule 36 (expression -> expression GTE term .)
    *               reduce using rule 36 (expression -> expression GTE term .)
    EQL             reduce using rule 36 (expression -> expression GTE term .)
    NEQ             reduce using rule 36 (expression -> expression GTE term .)
    GT              reduce using rule 36 (expression -> expression GTE term .)
    GTE             reduce using rule 36 (expression -> expression GTE term .)
    LT              reduce using rule 36 (expression -> expression GTE term .)
    LTE             reduce using rule 36 (expression -> expression GTE term .)
    ,               reduce using rule 36 (expression -> expression GTE term .)
    ;               reduce using rule 36 (expression -> expression GTE term .)
    )               reduce using rule 36 (expression -> expression GTE term .)
    :               reduce using rule 36 (expression -> expression GTE term .)
    {               reduce using rule 36 (expression -> expression GTE term .)
    ID              reduce using rule 36 (expression -> expression GTE term .)
    PRINT           reduce using rule 36 (expression -> expression GTE term .)
    CONTINUE        reduce using rule 36 (expression -> expression GTE term .)
    BREAK           reduce using rule 36 (expression -> expression GTE term .)
    RETURN          reduce using rule 36 (expression -> expression GTE term .)
    FOR             reduce using rule 36 (expression -> expression GTE term .)
    WHILE           reduce using rule 36 (expression -> expression GTE term .)
    IF              reduce using rule 36 (expression -> expression GTE term .)


state 117

    (37) expression -> expression LT term .

    +               reduce using rule 37 (expression -> expression LT term .)
    -               reduce using rule 37 (expression -> expression LT term .)
    /               reduce using rule 37 (expression -> expression LT term .)
    *               reduce using rule 37 (expression -> expression LT term .)
    EQL             reduce using rule 37 (expression -> expression LT term .)
    NEQ             reduce using rule 37 (expression -> expression LT term .)
    GT              reduce using rule 37 (expression -> expression LT term .)
    GTE             reduce using rule 37 (expression -> expression LT term .)
    LT              reduce using rule 37 (expression -> expression LT term .)
    LTE             reduce using rule 37 (expression -> expression LT term .)
    ,               reduce using rule 37 (expression -> expression LT term .)
    ;               reduce using rule 37 (expression -> expression LT term .)
    )               reduce using rule 37 (expression -> expression LT term .)
    :               reduce using rule 37 (expression -> expression LT term .)
    {               reduce using rule 37 (expression -> expression LT term .)
    ID              reduce using rule 37 (expression -> expression LT term .)
    PRINT           reduce using rule 37 (expression -> expression LT term .)
    CONTINUE        reduce using rule 37 (expression -> expression LT term .)
    BREAK           reduce using rule 37 (expression -> expression LT term .)
    RETURN          reduce using rule 37 (expression -> expression LT term .)
    FOR             reduce using rule 37 (expression -> expression LT term .)
    WHILE           reduce using rule 37 (expression -> expression LT term .)
    IF              reduce using rule 37 (expression -> expression LT term .)


state 118

    (38) expression -> expression LTE term .

    +               reduce using rule 38 (expression -> expression LTE term .)
    -               reduce using rule 38 (expression -> expression LTE term .)
    /               reduce using rule 38 (expression -> expression LTE term .)
    *               reduce using rule 38 (expression -> expression LTE term .)
    EQL             reduce using rule 38 (expression -> expression LTE term .)
    NEQ             reduce using rule 38 (expression -> expression LTE term .)
    GT              reduce using rule 38 (expression -> expression LTE term .)
    GTE             reduce using rule 38 (expression -> expression LTE term .)
    LT              reduce using rule 38 (expression -> expression LTE term .)
    LTE             reduce using rule 38 (expression -> expression LTE term .)
    ,               reduce using rule 38 (expression -> expression LTE term .)
    ;               reduce using rule 38 (expression -> expression LTE term .)
    )               reduce using rule 38 (expression -> expression LTE term .)
    :               reduce using rule 38 (expression -> expression LTE term .)
    {               reduce using rule 38 (expression -> expression LTE term .)
    ID              reduce using rule 38 (expression -> expression LTE term .)
    PRINT           reduce using rule 38 (expression -> expression LTE term .)
    CONTINUE        reduce using rule 38 (expression -> expression LTE term .)
    BREAK           reduce using rule 38 (expression -> expression LTE term .)
    RETURN          reduce using rule 38 (expression -> expression LTE term .)
    FOR             reduce using rule 38 (expression -> expression LTE term .)
    WHILE           reduce using rule 38 (expression -> expression LTE term .)
    IF              reduce using rule 38 (expression -> expression LTE term .)


state 119

    (27) expression -> built_in_function ( term . )

    )               shift and go to state 132


state 120

    (72) term -> ( expression ) .

    +               reduce using rule 72 (term -> ( expression ) .)
    -               reduce using rule 72 (term -> ( expression ) .)
    /               reduce using rule 72 (term -> ( expression ) .)
    *               reduce using rule 72 (term -> ( expression ) .)
    EQL             reduce using rule 72 (term -> ( expression ) .)
    NEQ             reduce using rule 72 (term -> ( expression ) .)
    GT              reduce using rule 72 (term -> ( expression ) .)
    GTE             reduce using rule 72 (term -> ( expression ) .)
    LT              reduce using rule 72 (term -> ( expression ) .)
    LTE             reduce using rule 72 (term -> ( expression ) .)
    ,               reduce using rule 72 (term -> ( expression ) .)
    ;               reduce using rule 72 (term -> ( expression ) .)
    :               reduce using rule 72 (term -> ( expression ) .)
    ]               reduce using rule 72 (term -> ( expression ) .)
    )               reduce using rule 72 (term -> ( expression ) .)
    {               reduce using rule 72 (term -> ( expression ) .)
    ID              reduce using rule 72 (term -> ( expression ) .)
    PRINT           reduce using rule 72 (term -> ( expression ) .)
    CONTINUE        reduce using rule 72 (term -> ( expression ) .)
    BREAK           reduce using rule 72 (term -> ( expression ) .)
    RETURN          reduce using rule 72 (term -> ( expression ) .)
    FOR             reduce using rule 72 (term -> ( expression ) .)
    WHILE           reduce using rule 72 (term -> ( expression ) .)
    IF              reduce using rule 72 (term -> ( expression ) .)


state 121

    (42) expression -> ID dot_operation term .

    +               reduce using rule 42 (expression -> ID dot_operation term .)
    -               reduce using rule 42 (expression -> ID dot_operation term .)
    /               reduce using rule 42 (expression -> ID dot_operation term .)
    *               reduce using rule 42 (expression -> ID dot_operation term .)
    EQL             reduce using rule 42 (expression -> ID dot_operation term .)
    NEQ             reduce using rule 42 (expression -> ID dot_operation term .)
    GT              reduce using rule 42 (expression -> ID dot_operation term .)
    GTE             reduce using rule 42 (expression -> ID dot_operation term .)
    LT              reduce using rule 42 (expression -> ID dot_operation term .)
    LTE             reduce using rule 42 (expression -> ID dot_operation term .)
    ,               reduce using rule 42 (expression -> ID dot_operation term .)
    ;               reduce using rule 42 (expression -> ID dot_operation term .)
    )               reduce using rule 42 (expression -> ID dot_operation term .)
    :               reduce using rule 42 (expression -> ID dot_operation term .)
    {               reduce using rule 42 (expression -> ID dot_operation term .)
    ID              reduce using rule 42 (expression -> ID dot_operation term .)
    PRINT           reduce using rule 42 (expression -> ID dot_operation term .)
    CONTINUE        reduce using rule 42 (expression -> ID dot_operation term .)
    BREAK           reduce using rule 42 (expression -> ID dot_operation term .)
    RETURN          reduce using rule 42 (expression -> ID dot_operation term .)
    FOR             reduce using rule 42 (expression -> ID dot_operation term .)
    WHILE           reduce using rule 42 (expression -> ID dot_operation term .)
    IF              reduce using rule 42 (expression -> ID dot_operation term .)


state 122

    (43) expression -> vector dot_operation term .

    +               reduce using rule 43 (expression -> vector dot_operation term .)
    -               reduce using rule 43 (expression -> vector dot_operation term .)
    /               reduce using rule 43 (expression -> vector dot_operation term .)
    *               reduce using rule 43 (expression -> vector dot_operation term .)
    EQL             reduce using rule 43 (expression -> vector dot_operation term .)
    NEQ             reduce using rule 43 (expression -> vector dot_operation term .)
    GT              reduce using rule 43 (expression -> vector dot_operation term .)
    GTE             reduce using rule 43 (expression -> vector dot_operation term .)
    LT              reduce using rule 43 (expression -> vector dot_operation term .)
    LTE             reduce using rule 43 (expression -> vector dot_operation term .)
    ,               reduce using rule 43 (expression -> vector dot_operation term .)
    ;               reduce using rule 43 (expression -> vector dot_operation term .)
    )               reduce using rule 43 (expression -> vector dot_operation term .)
    :               reduce using rule 43 (expression -> vector dot_operation term .)
    {               reduce using rule 43 (expression -> vector dot_operation term .)
    ID              reduce using rule 43 (expression -> vector dot_operation term .)
    PRINT           reduce using rule 43 (expression -> vector dot_operation term .)
    CONTINUE        reduce using rule 43 (expression -> vector dot_operation term .)
    BREAK           reduce using rule 43 (expression -> vector dot_operation term .)
    RETURN          reduce using rule 43 (expression -> vector dot_operation term .)
    FOR             reduce using rule 43 (expression -> vector dot_operation term .)
    WHILE           reduce using rule 43 (expression -> vector dot_operation term .)
    IF              reduce using rule 43 (expression -> vector dot_operation term .)


state 123

    (48) vector -> [ vector_contents ] .

    TRANSPOSE       reduce using rule 48 (vector -> [ vector_contents ] .)
    DOTADD          reduce using rule 48 (vector -> [ vector_contents ] .)
    DOTSUB          reduce using rule 48 (vector -> [ vector_contents ] .)
    DOTMUL          reduce using rule 48 (vector -> [ vector_contents ] .)
    DOTDIV          reduce using rule 48 (vector -> [ vector_contents ] .)
    +               reduce using rule 48 (vector -> [ vector_contents ] .)
    -               reduce using rule 48 (vector -> [ vector_contents ] .)
    /               reduce using rule 48 (vector -> [ vector_contents ] .)
    *               reduce using rule 48 (vector -> [ vector_contents ] .)
    EQL             reduce using rule 48 (vector -> [ vector_contents ] .)
    NEQ             reduce using rule 48 (vector -> [ vector_contents ] .)
    GT              reduce using rule 48 (vector -> [ vector_contents ] .)
    GTE             reduce using rule 48 (vector -> [ vector_contents ] .)
    LT              reduce using rule 48 (vector -> [ vector_contents ] .)
    LTE             reduce using rule 48 (vector -> [ vector_contents ] .)
    ,               reduce using rule 48 (vector -> [ vector_contents ] .)
    ;               reduce using rule 48 (vector -> [ vector_contents ] .)
    :               reduce using rule 48 (vector -> [ vector_contents ] .)
    ]               reduce using rule 48 (vector -> [ vector_contents ] .)
    )               reduce using rule 48 (vector -> [ vector_contents ] .)
    {               reduce using rule 48 (vector -> [ vector_contents ] .)
    ID              reduce using rule 48 (vector -> [ vector_contents ] .)
    PRINT           reduce using rule 48 (vector -> [ vector_contents ] .)
    CONTINUE        reduce using rule 48 (vector -> [ vector_contents ] .)
    BREAK           reduce using rule 48 (vector -> [ vector_contents ] .)
    RETURN          reduce using rule 48 (vector -> [ vector_contents ] .)
    FOR             reduce using rule 48 (vector -> [ vector_contents ] .)
    WHILE           reduce using rule 48 (vector -> [ vector_contents ] .)
    IF              reduce using rule 48 (vector -> [ vector_contents ] .)


state 124

    (50) vector_contents -> vector_contents , . vector_element
    (51) vector_element -> . term
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    ID              shift and go to state 66
    [               shift and go to state 49

    vector_element                 shift and go to state 133
    term                           shift and go to state 91
    vector                         shift and go to state 65

state 125

    (68) else -> ELSE nested .

    ELSE            reduce using rule 68 (else -> ELSE nested .)
    ID              reduce using rule 68 (else -> ELSE nested .)
    PRINT           reduce using rule 68 (else -> ELSE nested .)
    CONTINUE        reduce using rule 68 (else -> ELSE nested .)
    BREAK           reduce using rule 68 (else -> ELSE nested .)
    RETURN          reduce using rule 68 (else -> ELSE nested .)
    FOR             reduce using rule 68 (else -> ELSE nested .)
    WHILE           reduce using rule 68 (else -> ELSE nested .)
    IF              reduce using rule 68 (else -> ELSE nested .)
    $end            reduce using rule 68 (else -> ELSE nested .)
    }               reduce using rule 68 (else -> ELSE nested .)


state 126

    (65) else_if -> ELSE IF condition . nested
    (70) nested -> . { statements }
    (71) nested -> . statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if_statement
    (10) statement -> . for
    (11) statement -> . while
    (20) assignment -> . ID assign_symbol expression
    (21) assignment -> . ID slice assign_symbol expression
    (17) print -> . PRINT coma_separated
    (16) continue -> . CONTINUE
    (14) break -> . BREAK
    (15) return -> . RETURN expression
    (59) if_statement -> . if optional_else_ifs optional_else
    (12) for -> . FOR ID ASSIGN expression : expression nested
    (13) while -> . WHILE condition nested
    (60) if -> . IF condition nested

    {               shift and go to state 99
    ID              shift and go to state 12
    PRINT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    RETURN          shift and go to state 16
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20

    nested                         shift and go to state 134
    statement                      shift and go to state 100
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if_statement                   shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 17

state 127

    (12) for -> FOR ID ASSIGN expression . : expression nested
    (29) expression -> expression . + term
    (30) expression -> expression . - term
    (31) expression -> expression . / term
    (32) expression -> expression . * term
    (33) expression -> expression . EQL term
    (34) expression -> expression . NEQ term
    (35) expression -> expression . GT term
    (36) expression -> expression . GTE term
    (37) expression -> expression . LT term
    (38) expression -> expression . LTE term

    :               shift and go to state 135
    +               shift and go to state 68
    -               shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    EQL             shift and go to state 72
    NEQ             shift and go to state 73
    GT              shift and go to state 74
    GTE             shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77


state 128

    (70) nested -> { statements . }
    (3) statements -> statements . statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if_statement
    (10) statement -> . for
    (11) statement -> . while
    (20) assignment -> . ID assign_symbol expression
    (21) assignment -> . ID slice assign_symbol expression
    (17) print -> . PRINT coma_separated
    (16) continue -> . CONTINUE
    (14) break -> . BREAK
    (15) return -> . RETURN expression
    (59) if_statement -> . if optional_else_ifs optional_else
    (12) for -> . FOR ID ASSIGN expression : expression nested
    (13) while -> . WHILE condition nested
    (60) if -> . IF condition nested

    }               shift and go to state 136
    ID              shift and go to state 12
    PRINT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    RETURN          shift and go to state 16
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20

    statement                      shift and go to state 21
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if_statement                   shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 17

state 129

    (69) condition -> ( expression ) .

    {               reduce using rule 69 (condition -> ( expression ) .)
    ID              reduce using rule 69 (condition -> ( expression ) .)
    PRINT           reduce using rule 69 (condition -> ( expression ) .)
    CONTINUE        reduce using rule 69 (condition -> ( expression ) .)
    BREAK           reduce using rule 69 (condition -> ( expression ) .)
    RETURN          reduce using rule 69 (condition -> ( expression ) .)
    FOR             reduce using rule 69 (condition -> ( expression ) .)
    WHILE           reduce using rule 69 (condition -> ( expression ) .)
    IF              reduce using rule 69 (condition -> ( expression ) .)


state 130

    (54) slice_contents -> slice_contents , range .

    ]               reduce using rule 54 (slice_contents -> slice_contents , range .)
    ,               reduce using rule 54 (slice_contents -> slice_contents , range .)


state 131

    (55) range -> term : term .

    ]               reduce using rule 55 (range -> term : term .)
    ,               reduce using rule 55 (range -> term : term .)


state 132

    (27) expression -> built_in_function ( term ) .

    +               reduce using rule 27 (expression -> built_in_function ( term ) .)
    -               reduce using rule 27 (expression -> built_in_function ( term ) .)
    /               reduce using rule 27 (expression -> built_in_function ( term ) .)
    *               reduce using rule 27 (expression -> built_in_function ( term ) .)
    EQL             reduce using rule 27 (expression -> built_in_function ( term ) .)
    NEQ             reduce using rule 27 (expression -> built_in_function ( term ) .)
    GT              reduce using rule 27 (expression -> built_in_function ( term ) .)
    GTE             reduce using rule 27 (expression -> built_in_function ( term ) .)
    LT              reduce using rule 27 (expression -> built_in_function ( term ) .)
    LTE             reduce using rule 27 (expression -> built_in_function ( term ) .)
    ,               reduce using rule 27 (expression -> built_in_function ( term ) .)
    ;               reduce using rule 27 (expression -> built_in_function ( term ) .)
    )               reduce using rule 27 (expression -> built_in_function ( term ) .)
    :               reduce using rule 27 (expression -> built_in_function ( term ) .)
    {               reduce using rule 27 (expression -> built_in_function ( term ) .)
    ID              reduce using rule 27 (expression -> built_in_function ( term ) .)
    PRINT           reduce using rule 27 (expression -> built_in_function ( term ) .)
    CONTINUE        reduce using rule 27 (expression -> built_in_function ( term ) .)
    BREAK           reduce using rule 27 (expression -> built_in_function ( term ) .)
    RETURN          reduce using rule 27 (expression -> built_in_function ( term ) .)
    FOR             reduce using rule 27 (expression -> built_in_function ( term ) .)
    WHILE           reduce using rule 27 (expression -> built_in_function ( term ) .)
    IF              reduce using rule 27 (expression -> built_in_function ( term ) .)


state 133

    (50) vector_contents -> vector_contents , vector_element .

    ]               reduce using rule 50 (vector_contents -> vector_contents , vector_element .)
    ,               reduce using rule 50 (vector_contents -> vector_contents , vector_element .)


state 134

    (65) else_if -> ELSE IF condition nested .

    ELSE            reduce using rule 65 (else_if -> ELSE IF condition nested .)
    ID              reduce using rule 65 (else_if -> ELSE IF condition nested .)
    PRINT           reduce using rule 65 (else_if -> ELSE IF condition nested .)
    CONTINUE        reduce using rule 65 (else_if -> ELSE IF condition nested .)
    BREAK           reduce using rule 65 (else_if -> ELSE IF condition nested .)
    RETURN          reduce using rule 65 (else_if -> ELSE IF condition nested .)
    FOR             reduce using rule 65 (else_if -> ELSE IF condition nested .)
    WHILE           reduce using rule 65 (else_if -> ELSE IF condition nested .)
    IF              reduce using rule 65 (else_if -> ELSE IF condition nested .)
    $end            reduce using rule 65 (else_if -> ELSE IF condition nested .)
    }               reduce using rule 65 (else_if -> ELSE IF condition nested .)


state 135

    (12) for -> FOR ID ASSIGN expression : . expression nested
    (27) expression -> . built_in_function ( term )
    (28) expression -> . term
    (29) expression -> . expression + term
    (30) expression -> . expression - term
    (31) expression -> . expression / term
    (32) expression -> . expression * term
    (33) expression -> . expression EQL term
    (34) expression -> . expression NEQ term
    (35) expression -> . expression GT term
    (36) expression -> . expression GTE term
    (37) expression -> . expression LT term
    (38) expression -> . expression LTE term
    (39) expression -> . - term
    (42) expression -> . ID dot_operation term
    (43) expression -> . vector dot_operation term
    (78) built_in_function -> . EYE
    (79) built_in_function -> . ONES
    (80) built_in_function -> . ZEROS
    (72) term -> . ( expression )
    (73) term -> . vector
    (74) term -> . INTNUM
    (75) term -> . STR
    (76) term -> . FLOATNUM
    (77) term -> . ID
    (40) vector -> . ID TRANSPOSE
    (41) vector -> . vector TRANSPOSE
    (48) vector -> . [ vector_contents ]

    -               shift and go to state 40
    ID              shift and go to state 41
    EYE             shift and go to state 43
    ONES            shift and go to state 44
    ZEROS           shift and go to state 45
    (               shift and go to state 38
    INTNUM          shift and go to state 46
    STR             shift and go to state 47
    FLOATNUM        shift and go to state 48
    [               shift and go to state 49

    expression                     shift and go to state 137
    built_in_function              shift and go to state 37
    term                           shift and go to state 39
    vector                         shift and go to state 42

state 136

    (70) nested -> { statements } .

    ELSE            reduce using rule 70 (nested -> { statements } .)
    ID              reduce using rule 70 (nested -> { statements } .)
    PRINT           reduce using rule 70 (nested -> { statements } .)
    CONTINUE        reduce using rule 70 (nested -> { statements } .)
    BREAK           reduce using rule 70 (nested -> { statements } .)
    RETURN          reduce using rule 70 (nested -> { statements } .)
    FOR             reduce using rule 70 (nested -> { statements } .)
    WHILE           reduce using rule 70 (nested -> { statements } .)
    IF              reduce using rule 70 (nested -> { statements } .)
    $end            reduce using rule 70 (nested -> { statements } .)
    }               reduce using rule 70 (nested -> { statements } .)


state 137

    (12) for -> FOR ID ASSIGN expression : expression . nested
    (29) expression -> expression . + term
    (30) expression -> expression . - term
    (31) expression -> expression . / term
    (32) expression -> expression . * term
    (33) expression -> expression . EQL term
    (34) expression -> expression . NEQ term
    (35) expression -> expression . GT term
    (36) expression -> expression . GTE term
    (37) expression -> expression . LT term
    (38) expression -> expression . LTE term
    (70) nested -> . { statements }
    (71) nested -> . statement
    (4) statement -> . assignment ;
    (5) statement -> . print ;
    (6) statement -> . continue ;
    (7) statement -> . break ;
    (8) statement -> . return ;
    (9) statement -> . if_statement
    (10) statement -> . for
    (11) statement -> . while
    (20) assignment -> . ID assign_symbol expression
    (21) assignment -> . ID slice assign_symbol expression
    (17) print -> . PRINT coma_separated
    (16) continue -> . CONTINUE
    (14) break -> . BREAK
    (15) return -> . RETURN expression
    (59) if_statement -> . if optional_else_ifs optional_else
    (12) for -> . FOR ID ASSIGN expression : expression nested
    (13) while -> . WHILE condition nested
    (60) if -> . IF condition nested

    +               shift and go to state 68
    -               shift and go to state 69
    /               shift and go to state 70
    *               shift and go to state 71
    EQL             shift and go to state 72
    NEQ             shift and go to state 73
    GT              shift and go to state 74
    GTE             shift and go to state 75
    LT              shift and go to state 76
    LTE             shift and go to state 77
    {               shift and go to state 99
    ID              shift and go to state 12
    PRINT           shift and go to state 13
    CONTINUE        shift and go to state 14
    BREAK           shift and go to state 15
    RETURN          shift and go to state 16
    FOR             shift and go to state 18
    WHILE           shift and go to state 19
    IF              shift and go to state 20

    nested                         shift and go to state 138
    statement                      shift and go to state 100
    assignment                     shift and go to state 4
    print                          shift and go to state 5
    continue                       shift and go to state 6
    break                          shift and go to state 7
    return                         shift and go to state 8
    if_statement                   shift and go to state 9
    for                            shift and go to state 10
    while                          shift and go to state 11
    if                             shift and go to state 17

state 138

    (12) for -> FOR ID ASSIGN expression : expression nested .

    ID              reduce using rule 12 (for -> FOR ID ASSIGN expression : expression nested .)
    PRINT           reduce using rule 12 (for -> FOR ID ASSIGN expression : expression nested .)
    CONTINUE        reduce using rule 12 (for -> FOR ID ASSIGN expression : expression nested .)
    BREAK           reduce using rule 12 (for -> FOR ID ASSIGN expression : expression nested .)
    RETURN          reduce using rule 12 (for -> FOR ID ASSIGN expression : expression nested .)
    FOR             reduce using rule 12 (for -> FOR ID ASSIGN expression : expression nested .)
    WHILE           reduce using rule 12 (for -> FOR ID ASSIGN expression : expression nested .)
    IF              reduce using rule 12 (for -> FOR ID ASSIGN expression : expression nested .)
    $end            reduce using rule 12 (for -> FOR ID ASSIGN expression : expression nested .)
    ELSE            reduce using rule 12 (for -> FOR ID ASSIGN expression : expression nested .)
    }               reduce using rule 12 (for -> FOR ID ASSIGN expression : expression nested .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 52 resolved as shift
