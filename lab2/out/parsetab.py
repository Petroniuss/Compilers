
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "startnonassocEQLNEQGTGTELTLTEleft+-left/*leftTRANSPOSErightUMINUSnonassocIFxnonassocELSEADDASSIGN ASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQL EYE FLOATNUM FOR GT GTE ID IF INTNUM LT LTE MULTASSIGN NEQ ONES PRINT RETURN STR SUBASSIGN TRANSPOSE WHILE ZEROS\n        start : statements\n    \n        statements : statement\n                   | statements statement\n    \n        statement : assignment ';'\n                  | print ';'\n                  | continue ';'\n                  | break ';'\n                  | return ';'\n                  | if\n                  | for\n                  | while\n    \n        for : FOR ID ASSIGN expression ':' expression nested\n    \n        while : WHILE condition nested\n    \n        break : BREAK\n    \n        return : RETURN expression\n    \n        continue : CONTINUE\n    \n        print : PRINT coma_separated\n    \n        coma_separated : expression\n                       | coma_separated ',' expression\n    \n        assignment : ID assign_symbol expression\n    \n        assignment : ID slice assign_symbol expression\n    \n        assign_symbol : ASSIGN\n                      | SUBASSIGN\n                      | ADDASSIGN\n                      | DIVASSIGN\n                      | MULTASSIGN\n    \n        expression : built_in_function '(' term ')'\n    \n        expression : term\n    \n        expression : expression '+' term\n                   | expression '-' term\n                   | expression '/' term\n                   | expression '*' term\n                   | expression EQL term\n                   | expression NEQ term\n                   | expression GT term\n                   | expression GTE term\n                   | expression LT term\n                   | expression LTE term\n    \n        expression : '-' term %prec UMINUS\n    \n        vector : ID TRANSPOSE\n               | vector TRANSPOSE\n    \n        expression : ID dot_operation term\n                   | vector dot_operation term\n    \n         dot_operation : DOTADD\n                       | DOTSUB\n                       | DOTMUL\n                       | DOTDIV\n    \n        vector : '[' vector_contents ']'\n    \n        vector_contents : vector_element\n                        | vector_contents ',' vector_element\n    \n        vector_element : term\n    \n        slice : '[' slice_contents ']'\n    \n        slice_contents : range\n                       | slice_contents ',' range\n    \n        range : term ':' term\n              | term ':'\n              | ':' term\n              | term\n    \n        if : IF condition nested %prec IFx\n           | IF condition nested ELSE nested\n    \n        condition : '(' expression ')'\n    \n        nested : '{' statements '}'\n               | statement\n    \n        term : '(' expression ')'\n             | vector\n             | INTNUM\n             | STR\n             | FLOATNUM\n             | ID\n    \n        built_in_function : EYE\n                          | ONES\n                          | ZEROS\n    "
    
_lr_action_items = {'ID':([0,2,3,9,10,11,13,16,18,20,21,22,23,24,25,26,28,29,30,31,32,33,37,38,39,40,41,45,46,47,48,50,51,53,55,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,80,81,82,83,87,88,89,91,92,95,96,99,100,101,102,103,104,105,106,107,108,110,111,112,113,114,115,116,117,121,123,124,125,126,127,],[12,12,-2,-9,-10,-11,40,40,52,-3,-4,-5,-6,-7,-8,40,-22,-23,-24,-25,-26,61,40,-28,61,-69,-65,-66,-67,-68,61,12,40,12,40,61,-65,-69,40,61,61,61,61,61,61,61,61,61,61,61,-39,61,-40,-44,-45,-46,-47,61,-41,-59,12,-63,40,-13,61,61,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-64,-42,-43,-48,61,12,12,-61,-27,-60,-62,40,12,-12,]),'PRINT':([0,2,3,9,10,11,20,21,22,23,24,25,38,40,41,45,46,47,50,53,60,61,75,77,83,87,88,89,92,99,100,101,102,103,104,105,106,107,108,110,111,112,113,115,116,117,121,123,124,126,127,],[13,13,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-28,-69,-65,-66,-67,-68,13,13,-65,-69,-39,-40,-41,-59,13,-63,-13,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-64,-42,-43,-48,13,13,-61,-27,-60,-62,13,-12,]),'CONTINUE':([0,2,3,9,10,11,20,21,22,23,24,25,38,40,41,45,46,47,50,53,60,61,75,77,83,87,88,89,92,99,100,101,102,103,104,105,106,107,108,110,111,112,113,115,116,117,121,123,124,126,127,],[14,14,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-28,-69,-65,-66,-67,-68,14,14,-65,-69,-39,-40,-41,-59,14,-63,-13,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-64,-42,-43,-48,14,14,-61,-27,-60,-62,14,-12,]),'BREAK':([0,2,3,9,10,11,20,21,22,23,24,25,38,40,41,45,46,47,50,53,60,61,75,77,83,87,88,89,92,99,100,101,102,103,104,105,106,107,108,110,111,112,113,115,116,117,121,123,124,126,127,],[15,15,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-28,-69,-65,-66,-67,-68,15,15,-65,-69,-39,-40,-41,-59,15,-63,-13,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-64,-42,-43,-48,15,15,-61,-27,-60,-62,15,-12,]),'RETURN':([0,2,3,9,10,11,20,21,22,23,24,25,38,40,41,45,46,47,50,53,60,61,75,77,83,87,88,89,92,99,100,101,102,103,104,105,106,107,108,110,111,112,113,115,116,117,121,123,124,126,127,],[16,16,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-28,-69,-65,-66,-67,-68,16,16,-65,-69,-39,-40,-41,-59,16,-63,-13,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-64,-42,-43,-48,16,16,-61,-27,-60,-62,16,-12,]),'IF':([0,2,3,9,10,11,20,21,22,23,24,25,38,40,41,45,46,47,50,53,60,61,75,77,83,87,88,89,92,99,100,101,102,103,104,105,106,107,108,110,111,112,113,115,116,117,121,123,124,126,127,],[17,17,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-28,-69,-65,-66,-67,-68,17,17,-65,-69,-39,-40,-41,-59,17,-63,-13,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-64,-42,-43,-48,17,17,-61,-27,-60,-62,17,-12,]),'FOR':([0,2,3,9,10,11,20,21,22,23,24,25,38,40,41,45,46,47,50,53,60,61,75,77,83,87,88,89,92,99,100,101,102,103,104,105,106,107,108,110,111,112,113,115,116,117,121,123,124,126,127,],[18,18,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-28,-69,-65,-66,-67,-68,18,18,-65,-69,-39,-40,-41,-59,18,-63,-13,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-64,-42,-43,-48,18,18,-61,-27,-60,-62,18,-12,]),'WHILE':([0,2,3,9,10,11,20,21,22,23,24,25,38,40,41,45,46,47,50,53,60,61,75,77,83,87,88,89,92,99,100,101,102,103,104,105,106,107,108,110,111,112,113,115,116,117,121,123,124,126,127,],[19,19,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-28,-69,-65,-66,-67,-68,19,19,-65,-69,-39,-40,-41,-59,19,-63,-13,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-64,-42,-43,-48,19,19,-61,-27,-60,-62,19,-12,]),'$end':([1,2,3,9,10,11,20,21,22,23,24,25,87,89,92,123,124,127,],[0,-1,-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-59,-63,-13,-60,-62,-12,]),'}':([3,9,10,11,20,21,22,23,24,25,87,89,92,116,123,124,127,],[-2,-9,-10,-11,-3,-4,-5,-6,-7,-8,-59,-63,-13,124,-60,-62,-12,]),';':([4,5,6,7,8,14,15,34,35,38,40,41,45,46,47,49,54,60,61,75,77,83,93,98,99,100,101,102,103,104,105,106,107,108,110,111,112,113,121,],[21,22,23,24,25,-16,-14,-17,-18,-28,-69,-65,-66,-67,-68,-15,-20,-65,-69,-39,-40,-41,-21,-19,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-64,-42,-43,-48,-27,]),'ELSE':([9,10,11,21,22,23,24,25,87,89,92,123,124,127,],[-9,-10,-11,-4,-5,-6,-7,-8,115,-63,-13,-60,-62,-12,]),'ASSIGN':([12,27,52,94,],[28,28,91,-52,]),'SUBASSIGN':([12,27,94,],[29,29,-52,]),'ADDASSIGN':([12,27,94,],[30,30,-52,]),'DIVASSIGN':([12,27,94,],[31,31,-52,]),'MULTASSIGN':([12,27,94,],[32,32,-52,]),'[':([12,13,16,26,28,29,30,31,32,33,37,39,48,51,55,59,62,63,64,65,66,67,68,69,70,71,72,73,76,78,79,80,81,82,91,95,96,114,125,],[33,48,48,48,-22,-23,-24,-25,-26,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-44,-45,-46,-47,48,48,48,48,48,48,]),'-':([13,16,26,28,29,30,31,32,35,37,38,40,41,45,46,47,49,51,54,55,60,61,62,74,75,77,83,90,91,93,98,99,100,101,102,103,104,105,106,107,108,110,111,112,113,118,121,125,126,],[39,39,39,-22,-23,-24,-25,-26,64,39,-28,-69,-65,-66,-67,-68,64,39,64,39,-65,-69,39,64,-39,-40,-41,64,39,64,64,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-64,-42,-43,-48,64,-27,39,64,]),'EYE':([13,16,26,28,29,30,31,32,37,51,55,62,91,125,],[42,42,42,-22,-23,-24,-25,-26,42,42,42,42,42,42,]),'ONES':([13,16,26,28,29,30,31,32,37,51,55,62,91,125,],[43,43,43,-22,-23,-24,-25,-26,43,43,43,43,43,43,]),'ZEROS':([13,16,26,28,29,30,31,32,37,51,55,62,91,125,],[44,44,44,-22,-23,-24,-25,-26,44,44,44,44,44,44,]),'(':([13,16,17,19,26,28,29,30,31,32,33,36,37,39,42,43,44,48,51,55,59,62,63,64,65,66,67,68,69,70,71,72,73,76,78,79,80,81,82,91,95,96,114,125,],[37,37,51,51,37,-22,-23,-24,-25,-26,37,73,37,37,-70,-71,-72,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-44,-45,-46,-47,37,37,37,37,37,37,]),'INTNUM':([13,16,26,28,29,30,31,32,33,37,39,48,51,55,59,62,63,64,65,66,67,68,69,70,71,72,73,76,78,79,80,81,82,91,95,96,114,125,],[45,45,45,-22,-23,-24,-25,-26,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-44,-45,-46,-47,45,45,45,45,45,45,]),'STR':([13,16,26,28,29,30,31,32,33,37,39,48,51,55,59,62,63,64,65,66,67,68,69,70,71,72,73,76,78,79,80,81,82,91,95,96,114,125,],[46,46,46,-22,-23,-24,-25,-26,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-44,-45,-46,-47,46,46,46,46,46,46,]),'FLOATNUM':([13,16,26,28,29,30,31,32,33,37,39,48,51,55,59,62,63,64,65,66,67,68,69,70,71,72,73,76,78,79,80,81,82,91,95,96,114,125,],[47,47,47,-22,-23,-24,-25,-26,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-44,-45,-46,-47,47,47,47,47,47,47,]),':':([33,38,40,41,45,46,47,58,60,61,75,77,83,95,99,100,101,102,103,104,105,106,107,108,110,111,112,113,118,121,],[59,-28,-69,-65,-66,-67,-68,96,-65,-69,-39,-40,-41,59,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-64,-42,-43,-48,125,-27,]),',':([34,35,38,40,41,45,46,47,56,57,58,60,61,75,77,83,84,85,86,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,112,113,119,120,121,122,],[62,-18,-28,-69,-65,-66,-67,-68,95,-53,-58,-65,-69,-39,-40,-41,114,-49,-51,-56,-57,-19,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-64,-42,-43,-48,-54,-55,-27,-50,]),'+':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,90,93,98,99,100,101,102,103,104,105,106,107,108,110,111,112,113,118,121,126,],[63,-28,-69,-65,-66,-67,-68,63,63,-65,-69,63,-39,-40,-41,63,63,63,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-64,-42,-43,-48,63,-27,63,]),'/':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,90,93,98,99,100,101,102,103,104,105,106,107,108,110,111,112,113,118,121,126,],[65,-28,-69,-65,-66,-67,-68,65,65,-65,-69,65,-39,-40,-41,65,65,65,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-64,-42,-43,-48,65,-27,65,]),'*':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,90,93,98,99,100,101,102,103,104,105,106,107,108,110,111,112,113,118,121,126,],[66,-28,-69,-65,-66,-67,-68,66,66,-65,-69,66,-39,-40,-41,66,66,66,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-64,-42,-43,-48,66,-27,66,]),'EQL':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,90,93,98,99,100,101,102,103,104,105,106,107,108,110,111,112,113,118,121,126,],[67,-28,-69,-65,-66,-67,-68,67,67,-65,-69,67,-39,-40,-41,67,67,67,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-64,-42,-43,-48,67,-27,67,]),'NEQ':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,90,93,98,99,100,101,102,103,104,105,106,107,108,110,111,112,113,118,121,126,],[68,-28,-69,-65,-66,-67,-68,68,68,-65,-69,68,-39,-40,-41,68,68,68,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-64,-42,-43,-48,68,-27,68,]),'GT':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,90,93,98,99,100,101,102,103,104,105,106,107,108,110,111,112,113,118,121,126,],[69,-28,-69,-65,-66,-67,-68,69,69,-65,-69,69,-39,-40,-41,69,69,69,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-64,-42,-43,-48,69,-27,69,]),'GTE':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,90,93,98,99,100,101,102,103,104,105,106,107,108,110,111,112,113,118,121,126,],[70,-28,-69,-65,-66,-67,-68,70,70,-65,-69,70,-39,-40,-41,70,70,70,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-64,-42,-43,-48,70,-27,70,]),'LT':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,90,93,98,99,100,101,102,103,104,105,106,107,108,110,111,112,113,118,121,126,],[71,-28,-69,-65,-66,-67,-68,71,71,-65,-69,71,-39,-40,-41,71,71,71,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-64,-42,-43,-48,71,-27,71,]),'LTE':([35,38,40,41,45,46,47,49,54,60,61,74,75,77,83,90,93,98,99,100,101,102,103,104,105,106,107,108,110,111,112,113,118,121,126,],[72,-28,-69,-65,-66,-67,-68,72,72,-65,-69,72,-39,-40,-41,72,72,72,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-64,-42,-43,-48,72,-27,72,]),')':([38,40,41,45,46,47,60,61,74,75,77,83,90,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,121,],[-28,-69,-65,-66,-67,-68,-65,-69,110,-39,-40,-41,117,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,121,-64,-42,-43,-48,-27,]),'{':([38,40,41,45,46,47,50,53,60,61,75,77,83,99,100,101,102,103,104,105,106,107,108,110,111,112,113,115,117,121,126,],[-28,-69,-65,-66,-67,-68,88,88,-65,-69,-39,-40,-41,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-64,-42,-43,-48,88,-61,-27,88,]),'TRANSPOSE':([40,41,60,61,77,83,113,],[77,83,83,77,-40,-41,-48,]),'DOTADD':([40,41,77,83,113,],[78,78,-40,-41,-48,]),'DOTSUB':([40,41,77,83,113,],[79,79,-40,-41,-48,]),'DOTMUL':([40,41,77,83,113,],[80,80,-40,-41,-48,]),'DOTDIV':([40,41,77,83,113,],[81,81,-40,-41,-48,]),']':([45,46,47,56,57,58,60,61,77,83,84,85,86,96,97,110,113,119,120,122,],[-66,-67,-68,94,-53,-58,-65,-69,-40,-41,113,-49,-51,-56,-57,-64,-48,-54,-55,-50,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'statements':([0,88,],[2,116,]),'statement':([0,2,50,53,88,115,116,126,],[3,20,89,89,3,89,20,89,]),'assignment':([0,2,50,53,88,115,116,126,],[4,4,4,4,4,4,4,4,]),'print':([0,2,50,53,88,115,116,126,],[5,5,5,5,5,5,5,5,]),'continue':([0,2,50,53,88,115,116,126,],[6,6,6,6,6,6,6,6,]),'break':([0,2,50,53,88,115,116,126,],[7,7,7,7,7,7,7,7,]),'return':([0,2,50,53,88,115,116,126,],[8,8,8,8,8,8,8,8,]),'if':([0,2,50,53,88,115,116,126,],[9,9,9,9,9,9,9,9,]),'for':([0,2,50,53,88,115,116,126,],[10,10,10,10,10,10,10,10,]),'while':([0,2,50,53,88,115,116,126,],[11,11,11,11,11,11,11,11,]),'assign_symbol':([12,27,],[26,55,]),'slice':([12,],[27,]),'coma_separated':([13,],[34,]),'expression':([13,16,26,37,51,55,62,91,125,],[35,49,54,74,90,93,98,118,126,]),'built_in_function':([13,16,26,37,51,55,62,91,125,],[36,36,36,36,36,36,36,36,36,]),'term':([13,16,26,33,37,39,48,51,55,59,62,63,64,65,66,67,68,69,70,71,72,73,76,82,91,95,96,114,125,],[38,38,38,58,38,75,86,38,38,97,38,99,100,101,102,103,104,105,106,107,108,109,111,112,38,58,120,86,38,]),'vector':([13,16,26,33,37,39,48,51,55,59,62,63,64,65,66,67,68,69,70,71,72,73,76,82,91,95,96,114,125,],[41,41,41,60,41,60,60,41,41,60,41,60,60,60,60,60,60,60,60,60,60,60,60,60,41,60,60,60,41,]),'condition':([17,19,],[50,53,]),'slice_contents':([33,],[56,]),'range':([33,95,],[57,119,]),'dot_operation':([40,41,],[76,82,]),'vector_contents':([48,],[84,]),'vector_element':([48,114,],[85,122,]),'nested':([50,53,115,126,],[87,92,123,127,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> statements','start',1,'p_start','Parser.py',21),
  ('statements -> statement','statements',1,'p_statements','Parser.py',28),
  ('statements -> statements statement','statements',2,'p_statements','Parser.py',29),
  ('statement -> assignment ;','statement',2,'p_statement','Parser.py',36),
  ('statement -> print ;','statement',2,'p_statement','Parser.py',37),
  ('statement -> continue ;','statement',2,'p_statement','Parser.py',38),
  ('statement -> break ;','statement',2,'p_statement','Parser.py',39),
  ('statement -> return ;','statement',2,'p_statement','Parser.py',40),
  ('statement -> if','statement',1,'p_statement','Parser.py',41),
  ('statement -> for','statement',1,'p_statement','Parser.py',42),
  ('statement -> while','statement',1,'p_statement','Parser.py',43),
  ('for -> FOR ID ASSIGN expression : expression nested','for',7,'p_for','Parser.py',50),
  ('while -> WHILE condition nested','while',3,'p_while','Parser.py',58),
  ('break -> BREAK','break',1,'p_break','Parser.py',66),
  ('return -> RETURN expression','return',2,'p_return','Parser.py',74),
  ('continue -> CONTINUE','continue',1,'p_continue','Parser.py',82),
  ('print -> PRINT coma_separated','print',2,'p_print','Parser.py',90),
  ('coma_separated -> expression','coma_separated',1,'p_coma_separated','Parser.py',98),
  ('coma_separated -> coma_separated , expression','coma_separated',3,'p_coma_separated','Parser.py',99),
  ('assignment -> ID assign_symbol expression','assignment',3,'p_assignment','Parser.py',106),
  ('assignment -> ID slice assign_symbol expression','assignment',4,'p_slice_assignment','Parser.py',113),
  ('assign_symbol -> ASSIGN','assign_symbol',1,'p_assign','Parser.py',120),
  ('assign_symbol -> SUBASSIGN','assign_symbol',1,'p_assign','Parser.py',121),
  ('assign_symbol -> ADDASSIGN','assign_symbol',1,'p_assign','Parser.py',122),
  ('assign_symbol -> DIVASSIGN','assign_symbol',1,'p_assign','Parser.py',123),
  ('assign_symbol -> MULTASSIGN','assign_symbol',1,'p_assign','Parser.py',124),
  ('expression -> built_in_function ( term )','expression',4,'p_expression_built_in_function','Parser.py',131),
  ('expression -> term','expression',1,'p_expression_term','Parser.py',138),
  ('expression -> expression + term','expression',3,'p_expression_binary_ops','Parser.py',145),
  ('expression -> expression - term','expression',3,'p_expression_binary_ops','Parser.py',146),
  ('expression -> expression / term','expression',3,'p_expression_binary_ops','Parser.py',147),
  ('expression -> expression * term','expression',3,'p_expression_binary_ops','Parser.py',148),
  ('expression -> expression EQL term','expression',3,'p_expression_binary_ops','Parser.py',149),
  ('expression -> expression NEQ term','expression',3,'p_expression_binary_ops','Parser.py',150),
  ('expression -> expression GT term','expression',3,'p_expression_binary_ops','Parser.py',151),
  ('expression -> expression GTE term','expression',3,'p_expression_binary_ops','Parser.py',152),
  ('expression -> expression LT term','expression',3,'p_expression_binary_ops','Parser.py',153),
  ('expression -> expression LTE term','expression',3,'p_expression_binary_ops','Parser.py',154),
  ('expression -> - term','expression',2,'p_expression_unary','Parser.py',161),
  ('vector -> ID TRANSPOSE','vector',2,'p_vector_transpose','Parser.py',168),
  ('vector -> vector TRANSPOSE','vector',2,'p_vector_transpose','Parser.py',169),
  ('expression -> ID dot_operation term','expression',3,'p_expression_suffix_binary_ops','Parser.py',176),
  ('expression -> vector dot_operation term','expression',3,'p_expression_suffix_binary_ops','Parser.py',177),
  ('dot_operation -> DOTADD','dot_operation',1,'p_dot_operation','Parser.py',184),
  ('dot_operation -> DOTSUB','dot_operation',1,'p_dot_operation','Parser.py',185),
  ('dot_operation -> DOTMUL','dot_operation',1,'p_dot_operation','Parser.py',186),
  ('dot_operation -> DOTDIV','dot_operation',1,'p_dot_operation','Parser.py',187),
  ('vector -> [ vector_contents ]','vector',3,'p_vector','Parser.py',194),
  ('vector_contents -> vector_element','vector_contents',1,'p_vector_contents','Parser.py',201),
  ('vector_contents -> vector_contents , vector_element','vector_contents',3,'p_vector_contents','Parser.py',202),
  ('vector_element -> term','vector_element',1,'p_vector_element','Parser.py',209),
  ('slice -> [ slice_contents ]','slice',3,'p_slice','Parser.py',216),
  ('slice_contents -> range','slice_contents',1,'p_slice_contents','Parser.py',223),
  ('slice_contents -> slice_contents , range','slice_contents',3,'p_slice_contents','Parser.py',224),
  ('range -> term : term','range',3,'p_range','Parser.py',231),
  ('range -> term :','range',2,'p_range','Parser.py',232),
  ('range -> : term','range',2,'p_range','Parser.py',233),
  ('range -> term','range',1,'p_range','Parser.py',234),
  ('if -> IF condition nested','if',3,'p_if','Parser.py',257),
  ('if -> IF condition nested ELSE nested','if',5,'p_if','Parser.py',258),
  ('condition -> ( expression )','condition',3,'p_condition','Parser.py',266),
  ('nested -> { statements }','nested',3,'p_nested','Parser.py',272),
  ('nested -> statement','nested',1,'p_nested','Parser.py',273),
  ('term -> ( expression )','term',3,'p_term','Parser.py',280),
  ('term -> vector','term',1,'p_term','Parser.py',281),
  ('term -> INTNUM','term',1,'p_term','Parser.py',282),
  ('term -> STR','term',1,'p_term','Parser.py',283),
  ('term -> FLOATNUM','term',1,'p_term','Parser.py',284),
  ('term -> ID','term',1,'p_term','Parser.py',285),
  ('built_in_function -> EYE','built_in_function',1,'p_built_in_function','Parser.py',292),
  ('built_in_function -> ONES','built_in_function',1,'p_built_in_function','Parser.py',293),
  ('built_in_function -> ZEROS','built_in_function',1,'p_built_in_function','Parser.py',294),
]
